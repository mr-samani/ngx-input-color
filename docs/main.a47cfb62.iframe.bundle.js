(self.webpackChunkngx_input_color=self.webpackChunkngx_input_color||[]).push([[792],{"./projects/storybook lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./Configure.mdx":["./projects/storybook/Configure.mdx",144,707],"./DocumentationTemplate.mdx":["./projects/storybook/DocumentationTemplate.mdx",144,487]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then(()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e});var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(()=>__webpack_require__(id))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./projects/storybook lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$",module.exports=webpackAsyncContext},"./projects/storybook/.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_storybook_preview});var angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[{"name":"EnumToArrayPipe","id":"pipe-EnumToArrayPipe-d05baae9aea1fca45eb0e5da97921d979f6986c50f82af9019a7f4f37c15c90606ddd4776a928927ca7ad054966c67c8b95e6a3495026554b373be98bce74fc6","file":"projects/ngx-input-color/src/pipes/enum-to-array.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"data","type":"Object","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":11,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n when data enum like:\\nA=1,\\nB=2,\\nC=3\\n","description":"<p> when data enum like:\\nA=1,\\nB=2,\\nC=3</p>\\n","jsdoctags":[{"name":"data","type":"Object","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"standalone":true,"ngname":"enumToArray","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\n\\r\\n@Pipe({ standalone: true, name: \'enumToArray\' })\\r\\nexport class EnumToArrayPipe implements PipeTransform {\\r\\n  /**\\r\\n   *  when data enum like:\\r\\n   * A=1,\\r\\n   * B=2,\\r\\n   * C=3\\r\\n   */\\r\\n  transform(data: Object) {\\r\\n    // The list should be sorted due to the existence of negative ENUMs\\r\\n    const keys = Object.keys(data).sort();\\r\\n    // return key of enum => men,women,...\\r\\n    // return keys.slice(keys.length / 2);\\r\\n    // return value of enum => 0,1,2,3\\r\\n    return keys.slice(0, keys.length / 2);\\r\\n  }\\r\\n}\\r\\n\\r\\n@Pipe({ standalone: true, name: \'enumToArrayStringValue\' })\\r\\nexport class EnumToArrayStringValuePipe implements PipeTransform {\\r\\n  /**\\r\\n   *  when data enum like:\\r\\n   * A=\'A\',\\r\\n   * B=\'B\',\\r\\n   * C=\'C\'\\r\\n   */\\r\\n  transform(data: Object, sort = true) {\\r\\n    let keys = Object.keys(data);\\r\\n    if (sort) keys = keys.sort();\\r\\n    return keys;\\r\\n  }\\r\\n}\\r\\n"},{"name":"EnumToArrayStringValuePipe","id":"pipe-EnumToArrayStringValuePipe-d05baae9aea1fca45eb0e5da97921d979f6986c50f82af9019a7f4f37c15c90606ddd4776a928927ca7ad054966c67c8b95e6a3495026554b373be98bce74fc6","file":"projects/ngx-input-color/src/pipes/enum-to-array.pipe.ts","type":"pipe","deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","properties":[],"methods":[{"name":"transform","args":[{"name":"data","type":"Object","deprecated":false,"deprecationMessage":""},{"name":"sort","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"any","typeParameters":[],"line":29,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n when data enum like:\\nA=\'A\',\\nB=\'B\',\\nC=\'C\'\\n","description":"<p> when data enum like:\\nA=&#39;A&#39;,\\nB=&#39;B&#39;,\\nC=&#39;C&#39;</p>\\n","jsdoctags":[{"name":"data","type":"Object","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"sort","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]}],"standalone":true,"ngname":"enumToArrayStringValue","sourceCode":"import { Pipe, PipeTransform } from \'@angular/core\';\\r\\n\\r\\n@Pipe({ standalone: true, name: \'enumToArray\' })\\r\\nexport class EnumToArrayPipe implements PipeTransform {\\r\\n  /**\\r\\n   *  when data enum like:\\r\\n   * A=1,\\r\\n   * B=2,\\r\\n   * C=3\\r\\n   */\\r\\n  transform(data: Object) {\\r\\n    // The list should be sorted due to the existence of negative ENUMs\\r\\n    const keys = Object.keys(data).sort();\\r\\n    // return key of enum => men,women,...\\r\\n    // return keys.slice(keys.length / 2);\\r\\n    // return value of enum => 0,1,2,3\\r\\n    return keys.slice(0, keys.length / 2);\\r\\n  }\\r\\n}\\r\\n\\r\\n@Pipe({ standalone: true, name: \'enumToArrayStringValue\' })\\r\\nexport class EnumToArrayStringValuePipe implements PipeTransform {\\r\\n  /**\\r\\n   *  when data enum like:\\r\\n   * A=\'A\',\\r\\n   * B=\'B\',\\r\\n   * C=\'C\'\\r\\n   */\\r\\n  transform(data: Object, sort = true) {\\r\\n    let keys = Object.keys(data);\\r\\n    if (sort) keys = keys.sort();\\r\\n    return keys;\\r\\n  }\\r\\n}\\r\\n"}],"interfaces":[{"name":"BoxShadowValue","id":"interface-BoxShadowValue-878df05493755ecb653c6e6f8790ad8e6ef50a6da75d7b9524ce1943b36513067aa3aa411e15a2f7f6e4503696ae7e2e50ea4feb0665d53676850909ea75edd4","file":"projects/ngx-input-color/src/models/BoxShadowValue.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface BoxShadowValue {\\r\\n  inset: boolean;\\r\\n  offsetX: number;\\r\\n  offsetY: number;\\r\\n  blurRadius: number;\\r\\n  spreadRadius: number;\\r\\n  color: string;\\r\\n}\\r\\n","properties":[{"name":"blurRadius","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":5},{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":7},{"name":"inset","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":2},{"name":"offsetX","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":3},{"name":"offsetY","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":4},{"name":"spreadRadius","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":6}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"GradientStop","id":"interface-GradientStop-3e6bb151d18883eb8ca2d8c0bf8bb6e8242751199a5cb3b230d43b7f7377b272ca153cf23aa8f77ab79287f598f891f0d8787276fa7e2b64a6695c65eb5d6973","file":"projects/ngx-input-color/src/models/GradientStop.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface GradientStop {\\r\\n  id: string;\\r\\n  value: number; // مثلا 23 (موقعیت شروع رنگ)\\r\\n  color: string; // مثل \'red\' یا \'#ff0000\'\\r\\n}\\r\\n\\r\\nexport type GradientType = \'linear\' | \'radial\';\\r\\n","properties":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":4},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":2},{"name":"value","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":3}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"IPosition","id":"interface-IPosition-b8ab0c25f3ed70fdd185b87b3c2fd076dbb354f2b5e5c068444b8f2ecfe13836fbfa938e8d56cc8520dffab4a037745d14dc30a5655857429ce406e4bca1a50f","file":"projects/ngx-input-color/src/models/IPosition.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface IPosition {\\r\\n  x: number;\\r\\n  y: number;\\r\\n}\\r\\n","properties":[{"name":"x","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":3},{"name":"y","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":4}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]},{"name":"IValue","id":"interface-IValue-91b64cbc65de4ad0080e8aef7602ab3a65cec14c607a9ad13375caacb6444c45183f3bc940fcc1e3a6015538066d39b9b887c541f3d85e15aa6a556c71d1f9b7","file":"projects/ngx-input-color/src/range-slider/range-slider.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  HostListener,\\r\\n  Input,\\r\\n  Output,\\r\\n  ViewChild,\\r\\n  forwardRef,\\r\\n  type OnInit,\\r\\n} from \'@angular/core\';\\r\\nimport { getOffsetPosition } from \'../utils/get-offset-position\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n  Validators,\\r\\n} from \'@angular/forms\';\\r\\n\\r\\nexport interface IValue {\\r\\n  id?: string;\\r\\n  value: number;\\r\\n}\\r\\nexport class ValueModel {\\r\\n  id!: string;\\r\\n  value!: number;\\r\\n  x?: number;\\r\\n  thumb?: HTMLElement;\\r\\n  color?: string;\\r\\n}\\r\\n\\r\\n@Component({\\r\\n  selector: \'range-slider\',\\r\\n  standalone: true,\\r\\n  imports: [CommonModule],\\r\\n  templateUrl: \'./range-slider.component.html\',\\r\\n  styleUrls: [\'./range-slider.component.scss\'],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => RangeSliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      useExisting: forwardRef(() => RangeSliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class RangeSliderComponent implements OnInit, ControlValueAccessor, Validator {\\r\\n  /**\\r\\n   * The step value for the slider\\r\\n   */\\r\\n  @Input() step = 1;\\r\\n  /**\\r\\n   * The minimum value for the slider\\r\\n   */\\r\\n  @Input() min = 0;\\r\\n  /**\\r\\n   * The maximum value for the slider\\r\\n   */\\r\\n  @Input() max = 100;\\r\\n  /**\\r\\n   * The background color of the slider\\r\\n   * - can use css like `background: linear-gradient(to right, red, blue);`\\r\\n   * - or a solid color like `background: red;`\\r\\n   */\\r\\n  @Input() background?: string;\\r\\n  /**\\r\\n   * If true, the background will be transparent\\r\\n   */\\r\\n  @Input() isBgTransparent = false;\\r\\n  /**\\r\\n   * If true, clicking on the slider will add a new range at that position\\r\\n   */\\r\\n  @Input() addNewRangeOnClick = false;\\r\\n\\r\\n  /**\\r\\n   * The current value of the slider\\r\\n   */\\r\\n  @Output() change = new EventEmitter<IValue[]>();\\r\\n  @Input() selectedIndex?: number;\\r\\n  @Output() selectedIndexChange = new EventEmitter<number>();\\r\\n\\r\\n  private isDragging = false;\\r\\n\\r\\n  @ViewChild(\'slider\', { static: true }) slider!: ElementRef<HTMLDivElement>;\\r\\n  @ViewChild(\'thumb\', { static: false }) thumb?: ElementRef<HTMLDivElement>;\\r\\n\\r\\n  values: ValueModel[] = [];\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: IValue[]) => {};\\r\\n  _onTouched = () => {};\\r\\n  _validatorOnChange = () => {};\\r\\n  private sliderRect?: DOMRect;\\r\\n  private thumbRect?: DOMRect;\\r\\n\\r\\n  constructor(private changeDetectorRef: ChangeDetectorRef) {}\\r\\n  ngOnInit(): void {}\\r\\n\\r\\n  private generateId(): string {\\r\\n    let id = \'ngx-thumb-\' + Math.random().toString(36).substring(2, 9);\\r\\n    if (this.values.findIndex((x) => x.id == id) >= 0) {\\r\\n      return this.generateId();\\r\\n    }\\r\\n    return id;\\r\\n  }\\r\\n\\r\\n  writeValue(items?: IValue[]): void {\\r\\n    this.values = [];\\r\\n    if (!items || !Array.isArray(items)) {\\r\\n      items = [];\\r\\n    }\\r\\n    if (items.length === 0) {\\r\\n      items.push({ id: this.generateId(), value: this.min });\\r\\n    }\\r\\n    for (let val of items) {\\r\\n      if (typeof val.value !== \'number\' || isNaN(val.value)) {\\r\\n        throw new Error(\'RangeSliderComponent: value must be an array of numbers\');\\r\\n      }\\r\\n      let newVal = +val.value;\\r\\n      if (newVal < +this.min) newVal = +this.min;\\r\\n      else if (newVal > +this.max) newVal = +this.max;\\r\\n      this.values.push({\\r\\n        ...val,\\r\\n        id: val.id ?? this.generateId(),\\r\\n        value: newVal,\\r\\n      });\\r\\n    }\\r\\n    this.updateAllThumbPositions();\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return null; // TODO: return errors if any;\\r\\n  }\\r\\n  registerOnValidatorChange?(fn: () => void): void {\\r\\n    this._validatorOnChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState?(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  private updateRects() {\\r\\n    this.sliderRect = this.slider.nativeElement.getBoundingClientRect();\\r\\n    if (this.thumb) {\\r\\n      this.thumbRect = this.thumb.nativeElement.getBoundingClientRect();\\r\\n    }\\r\\n  }\\r\\n  @HostListener(\'document:mousemove\', [\'$event\'])\\r\\n  @HostListener(\'document:touchmove\', [\'$event\'])\\r\\n  onDrag(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    this.updateThumbPosition(ev);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  onResize() {\\r\\n    this.writeValue(this.values);\\r\\n  }\\r\\n  dragStart(ev: MouseEvent | TouchEvent, index: number) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.isDragging = true;\\r\\n    this.selectedIndex = index;\\r\\n    this.updateRects();\\r\\n    this.updateThumbPosition(ev);\\r\\n    this.selectedIndexChange.emit(this.selectedIndex);\\r\\n  }\\r\\n\\r\\n  addnewRangeOnSliderClick(event: MouseEvent | TouchEvent) {\\r\\n    if (!this.addNewRangeOnClick) return;\\r\\n    const position = getOffsetPosition(event, this.slider.nativeElement);\\r\\n    const newValue = this.min + (position.x / this.sliderRect!.width) * (this.max - this.min);\\r\\n    // must be add with order by position\\r\\n    const indexByOrderValue = this.values.findIndex((item) => item.value > newValue);\\r\\n    const insertIndex = indexByOrderValue >= 0 ? indexByOrderValue : this.values.length;\\r\\n    this.values.splice(insertIndex, 0, {\\r\\n      id: this.generateId(),\\r\\n      value: newValue,\\r\\n    });\\r\\n    this.dragStart(event, insertIndex);\\r\\n    // this.updateAllThumbPositions();\\r\\n    // this.valueChanged();\\r\\n  }\\r\\n\\r\\n  private updateThumbPosition(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging || this.selectedIndex == undefined) return;\\r\\n    if (!this.sliderRect || !this.thumbRect) this.updateRects();\\r\\n    let position = getOffsetPosition(ev, this.slider.nativeElement);\\r\\n    let thumbRec = this.thumbRect!;\\r\\n    position.x -= thumbRec.width / 2;\\r\\n    let sliderRec = this.sliderRect!;\\r\\n    const thumb = this.values[this.selectedIndex];\\r\\n    if (position.x < 0) {\\r\\n      thumb.x = 0;\\r\\n    } else if (position.x > sliderRec.width - thumbRec.width) {\\r\\n      thumb.x = sliderRec.width - thumbRec.width;\\r\\n    } else {\\r\\n      thumb.x = position.x;\\r\\n    }\\r\\n    this.setValueByPosition(thumb, thumbRec, sliderRec);\\r\\n  }\\r\\n\\r\\n  updateAllThumbPositions() {\\r\\n    // wait to add thumbs\\r\\n    setTimeout(() => {\\r\\n      this.updateRects();\\r\\n      const sliderRec = this.sliderRect!;\\r\\n      const thumbRec = this.thumbRect!;\\r\\n      for (let item of this.values) {\\r\\n        item.x = ((item.value - this.min) * (sliderRec.width - thumbRec.width)) / (this.max - this.min);\\r\\n      }\\r\\n      this.changeDetectorRef.detectChanges();\\r\\n    });\\r\\n  }\\r\\n  setValueByPosition(thumb: ValueModel, thumbRec: DOMRect, sliderRec: DOMRect) {\\r\\n    const percentage = (thumb.x ?? 0) / (sliderRec.width - thumbRec.width);\\r\\n    let newValue = this.min + percentage * (this.max - this.min);\\r\\n    const stepDecimalPlaces = (this.step.toString().split(\'.\')[1] || \'\').length;\\r\\n    newValue = parseFloat((Math.round(newValue / this.step) * this.step).toFixed(stepDecimalPlaces));\\r\\n    let value = Math.min(Math.max(newValue, this.min), this.max);\\r\\n    if (thumb.value !== value) {\\r\\n      thumb.value = value;\\r\\n      this.valueChanged();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mouseup\', [\'$event\'])\\r\\n  @HostListener(\'document:touchend\', [\'$event\'])\\r\\n  onDragEnd(ev: MouseEvent | TouchEvent) {\\r\\n    this.isDragging = false;\\r\\n    // this.selectedIndex = undefined;\\r\\n  }\\r\\n\\r\\n  valueChanged() {\\r\\n    const v = this.values; // this.values.map(({ x, thumb, ...rest }) => ({ ...rest }));\\r\\n    this._onChange(v);\\r\\n    this.change.emit(v);\\r\\n  }\\r\\n}\\r\\n","properties":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":27},{"name":"value","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":28}],"indexSignatures":[],"kind":171,"methods":[],"extends":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[{"name":"CMYK","id":"class-CMYK-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"c","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":53},{"name":"k","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":56},{"name":"m","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":54},{"name":"y","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":55}],"description":"<p>The CMYK color model is a subtractive color model used in the printing process.\\nIt described four ink palettes: Cyan, Magenta, Yellow, and Black.</p>\\n","rawdescription":"\\n\\nThe CMYK color model is a subtractive color model used in the printing process.\\nIt described four ink palettes: Cyan, Magenta, Yellow, and Black.\\n","methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"HSL","id":"class-HSL-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"h","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":23},{"name":"l","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":25},{"name":"s","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":24}],"description":"<p>The HSL model describes colors in terms of hue, saturation,\\nand lightness (also called luminance).</p>\\n","rawdescription":"\\n\\nThe HSL model describes colors in terms of hue, saturation,\\nand lightness (also called luminance).\\n","methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"HSLA","id":"class-HSLA-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"a","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":29},{"name":"h","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":23,"inheritance":{"file":"HSL"}},{"name":"l","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":25,"inheritance":{"file":"HSL"}},{"name":"s","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":24,"inheritance":{"file":"HSL"}}],"methods":[],"indexSignatures":[],"extends":["HSL"],"hostBindings":[],"hostListeners":[]},{"name":"HSV","id":"class-HSV-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"h","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":38},{"name":"s","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":39},{"name":"v","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":40}],"description":"<p>The HSV, or HSB, model describes colors in terms of\\nhue, saturation, and value (brightness).</p>\\n","rawdescription":"\\n\\nThe HSV, or HSB, model describes colors in terms of\\nhue, saturation, and value (brightness).\\n","methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"HSVA","id":"class-HSVA-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"a","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":44},{"name":"h","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":38,"inheritance":{"file":"HSV"}},{"name":"s","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":39,"inheritance":{"file":"HSV"}},{"name":"v","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":40,"inheritance":{"file":"HSV"}}],"methods":[],"indexSignatures":[],"extends":["HSV"],"hostBindings":[],"hostListeners":[]},{"name":"NgxColor","id":"class-NgxColor-6f610e9a7c5af64495b4fec5b76062229e9c6c076364355d51eb1b776dcf40e0dc20e01b8db5792468669e9fe2d284eedd6e3715154bf4b364f5f76bd96ab074","file":"projects/ngx-input-color/src/utils/color-helper.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import {\\r\\n  cmykToRgb,\\r\\n  hexToRgb,\\r\\n  hslToRgba,\\r\\n  hsvToRgb,\\r\\n  parseCmykString,\\r\\n  parseHslString,\\r\\n  parseHsvString,\\r\\n  parseRgbString,\\r\\n  rgbaToHex,\\r\\n  rgbToCmyk,\\r\\n  rgbToCmykString,\\r\\n  rgbToHsl,\\r\\n  rgbToHslaString,\\r\\n  rgbToHsv,\\r\\n  rgbToHsvString,\\r\\n} from \'./conversion\';\\r\\nimport { colorNames } from \'./css-color-names\';\\r\\nimport { CMYK, HSL, HSLA, HSV, HSVA, RGB, RGBA } from \'./interfaces\';\\r\\nexport type ColorInput = string | CMYK | HSLA | HSVA | RGBA | NgxColor;\\r\\nexport type OutputType = \'CMYK\' | \'HSL\' | \'HSV\' | \'RGB\' | \'HEX\';\\r\\n\\r\\nexport class NgxColor {\\r\\n  private _rgb: RGBA = { r: 0, g: 0, b: 0, a: 1 };\\r\\n  private _name: string = \'\';\\r\\n\\r\\n  constructor(input?: ColorInput) {\\r\\n    if (!input) return;\\r\\n    if (input instanceof NgxColor) {\\r\\n      this._rgb = { ...input._rgb };\\r\\n      this._name = input._name;\\r\\n      return;\\r\\n    }\\r\\n    if (typeof input === \'object\') {\\r\\n      if (\'r\' in input && \'g\' in input && \'b\' in input) {\\r\\n        this._rgb = { r: +input.r, g: +input.g, b: +input.b, a: (input as any).a !== undefined ? +input.a : 1 };\\r\\n        return;\\r\\n      }\\r\\n      if (\'h\' in input && \'s\' in input && \'l\' in input) {\\r\\n        this._rgb = NgxColor.hslaToRgba(input as HSLA);\\r\\n        return;\\r\\n      }\\r\\n      if (\'h\' in input && \'s\' in input && \'v\' in input) {\\r\\n        this._rgb = NgxColor.hsvaToRgba(input as HSVA);\\r\\n        return;\\r\\n      }\\r\\n      if (\'c\' in input && \'m\' in input && \'y\' in input && \'k\' in input) {\\r\\n        this._rgb = NgxColor.cmykToRgba(input as CMYK);\\r\\n        return;\\r\\n      }\\r\\n    }\\r\\n    if (typeof input === \'string\') {\\r\\n      const name = input.trim().toLowerCase();\\r\\n      if (colorNames[name]) {\\r\\n        this._rgb = hexToRgb(colorNames[name]);\\r\\n        this._name = name;\\r\\n        return;\\r\\n      } else if (/^#?[0-9a-f]{3,8}$/i.test(name)) {\\r\\n        this._rgb = hexToRgb(name);\\r\\n        return;\\r\\n      }\\r\\n      if (name.includes(\'rgb\')) {\\r\\n        this._rgb = parseRgbString(name);\\r\\n        return;\\r\\n      }\\r\\n      if (name.includes(\'hsl\')) {\\r\\n        this._rgb = NgxColor.hslaToRgba(parseHslString(name));\\r\\n        return;\\r\\n      }\\r\\n      if (name.includes(\'hsv\')) {\\r\\n        this._rgb = NgxColor.hsvaToRgba(parseHsvString(name));\\r\\n        return;\\r\\n      }\\r\\n      if (name.includes(\'cmyk\')) {\\r\\n        this._rgb = NgxColor.cmykToRgba(parseCmykString(name));\\r\\n        return;\\r\\n      }\\r\\n      throw new Error(\'Unknown color string: \' + input);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  get isValid(): boolean {\\r\\n    return (\\r\\n      typeof this._rgb.r === \'number\' &&\\r\\n      typeof this._rgb.g === \'number\' &&\\r\\n      typeof this._rgb.b === \'number\' &&\\r\\n      !isNaN(this._rgb.r) &&\\r\\n      !isNaN(this._rgb.g) &&\\r\\n      !isNaN(this._rgb.b)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  async name() {\\r\\n    if (this._name) return this._name;\\r\\n    const hex = this.toHexString();\\r\\n    for (const [n, h] of Object.entries(colorNames)) {\\r\\n      if (h.toLowerCase() === hex.toLowerCase()) return n;\\r\\n    }\\r\\n    return \'\';\\r\\n  }\\r\\n\\r\\n  toRgb(): RGBA {\\r\\n    return this._rgb;\\r\\n  }\\r\\n\\r\\n  toRgbString(): string {\\r\\n    const { r, g, b, a } = this.toRgb();\\r\\n    return a === 1\\r\\n      ? `rgb(${Math.round(r)},${Math.round(g)},${Math.round(b)})`\\r\\n      : `rgba(${Math.round(r)},${Math.round(g)},${Math.round(b)},${+a.toFixed(3)})`;\\r\\n  }\\r\\n\\r\\n  toHexString(allowAlpha = true): string {\\r\\n    const { r, g, b, a } = this.toRgb();\\r\\n    return rgbaToHex(r, g, b, a, allowAlpha && a < 1);\\r\\n  }\\r\\n\\r\\n  toHsl(): HSLA {\\r\\n    return NgxColor.rgbToHsla(this.toRgb());\\r\\n  }\\r\\n\\r\\n  toHsv(): HSVA {\\r\\n    return NgxColor.rgbToHsva(this.toRgb());\\r\\n  }\\r\\n\\r\\n  toCmyk(): CMYK {\\r\\n    return NgxColor.rgbToCmyk(this.toRgb());\\r\\n  }\\r\\n\\r\\n  static cmykToRgba(cmyk: CMYK): RGBA {\\r\\n    const { c, m, y, k } = cmyk;\\r\\n    return { ...cmykToRgb(c, m, y, k), a: (cmyk as any).a !== undefined ? +(cmyk as any).a : 1 };\\r\\n  }\\r\\n\\r\\n  static rgbToCmyk(rgba: RGBA): CMYK {\\r\\n    const { r, g, b } = rgba;\\r\\n    return rgbToCmyk(r, g, b);\\r\\n  }\\r\\n\\r\\n  static rgbToHsla(rgba: RGBA): HSLA {\\r\\n    const { r, g, b, a } = rgba;\\r\\n    return { ...rgbToHsl(r, g, b), a };\\r\\n  }\\r\\n\\r\\n  static rgbToHsva(rgba: RGBA): HSVA {\\r\\n    const { r, g, b, a } = rgba;\\r\\n    return { ...rgbToHsv(r, g, b), a };\\r\\n  }\\r\\n\\r\\n  static hsvaToRgba(hsva: HSVA): RGBA {\\r\\n    const { h, s, v, a } = hsva;\\r\\n    return { ...hsvToRgb(h, s, v), a: a !== undefined ? a : 1 };\\r\\n  }\\r\\n\\r\\n  static hslaToRgba(hsla: HSLA): RGBA {\\r\\n    const { h, s, l, a } = hsla;\\r\\n    return { ...hslToRgba(h, s, l), a: a !== undefined ? a : 1 };\\r\\n  }\\r\\n\\r\\n  equals(other?: NgxColor): boolean {\\r\\n    if (!other) return false;\\r\\n    return this.toHexString().toLowerCase() === other.toHexString().toLowerCase();\\r\\n  }\\r\\n\\r\\n  isDark(): boolean {\\r\\n    const { r, g, b, a } = this.toRgb();\\r\\n    return a < 0.5 ? false : 0.299 * r + 0.587 * g + 0.114 * b < 128;\\r\\n  }\\r\\n\\r\\n  isLight(): boolean {\\r\\n    return !this.isDark();\\r\\n  }\\r\\n\\r\\n  async getOutputResult(outputType: OutputType): Promise<string> {\\r\\n    const { r, g, b, a } = this._rgb;\\r\\n\\r\\n    switch (outputType) {\\r\\n      case \'CMYK\':\\r\\n        return rgbToCmykString(r, g, b);\\r\\n\\r\\n      case \'HSL\':\\r\\n        return rgbToHslaString(r, g, b, a);\\r\\n\\r\\n      case \'HSV\':\\r\\n        return rgbToHsvString(r, g, b, a);\\r\\n\\r\\n      case \'RGB\':\\r\\n        return a < 1 ? `rgba(${r}, ${g}, ${b}, ${+a.toFixed(2)})` : `rgb(${r}, ${g}, ${b})`;\\r\\n\\r\\n      case \'HEX\':\\r\\n        return this.toHexString(true);\\r\\n\\r\\n      default:\\r\\n        let name = await this.name();\\r\\n        return name ?? this.toHexString(true);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"input","type":"ColorInput","deprecated":false,"deprecationMessage":"","optional":true}],"line":25,"jsdoctags":[{"name":"input","type":"ColorInput","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},"inputsClass":[],"outputsClass":[],"properties":[{"name":"_name","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":25,"modifierKind":[123]},{"name":"_rgb","defaultValue":"{ r: 0, g: 0, b: 0, a: 1 }","deprecated":false,"deprecationMessage":"","type":"RGBA","indexKey":"","optional":false,"description":"","line":24,"modifierKind":[123]}],"methods":[{"name":"cmykToRgba","args":[{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RGBA","typeParameters":[],"line":130,"deprecated":false,"deprecationMessage":"","modifierKind":[126],"jsdoctags":[{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"equals","args":[{"name":"other","type":"NgxColor","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"boolean","typeParameters":[],"line":160,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"other","type":"NgxColor","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"getOutputResult","args":[{"name":"outputType","type":"OutputType","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<string>","typeParameters":[],"line":174,"deprecated":false,"deprecationMessage":"","modifierKind":[134],"jsdoctags":[{"name":"outputType","type":"OutputType","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hslaToRgba","args":[{"name":"hsla","type":"HSLA","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RGBA","typeParameters":[],"line":155,"deprecated":false,"deprecationMessage":"","modifierKind":[126],"jsdoctags":[{"name":"hsla","type":"HSLA","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hsvaToRgba","args":[{"name":"hsva","type":"HSVA","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RGBA","typeParameters":[],"line":150,"deprecated":false,"deprecationMessage":"","modifierKind":[126],"jsdoctags":[{"name":"hsva","type":"HSVA","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isDark","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":165,"deprecated":false,"deprecationMessage":""},{"name":"isLight","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":170,"deprecated":false,"deprecationMessage":""},{"name":"name","args":[],"optional":false,"returnType":"unknown","typeParameters":[],"line":93,"deprecated":false,"deprecationMessage":"","modifierKind":[134]},{"name":"rgbToCmyk","args":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"CMYK","typeParameters":[],"line":135,"deprecated":false,"deprecationMessage":"","modifierKind":[126],"jsdoctags":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHsla","args":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"HSLA","typeParameters":[],"line":140,"deprecated":false,"deprecationMessage":"","modifierKind":[126],"jsdoctags":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHsva","args":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"HSVA","typeParameters":[],"line":145,"deprecated":false,"deprecationMessage":"","modifierKind":[126],"jsdoctags":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"toCmyk","args":[],"optional":false,"returnType":"CMYK","typeParameters":[],"line":126,"deprecated":false,"deprecationMessage":""},{"name":"toHexString","args":[{"name":"allowAlpha","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true"}],"optional":false,"returnType":"string","typeParameters":[],"line":113,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"allowAlpha","type":"","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"toHsl","args":[],"optional":false,"returnType":"HSLA","typeParameters":[],"line":118,"deprecated":false,"deprecationMessage":""},{"name":"toHsv","args":[],"optional":false,"returnType":"HSVA","typeParameters":[],"line":122,"deprecated":false,"deprecationMessage":""},{"name":"toRgb","args":[],"optional":false,"returnType":"RGBA","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":""},{"name":"toRgbString","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":106,"deprecated":false,"deprecationMessage":""}],"indexSignatures":[],"extends":[],"accessors":{"isValid":{"name":"isValid","getSignature":{"name":"isValid","type":"boolean","returnType":"boolean","line":82}}},"hostBindings":[],"hostListeners":[]},{"name":"RGB","id":"class-RGB-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"b","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":10},{"name":"g","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":9},{"name":"r","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":8}],"description":"<p>A representation of additive color mixing.\\nProjection of primary color lights on a white screen shows secondary\\ncolors where two overlap; the combination of all three of red, green,\\nand blue in equal intensities makes white.</p>\\n","rawdescription":"\\n\\nA representation of additive color mixing.\\nProjection of primary color lights on a white screen shows secondary\\ncolors where two overlap; the combination of all three of red, green,\\nand blue in equal intensities makes white.\\n","methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]},{"name":"RGBA","id":"class-RGBA-490566d2ea7120e994e1bc889e361720734ff78a750ec116419db43f7f4e61328d1fdf5ce665c6b3700e512180e5f47886b00eb5036bd1339bfb18fcc4ce1ab9","file":"projects/ngx-input-color/src/utils/interfaces.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class RGB {\\r\\n  r!: number;\\r\\n  g!: number;\\r\\n  b!: number;\\r\\n}\\r\\n\\r\\nexport class RGBA extends RGB {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSL model describes colors in terms of hue, saturation,\\r\\n * and lightness (also called luminance).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSL\\r\\n */\\r\\nexport class HSL {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  l!: number;\\r\\n}\\r\\n\\r\\nexport class HSLA extends HSL {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The HSV, or HSB, model describes colors in terms of\\r\\n * hue, saturation, and value (brightness).\\r\\n * @link https://en.wikibooks.org/wiki/Color_Models:_RGB,_HSV,_HSL#HSV\\r\\n */\\r\\nexport class HSV {\\r\\n  h!: number;\\r\\n  s!: number;\\r\\n  v!: number;\\r\\n}\\r\\n\\r\\nexport class HSVA extends HSV {\\r\\n  a!: number;\\r\\n}\\r\\n\\r\\n/**\\r\\n * The CMYK color model is a subtractive color model used in the printing process.\\r\\n * It described four ink palettes: Cyan, Magenta, Yellow, and Black.\\r\\n * @link https://en.wikipedia.org/wiki/CMYK_color_model\\r\\n */\\r\\nexport class CMYK {\\r\\n  c!: number;\\r\\n  m!: number;\\r\\n  y!: number;\\r\\n  k!: number;\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"a","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":14},{"name":"b","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":10,"inheritance":{"file":"RGB"}},{"name":"g","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":9,"inheritance":{"file":"RGB"}},{"name":"r","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":8,"inheritance":{"file":"RGB"}}],"methods":[],"indexSignatures":[],"extends":["RGB"],"hostBindings":[],"hostListeners":[]},{"name":"ValueModel","id":"class-ValueModel-91b64cbc65de4ad0080e8aef7602ab3a65cec14c607a9ad13375caacb6444c45183f3bc940fcc1e3a6015538066d39b9b887c541f3d85e15aa6a556c71d1f9b7","file":"projects/ngx-input-color/src/range-slider/range-slider.component.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  HostListener,\\r\\n  Input,\\r\\n  Output,\\r\\n  ViewChild,\\r\\n  forwardRef,\\r\\n  type OnInit,\\r\\n} from \'@angular/core\';\\r\\nimport { getOffsetPosition } from \'../utils/get-offset-position\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n  Validators,\\r\\n} from \'@angular/forms\';\\r\\n\\r\\nexport interface IValue {\\r\\n  id?: string;\\r\\n  value: number;\\r\\n}\\r\\nexport class ValueModel {\\r\\n  id!: string;\\r\\n  value!: number;\\r\\n  x?: number;\\r\\n  thumb?: HTMLElement;\\r\\n  color?: string;\\r\\n}\\r\\n\\r\\n@Component({\\r\\n  selector: \'range-slider\',\\r\\n  standalone: true,\\r\\n  imports: [CommonModule],\\r\\n  templateUrl: \'./range-slider.component.html\',\\r\\n  styleUrls: [\'./range-slider.component.scss\'],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => RangeSliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      useExisting: forwardRef(() => RangeSliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class RangeSliderComponent implements OnInit, ControlValueAccessor, Validator {\\r\\n  /**\\r\\n   * The step value for the slider\\r\\n   */\\r\\n  @Input() step = 1;\\r\\n  /**\\r\\n   * The minimum value for the slider\\r\\n   */\\r\\n  @Input() min = 0;\\r\\n  /**\\r\\n   * The maximum value for the slider\\r\\n   */\\r\\n  @Input() max = 100;\\r\\n  /**\\r\\n   * The background color of the slider\\r\\n   * - can use css like `background: linear-gradient(to right, red, blue);`\\r\\n   * - or a solid color like `background: red;`\\r\\n   */\\r\\n  @Input() background?: string;\\r\\n  /**\\r\\n   * If true, the background will be transparent\\r\\n   */\\r\\n  @Input() isBgTransparent = false;\\r\\n  /**\\r\\n   * If true, clicking on the slider will add a new range at that position\\r\\n   */\\r\\n  @Input() addNewRangeOnClick = false;\\r\\n\\r\\n  /**\\r\\n   * The current value of the slider\\r\\n   */\\r\\n  @Output() change = new EventEmitter<IValue[]>();\\r\\n  @Input() selectedIndex?: number;\\r\\n  @Output() selectedIndexChange = new EventEmitter<number>();\\r\\n\\r\\n  private isDragging = false;\\r\\n\\r\\n  @ViewChild(\'slider\', { static: true }) slider!: ElementRef<HTMLDivElement>;\\r\\n  @ViewChild(\'thumb\', { static: false }) thumb?: ElementRef<HTMLDivElement>;\\r\\n\\r\\n  values: ValueModel[] = [];\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: IValue[]) => {};\\r\\n  _onTouched = () => {};\\r\\n  _validatorOnChange = () => {};\\r\\n  private sliderRect?: DOMRect;\\r\\n  private thumbRect?: DOMRect;\\r\\n\\r\\n  constructor(private changeDetectorRef: ChangeDetectorRef) {}\\r\\n  ngOnInit(): void {}\\r\\n\\r\\n  private generateId(): string {\\r\\n    let id = \'ngx-thumb-\' + Math.random().toString(36).substring(2, 9);\\r\\n    if (this.values.findIndex((x) => x.id == id) >= 0) {\\r\\n      return this.generateId();\\r\\n    }\\r\\n    return id;\\r\\n  }\\r\\n\\r\\n  writeValue(items?: IValue[]): void {\\r\\n    this.values = [];\\r\\n    if (!items || !Array.isArray(items)) {\\r\\n      items = [];\\r\\n    }\\r\\n    if (items.length === 0) {\\r\\n      items.push({ id: this.generateId(), value: this.min });\\r\\n    }\\r\\n    for (let val of items) {\\r\\n      if (typeof val.value !== \'number\' || isNaN(val.value)) {\\r\\n        throw new Error(\'RangeSliderComponent: value must be an array of numbers\');\\r\\n      }\\r\\n      let newVal = +val.value;\\r\\n      if (newVal < +this.min) newVal = +this.min;\\r\\n      else if (newVal > +this.max) newVal = +this.max;\\r\\n      this.values.push({\\r\\n        ...val,\\r\\n        id: val.id ?? this.generateId(),\\r\\n        value: newVal,\\r\\n      });\\r\\n    }\\r\\n    this.updateAllThumbPositions();\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return null; // TODO: return errors if any;\\r\\n  }\\r\\n  registerOnValidatorChange?(fn: () => void): void {\\r\\n    this._validatorOnChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState?(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  private updateRects() {\\r\\n    this.sliderRect = this.slider.nativeElement.getBoundingClientRect();\\r\\n    if (this.thumb) {\\r\\n      this.thumbRect = this.thumb.nativeElement.getBoundingClientRect();\\r\\n    }\\r\\n  }\\r\\n  @HostListener(\'document:mousemove\', [\'$event\'])\\r\\n  @HostListener(\'document:touchmove\', [\'$event\'])\\r\\n  onDrag(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    this.updateThumbPosition(ev);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  onResize() {\\r\\n    this.writeValue(this.values);\\r\\n  }\\r\\n  dragStart(ev: MouseEvent | TouchEvent, index: number) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.isDragging = true;\\r\\n    this.selectedIndex = index;\\r\\n    this.updateRects();\\r\\n    this.updateThumbPosition(ev);\\r\\n    this.selectedIndexChange.emit(this.selectedIndex);\\r\\n  }\\r\\n\\r\\n  addnewRangeOnSliderClick(event: MouseEvent | TouchEvent) {\\r\\n    if (!this.addNewRangeOnClick) return;\\r\\n    const position = getOffsetPosition(event, this.slider.nativeElement);\\r\\n    const newValue = this.min + (position.x / this.sliderRect!.width) * (this.max - this.min);\\r\\n    // must be add with order by position\\r\\n    const indexByOrderValue = this.values.findIndex((item) => item.value > newValue);\\r\\n    const insertIndex = indexByOrderValue >= 0 ? indexByOrderValue : this.values.length;\\r\\n    this.values.splice(insertIndex, 0, {\\r\\n      id: this.generateId(),\\r\\n      value: newValue,\\r\\n    });\\r\\n    this.dragStart(event, insertIndex);\\r\\n    // this.updateAllThumbPositions();\\r\\n    // this.valueChanged();\\r\\n  }\\r\\n\\r\\n  private updateThumbPosition(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging || this.selectedIndex == undefined) return;\\r\\n    if (!this.sliderRect || !this.thumbRect) this.updateRects();\\r\\n    let position = getOffsetPosition(ev, this.slider.nativeElement);\\r\\n    let thumbRec = this.thumbRect!;\\r\\n    position.x -= thumbRec.width / 2;\\r\\n    let sliderRec = this.sliderRect!;\\r\\n    const thumb = this.values[this.selectedIndex];\\r\\n    if (position.x < 0) {\\r\\n      thumb.x = 0;\\r\\n    } else if (position.x > sliderRec.width - thumbRec.width) {\\r\\n      thumb.x = sliderRec.width - thumbRec.width;\\r\\n    } else {\\r\\n      thumb.x = position.x;\\r\\n    }\\r\\n    this.setValueByPosition(thumb, thumbRec, sliderRec);\\r\\n  }\\r\\n\\r\\n  updateAllThumbPositions() {\\r\\n    // wait to add thumbs\\r\\n    setTimeout(() => {\\r\\n      this.updateRects();\\r\\n      const sliderRec = this.sliderRect!;\\r\\n      const thumbRec = this.thumbRect!;\\r\\n      for (let item of this.values) {\\r\\n        item.x = ((item.value - this.min) * (sliderRec.width - thumbRec.width)) / (this.max - this.min);\\r\\n      }\\r\\n      this.changeDetectorRef.detectChanges();\\r\\n    });\\r\\n  }\\r\\n  setValueByPosition(thumb: ValueModel, thumbRec: DOMRect, sliderRec: DOMRect) {\\r\\n    const percentage = (thumb.x ?? 0) / (sliderRec.width - thumbRec.width);\\r\\n    let newValue = this.min + percentage * (this.max - this.min);\\r\\n    const stepDecimalPlaces = (this.step.toString().split(\'.\')[1] || \'\').length;\\r\\n    newValue = parseFloat((Math.round(newValue / this.step) * this.step).toFixed(stepDecimalPlaces));\\r\\n    let value = Math.min(Math.max(newValue, this.min), this.max);\\r\\n    if (thumb.value !== value) {\\r\\n      thumb.value = value;\\r\\n      this.valueChanged();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mouseup\', [\'$event\'])\\r\\n  @HostListener(\'document:touchend\', [\'$event\'])\\r\\n  onDragEnd(ev: MouseEvent | TouchEvent) {\\r\\n    this.isDragging = false;\\r\\n    // this.selectedIndex = undefined;\\r\\n  }\\r\\n\\r\\n  valueChanged() {\\r\\n    const v = this.values; // this.values.map(({ x, thumb, ...rest }) => ({ ...rest }));\\r\\n    this._onChange(v);\\r\\n    this.change.emit(v);\\r\\n  }\\r\\n}\\r\\n","inputsClass":[],"outputsClass":[],"properties":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":true,"description":"","line":35},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":31},{"name":"thumb","deprecated":false,"deprecationMessage":"","type":"HTMLElement","indexKey":"","optional":true,"description":"","line":34},{"name":"value","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":32},{"name":"x","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":true,"description":"","line":33}],"methods":[],"indexSignatures":[],"extends":[],"hostBindings":[],"hostListeners":[]}],"directives":[{"name":"NgxInputBoxShadowDirective","id":"directive-NgxInputBoxShadowDirective-cb16be28fc199afdb6709352747f450504a733d9b260e7cec3a8bc0f70e0522c3f485bd1dabfd29b3ab3e6f13c98f9fde68fa42767210526baf05c2dcee93e9e","file":"projects/ngx-input-color/src/directives/ngx-input-box-shadow.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import {\\r\\n  ComponentRef,\\r\\n  Directive,\\r\\n  ElementRef,\\r\\n  HostListener,\\r\\n  Inject,\\r\\n  Input,\\r\\n  OnDestroy,\\r\\n  Renderer2,\\r\\n  ViewContainerRef,\\r\\n  forwardRef,\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n} from \'@angular/forms\';\\r\\nimport { ColorInspector } from \'../models/ColorInspector.enum\'; \\r\\nimport { DOCUMENT } from \'@angular/common\'; \\r\\nimport { NgxBoxShadowComponent } from \'../lib/ngx-box-shadow/ngx-box-shadow.component\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[ngxInputBoxShadow]\',\\r\\n  providers: [\\r\\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputBoxShadowDirective), multi: true },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      multi: true,\\r\\n      useExisting: NgxInputBoxShadowDirective,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class NgxInputBoxShadowDirective implements OnDestroy, ControlValueAccessor, Validator {\\r\\n  @Input() closeTitle = \'Close\';\\r\\n  @Input() confirmTitle = \'Ok\';\\r\\n  @Input() setInputBackground = true;\\r\\n\\r\\n  private pickerComponentRef?: ComponentRef<NgxBoxShadowComponent>;\\r\\n  private backdrop?: HTMLDivElement;\\r\\n  private pickerEl?: HTMLElement;\\r\\n  isDisabled = false;\\r\\n\\r\\n  value = \'\';\\r\\n\\r\\n  _onChange = (value: string) => {};\\r\\n  _onTouched = () => {};\\r\\n  _onValidateChange = () => {};\\r\\n  constructor(\\r\\n    @Inject(DOCUMENT) private _doc: Document,\\r\\n    private el: ElementRef,\\r\\n    private renderer: Renderer2,\\r\\n    private viewContainerRef: ViewContainerRef\\r\\n  ) {}\\r\\n\\r\\n  @HostListener(\'click\', [\'$event\']) onClick(ev: Event) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.toggleColorPicker();\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  registerOnValidatorChange(fn: () => void): void {\\r\\n    this._onValidateChange = fn;\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  ngOnDestroy(): void {\\r\\n    this.destroyPicker();\\r\\n  }\\r\\n\\r\\n  writeValue(value: any): void {\\r\\n    this.value = value;\\r\\n   \\r\\n  }\\r\\n\\r\\n  toggleColorPicker() {\\r\\n    if (this.pickerComponentRef) {\\r\\n      this.destroyPicker();\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    // ایجاد کامپوننت\\r\\n    this.pickerComponentRef = this.viewContainerRef.createComponent(NgxBoxShadowComponent);\\r\\n\\r\\n    const instance = this.pickerComponentRef.instance;\\r\\n    instance.showCloseButton = true;\\r\\n    instance.closeTitle = this.closeTitle;\\r\\n    instance.confirmTitle = this.confirmTitle;\\r\\n    instance.writeValue(this.value);\\r\\n\\r\\n    // رویدادها\\r\\n    const sub1 = instance.confirm.subscribe((c: any) => {\\r\\n      this.confirmColor(c);\\r\\n    });\\r\\n\\r\\n    const sub2 = instance.cancel.subscribe(() => {\\r\\n      this.destroyPicker();\\r\\n    });\\r\\n\\r\\n    // بک‌دراپ\\r\\n    this.backdrop = this.renderer.createElement(\'div\');\\r\\n    if (this.backdrop) {\\r\\n      this.backdrop.style.cssText = `\\r\\n          background: #5e5e5e1e;\\r\\n          position: fixed;\\r\\n          top: 0;\\r\\n          left: 0;\\r\\n          right: 0;\\r\\n          bottom: 0;\\r\\n          overflow: auto;\\r\\n          transition: all 300ms;\\r\\n        `;\\r\\n      this.backdrop.onclick = () => this.destroyPicker();\\r\\n    }\\r\\n    // گرفتن المنت کامپوننت واقعی\\r\\n    this.pickerEl = (this.pickerComponentRef.hostView as any).rootNodes[0] as HTMLElement;\\r\\n    this.renderer.appendChild(this.backdrop, this.pickerEl);\\r\\n    this.renderer.appendChild(this._doc.body, this.backdrop);\\r\\n    this.setPosition();\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  setPosition() {\\r\\n    setTimeout(() => {\\r\\n      if (!this.pickerEl || !this.pickerComponentRef) return;\\r\\n      const hostRect = this.el.nativeElement.getBoundingClientRect();\\r\\n      const pickerEl = this.pickerEl;\\r\\n\\r\\n      // اعمال موقتی برای گرفتن سایز دقیق\\r\\n      this.renderer.setStyle(pickerEl, \'position\', \'absolute\');\\r\\n      this.renderer.setStyle(pickerEl, \'z-index\', \'9999\');\\r\\n\\r\\n      this._doc.body.appendChild(pickerEl); // لازم برای محاسبه دقیق اندازه\\r\\n\\r\\n      const pickerRect = pickerEl.getBoundingClientRect();\\r\\n\\r\\n      // وسط‌چین کردن افقی\\r\\n      let left = hostRect.left + hostRect.width / 2 - pickerRect.width / 2;\\r\\n      let top = hostRect.bottom;\\r\\n\\r\\n      // جلوگیری از بیرون زدن از راست\\r\\n      if (left + pickerRect.width > window.innerWidth) {\\r\\n        left = window.innerWidth - pickerRect.width - 8;\\r\\n      }\\r\\n\\r\\n      // جلوگیری از بیرون زدن از چپ\\r\\n      if (left < 8) {\\r\\n        left = 8;\\r\\n      }\\r\\n\\r\\n      // اگر از پایین بیرون زد، ببر بالا\\r\\n      if (top + pickerRect.height > window.innerHeight) {\\r\\n        top = hostRect.top - pickerRect.height;\\r\\n      }\\r\\n\\r\\n      // جلوگیری از بیرون زدن از بالا\\r\\n      if (top < 8) {\\r\\n        top = 8;\\r\\n      }\\r\\n\\r\\n      this.renderer.setStyle(pickerEl, \'top\', `${top}px`);\\r\\n      this.renderer.setStyle(pickerEl, \'left\', `${left}px`);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  destroyPicker() {\\r\\n    if (this.pickerComponentRef) {\\r\\n      this.pickerComponentRef.destroy();\\r\\n      this.pickerComponentRef = undefined;\\r\\n    }\\r\\n    if (this.backdrop && this.backdrop.parentNode) {\\r\\n      this.renderer.removeChild(this._doc.body, this.backdrop);\\r\\n      this.backdrop = undefined;\\r\\n    }\\r\\n    this.pickerEl = undefined;\\r\\n  }\\r\\n\\r\\n  confirmColor(c: string) {\\r\\n    if (this.setInputBackground) {\\r\\n      this.renderer.setStyle(this.el.nativeElement, \'background\', c);\\r\\n    }\\r\\n    this._onChange(c);\\r\\n    this.value = c;\\r\\n    this.destroyPicker();\\r\\n  }\\r\\n}\\r\\n","selector":"[ngxInputBoxShadow]","providers":[{"name":"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputBoxShadowDirective), multi: true }","type":"directive"},{"name":"{\\n    provide: NG_VALIDATORS, multi: true, useExisting: NgxInputBoxShadowDirective,\\n}","type":"directive"}],"hostDirectives":[],"standalone":false,"inputsClass":[{"name":"closeTitle","defaultValue":"\'Close\'","deprecated":false,"deprecationMessage":"","line":37,"type":"string","decorators":[]},{"name":"confirmTitle","defaultValue":"\'Ok\'","deprecated":false,"deprecationMessage":"","line":38,"type":"string","decorators":[]},{"name":"setInputBackground","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":39,"type":"boolean","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":58},{"name":"window:resize","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":136}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":48},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":49},{"name":"_onValidateChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":50},{"name":"backdrop","deprecated":false,"deprecationMessage":"","type":"HTMLDivElement","indexKey":"","optional":true,"description":"","line":42,"modifierKind":[123]},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":44},{"name":"pickerComponentRef","deprecated":false,"deprecationMessage":"","type":"ComponentRef<NgxBoxShadowComponent>","indexKey":"","optional":true,"description":"","line":41,"modifierKind":[123]},{"name":"pickerEl","deprecated":false,"deprecationMessage":"","type":"HTMLElement","indexKey":"","optional":true,"description":"","line":43,"modifierKind":[123]},{"name":"value","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":46}],"methodsClass":[{"name":"confirmColor","args":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":191,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"destroyPicker","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":179,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":80,"deprecated":false,"deprecationMessage":""},{"name":"onClick","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":58,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":67,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setPosition","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":136,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\', [\'$event\']"}],"modifierKind":[170]},{"name":"toggleColorPicker","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":89,"deprecated":false,"deprecationMessage":""},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":84,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[],"implements":["OnDestroy","ControlValueAccessor","Validator"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_doc","type":"Document","deprecated":false,"deprecationMessage":""},{"name":"el","type":"ElementRef","deprecated":false,"deprecationMessage":""},{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":""},{"name":"viewContainerRef","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""}],"line":50,"jsdoctags":[{"name":"_doc","type":"Document","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"el","type":"ElementRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"viewContainerRef","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"NgxInputColorDirective","id":"directive-NgxInputColorDirective-f2a196e620bb7e2fef1ac66d6d2ed3558c7a33c4ef5fd074d284661137a8e032210d03195e1db4487785fbcff4042682fecf3f59d4c56e9f7366252d13b557e0","file":"projects/ngx-input-color/src/directives/ngx-input-color.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import {\\r\\n  Directive,\\r\\n  forwardRef,\\r\\n  OnDestroy,\\r\\n  Input,\\r\\n  ComponentRef,\\r\\n  ElementRef,\\r\\n  Renderer2,\\r\\n  ViewContainerRef,\\r\\n  HostListener,\\r\\n  AfterViewInit,\\r\\n  Output,\\r\\n  EventEmitter,\\r\\n  Inject,\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  NG_VALIDATORS,\\r\\n  ControlValueAccessor,\\r\\n  Validator,\\r\\n  AbstractControl,\\r\\n  ValidationErrors,\\r\\n} from \'@angular/forms\';\\r\\nimport { ColorInspector } from \'../models/ColorInspector.enum\';\\r\\nimport { NgxInputColorComponent } from \'../lib/ngx-input-color/ngx-input-color.component\';\\r\\nimport { NgxColor, OutputType } from \'../utils/color-helper\';\\r\\nimport { DOCUMENT } from \'@angular/common\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[ngxInputColor]\',\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => NgxInputColorDirective),\\r\\n      multi: true,\\r\\n    },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      useExisting: forwardRef(() => NgxInputColorDirective),\\r\\n      multi: true,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class NgxInputColorDirective implements AfterViewInit, OnDestroy, ControlValueAccessor, Validator {\\r\\n  @Input() closeTitle = \'Close\';\\r\\n  @Input() confirmTitle = \'Ok\';\\r\\n  @Input() setInputBackgroundColor = true;\\r\\n  @Input() defaultInspector: ColorInspector = ColorInspector.Picker;\\r\\n\\r\\n  @Input() showCloseButton = true;\\r\\n  @Input() showConfirmButton = true;\\r\\n  @Input() simpleMode = false;\\r\\n  @Input() outputType: OutputType = \'HEX\';\\r\\n  private boundInputHandler = (e: Event) => {\\r\\n    this.writeValue((e.target as HTMLInputElement).value);\\r\\n  };\\r\\n  private _targetInput?: HTMLInputElement;\\r\\n\\r\\n  @Input(\'ngxInputColor\') set ngxInputColor(\\r\\n    el: HTMLInputElement | ElementRef<HTMLInputElement> | null | undefined | \'\'\\r\\n  ) {\\r\\n    if (el instanceof ElementRef) {\\r\\n      this._targetInput = el.nativeElement;\\r\\n    } else if (el instanceof HTMLInputElement) {\\r\\n      this._targetInput = el;\\r\\n    } else {\\r\\n      this._targetInput = undefined;\\r\\n    }\\r\\n\\r\\n    if (this._targetInput) {\\r\\n      this._targetInput.addEventListener(\'input\', this.boundInputHandler);\\r\\n    }\\r\\n  }\\r\\n  @Output() change = new EventEmitter<string>();\\r\\n  @Output() confirm = new EventEmitter<string>();\\r\\n  @Output() cancel = new EventEmitter<void>();\\r\\n  private color?: NgxColor;\\r\\n  private colorPickerComponentRef?: ComponentRef<NgxInputColorComponent>;\\r\\n  private backdrop?: HTMLDivElement;\\r\\n  private colorPickerEl?: HTMLElement;\\r\\n  private isHostInput = false;\\r\\n  inValid: boolean = false;\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: string) => {};\\r\\n  _onTouched = () => {};\\r\\n  _onValidateChange = () => {};\\r\\n\\r\\n  constructor(\\r\\n    @Inject(DOCUMENT) private _doc: Document,\\r\\n    private el: ElementRef,\\r\\n    private renderer: Renderer2,\\r\\n    private viewContainerRef: ViewContainerRef\\r\\n  ) {}\\r\\n\\r\\n  ngAfterViewInit(): void {\\r\\n    setTimeout(() => {\\r\\n      if (this._targetInput && this._targetInput.tagName.toLowerCase() === \'input\') {\\r\\n        this.writeValue(this._targetInput.value);\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n  ngOnDestroy(): void {\\r\\n    this.destroyColorPicker();\\r\\n  }\\r\\n\\r\\n  @HostListener(\'click\', [\'$event\'])\\r\\n  onClick(ev: Event) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.toggleColorPicker();\\r\\n  }\\r\\n\\r\\n  writeValue(value: any): void {\\r\\n    try {\\r\\n      this.color = value ? new NgxColor(value) : undefined;\\r\\n\\r\\n      const colorStr = this.color?.toHexString() ?? \'\';\\r\\n\\r\\n      // اگر دایرکتیو روی input باشه (ControlValueAccessor)\\r\\n      if (this.isHostInput) {\\r\\n        const input = this.el.nativeElement as HTMLInputElement;\\r\\n        input.value = colorStr;\\r\\n      }\\r\\n\\r\\n      // اگر input خارجی مشخص شده\\r\\n      if (this._targetInput instanceof HTMLInputElement) {\\r\\n        this._targetInput.value = colorStr;\\r\\n      }\\r\\n\\r\\n      if (this.setInputBackgroundColor && colorStr) {\\r\\n        this.renderer.setStyle(this.el.nativeElement, \'backgroundColor\', colorStr);\\r\\n      }\\r\\n\\r\\n      this.inValid = false;\\r\\n      this._onValidateChange();\\r\\n    } catch (e) {\\r\\n      this.color = new NgxColor(\'#000\'); // مقدار پیش‌فرض\\r\\n      this.inValid = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n\\r\\n  setDisabledState(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n\\r\\n  registerOnValidatorChange(fn: () => void): void {\\r\\n    this._onValidateChange = fn;\\r\\n  }\\r\\n\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    if ((this.color && this.color.isValid === false) || this.inValid === true) {\\r\\n      return { invalid: true };\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  private toggleColorPicker() {\\r\\n    if (this.colorPickerComponentRef) {\\r\\n      this.destroyColorPicker();\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    this.colorPickerComponentRef = this.viewContainerRef.createComponent(NgxInputColorComponent);\\r\\n    const instance = this.colorPickerComponentRef.instance;\\r\\n\\r\\n    instance.defaultInspector = this.defaultInspector;\\r\\n    instance.showCloseButton = true;\\r\\n    instance.closeTitle = this.closeTitle;\\r\\n    instance.confirmTitle = this.confirmTitle;\\r\\n    instance.showCloseButton = this.showCloseButton;\\r\\n    instance.showConfirmButton = this.showConfirmButton;\\r\\n    instance.simpleMode = this.simpleMode;\\r\\n    instance.outputType = this.outputType;\\r\\n\\r\\n    if (this.color?.isValid) instance.initColor(this.color);\\r\\n    instance.change.subscribe((c: string) => {\\r\\n      this.emitChange(c);\\r\\n    });\\r\\n    instance.confirm.subscribe((c: string) => {\\r\\n      this.emitChange(c);\\r\\n      this.destroyColorPicker();\\r\\n    });\\r\\n\\r\\n    instance.cancel.subscribe(() => {\\r\\n      this.cancel.emit();\\r\\n      this.destroyColorPicker();\\r\\n    });\\r\\n\\r\\n    this.backdrop = this.renderer.createElement(\'div\');\\r\\n    if (this.backdrop) {\\r\\n      this.backdrop.style.cssText = `\\r\\n          background: #5e5e5e1e;\\r\\n          position: fixed;\\r\\n          top: 0;\\r\\n          left: 0;\\r\\n          right: 0;\\r\\n          bottom: 0;\\r\\n          overflow: auto;\\r\\n          transition: all 300ms;\\r\\n        `;\\r\\n      this.backdrop.onclick = () => this.destroyColorPicker();\\r\\n    }\\r\\n    this.colorPickerEl = (this.colorPickerComponentRef.hostView as any).rootNodes[0] as HTMLElement;\\r\\n    this.renderer.appendChild(this.backdrop, this.colorPickerEl);\\r\\n    this.renderer.appendChild(this._doc.body, this.backdrop);\\r\\n    this.setPosition();\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\')\\r\\n  setPosition() {\\r\\n    setTimeout(() => {\\r\\n      if (!this.colorPickerEl) return;\\r\\n\\r\\n      const hostRect = this.el.nativeElement.getBoundingClientRect();\\r\\n      const pickerEl = this.colorPickerEl;\\r\\n      \\r\\n      this.renderer.setStyle(pickerEl, \'position\', \'absolute\');\\r\\n      this.renderer.setStyle(pickerEl, \'z-index\', \'9999\');\\r\\n\\r\\n      this._doc.body.appendChild(pickerEl);\\r\\n      const pickerRect = pickerEl.getBoundingClientRect();\\r\\n\\r\\n      let left = hostRect.left + hostRect.width / 2 - pickerRect.width / 2;\\r\\n      let top = hostRect.bottom;\\r\\n\\r\\n      if (left + pickerRect.width > window.innerWidth) left = window.innerWidth - pickerRect.width - 8;\\r\\n      if (left < 8) left = 8;\\r\\n      if (top + pickerRect.height > window.innerHeight) top = hostRect.top - pickerRect.height;\\r\\n      if (top < 8) top = 8;\\r\\n\\r\\n      this.renderer.setStyle(pickerEl, \'top\', `${top}px`);\\r\\n      this.renderer.setStyle(pickerEl, \'left\', `${left}px`);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  private destroyColorPicker() {\\r\\n    this.colorPickerComponentRef?.destroy();\\r\\n    this.colorPickerComponentRef = undefined;\\r\\n\\r\\n    if (this.backdrop) {\\r\\n      this.renderer.removeChild(this._doc.body, this.backdrop);\\r\\n      this.backdrop = undefined;\\r\\n    }\\r\\n\\r\\n    this.colorPickerEl = undefined;\\r\\n  }\\r\\n\\r\\n  private async emitChange(c: string) {\\r\\n    this.color = new NgxColor(c);\\r\\n\\r\\n    if (this.setInputBackgroundColor) {\\r\\n      this.renderer.setStyle(this.el.nativeElement, \'backgroundColor\', c);\\r\\n    }\\r\\n\\r\\n    // اگر روی input باشیم، مقدار رو در input قرار بده\\r\\n    if (this.isHostInput) {\\r\\n      const input = this.el.nativeElement as HTMLInputElement;\\r\\n      input.value = c;\\r\\n    }\\r\\n\\r\\n    // اگر targetInput وجود داره، در اونم مقدار ست کن\\r\\n    if (this._targetInput instanceof HTMLInputElement) {\\r\\n      this._targetInput.value = c;\\r\\n      const event = new Event(\'input\', { bubbles: true });\\r\\n      this._targetInput.dispatchEvent(event);\\r\\n    }\\r\\n\\r\\n    const output = await this.color.getOutputResult(this.outputType);\\r\\n    this._onChange(output);\\r\\n    this.change.emit(output);\\r\\n    this.confirm.emit(output);\\r\\n    this._onTouched();\\r\\n  }\\r\\n}\\r\\n","selector":"[ngxInputColor]","providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputColorDirective), multi: true,\\n}","type":"directive"},{"name":"{\\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => NgxInputColorDirective), multi: true,\\n}","type":"directive"}],"hostDirectives":[],"standalone":false,"inputsClass":[{"name":"closeTitle","defaultValue":"\'Close\'","deprecated":false,"deprecationMessage":"","line":45,"type":"string","decorators":[]},{"name":"confirmTitle","defaultValue":"\'Ok\'","deprecated":false,"deprecationMessage":"","line":46,"type":"string","decorators":[]},{"name":"defaultInspector","defaultValue":"ColorInspector.Picker","deprecated":false,"deprecationMessage":"","line":48,"type":"ColorInspector","decorators":[]},{"name":"ngxInputColor","deprecated":false,"deprecationMessage":"","line":59,"type":"HTMLInputElement | ElementRef | null | undefined | string","decorators":[]},{"name":"outputType","defaultValue":"\'HEX\'","deprecated":false,"deprecationMessage":"","line":53,"type":"OutputType","decorators":[]},{"name":"setInputBackgroundColor","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":47,"type":"boolean","decorators":[]},{"name":"showCloseButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":50,"type":"boolean","decorators":[]},{"name":"showConfirmButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":51,"type":"boolean","decorators":[]},{"name":"simpleMode","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":52,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"cancel","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","line":76,"type":"EventEmitter"},{"name":"change","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":74,"type":"EventEmitter"},{"name":"confirm","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":75,"type":"EventEmitter"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":107},{"name":"window:resize","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","line":218}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":84},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":85},{"name":"_onValidateChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":86},{"name":"_targetInput","deprecated":false,"deprecationMessage":"","type":"HTMLInputElement","indexKey":"","optional":true,"description":"","line":57,"modifierKind":[123]},{"name":"backdrop","deprecated":false,"deprecationMessage":"","type":"HTMLDivElement","indexKey":"","optional":true,"description":"","line":79,"modifierKind":[123]},{"name":"boundInputHandler","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":54,"modifierKind":[123]},{"name":"color","deprecated":false,"deprecationMessage":"","type":"NgxColor","indexKey":"","optional":true,"description":"","line":77,"modifierKind":[123]},{"name":"colorPickerComponentRef","deprecated":false,"deprecationMessage":"","type":"ComponentRef<NgxInputColorComponent>","indexKey":"","optional":true,"description":"","line":78,"modifierKind":[123]},{"name":"colorPickerEl","deprecated":false,"deprecationMessage":"","type":"HTMLElement","indexKey":"","optional":true,"description":"","line":80,"modifierKind":[123]},{"name":"inValid","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"boolean","indexKey":"","optional":false,"description":"","line":82},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":83},{"name":"isHostInput","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":81,"modifierKind":[123]}],"methodsClass":[{"name":"destroyColorPicker","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":244,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"emitChange","args":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"any","typeParameters":[],"line":256,"deprecated":false,"deprecationMessage":"","modifierKind":[123,134],"jsdoctags":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":95,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":""},{"name":"onClick","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":107,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":142,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":146,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":154,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":150,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setPosition","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":218,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\'"}],"modifierKind":[170]},{"name":"toggleColorPicker","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":165,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":158,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":113,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[],"implements":["AfterViewInit","OnDestroy","ControlValueAccessor","Validator"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_doc","type":"Document","deprecated":false,"deprecationMessage":""},{"name":"el","type":"ElementRef","deprecated":false,"deprecationMessage":""},{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":""},{"name":"viewContainerRef","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""}],"line":86,"jsdoctags":[{"name":"_doc","type":"Document","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"el","type":"ElementRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"viewContainerRef","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"ngxInputColor":{"name":"ngxInputColor","setSignature":{"name":"ngxInputColor","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"el","type":"HTMLInputElement | ElementRef<HTMLInputElement> | null | undefined | string","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":59,"jsdoctags":[{"name":"el","type":"HTMLInputElement | ElementRef<HTMLInputElement> | null | undefined | string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"NgxInputGradientDirective","id":"directive-NgxInputGradientDirective-2afdfeda23beb807af7df087b0fef2b8a2a47d79b5a244535b620711db9e45efa9ca6d58caa8619ea4e835351b6d193dbc707f8251a42901aec4255d03d8b8b5","file":"projects/ngx-input-color/src/directives/ngx-input-gradient.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import {\\r\\n  ComponentRef,\\r\\n  Directive,\\r\\n  ElementRef,\\r\\n  HostListener,\\r\\n  Inject,\\r\\n  Input,\\r\\n  OnDestroy,\\r\\n  Renderer2,\\r\\n  ViewContainerRef,\\r\\n  forwardRef,\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n} from \'@angular/forms\';\\r\\nimport { ColorInspector } from \'../models/ColorInspector.enum\';\\r\\nimport { NgxInputGradientComponent } from \'../lib/ngx-input-gradient/ngx-input-gradient.component\';\\r\\nimport { DOCUMENT } from \'@angular/common\';\\r\\nimport { isValidGradient, parseGradient } from \'../utils/build-gradient\';\\r\\n\\r\\n@Directive({\\r\\n  selector: \'[ngxInputGradient]\',\\r\\n  providers: [\\r\\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputGradientDirective), multi: true },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      multi: true,\\r\\n      useExisting: NgxInputGradientDirective,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class NgxInputGradientDirective implements OnDestroy, ControlValueAccessor, Validator {\\r\\n  @Input() closeTitle = \'Close\';\\r\\n  @Input() confirmTitle = \'Ok\';\\r\\n  @Input() setInputBackground = true;\\r\\n\\r\\n  private pickerComponentRef?: ComponentRef<NgxInputGradientComponent>;\\r\\n  private backdrop?: HTMLDivElement;\\r\\n  private pickerEl?: HTMLElement;\\r\\n  isDisabled = false;\\r\\n\\r\\n  value = \'\';\\r\\n\\r\\n  _onChange = (value: string) => {};\\r\\n  _onTouched = () => {};\\r\\n  _onValidateChange = () => {};\\r\\n  constructor(\\r\\n    @Inject(DOCUMENT) private _doc: Document,\\r\\n    private el: ElementRef,\\r\\n    private renderer: Renderer2,\\r\\n    private viewContainerRef: ViewContainerRef\\r\\n  ) {}\\r\\n\\r\\n  @HostListener(\'click\', [\'$event\']) onClick(ev: Event) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.toggleColorPicker();\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  registerOnValidatorChange(fn: () => void): void {\\r\\n    this._onValidateChange = fn;\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  ngOnDestroy(): void {\\r\\n    this.destroyPicker();\\r\\n  }\\r\\n\\r\\n  writeValue(value: any): void {\\r\\n    this.value = value;\\r\\n    if (value && isValidGradient(value)) {\\r\\n      const parsed = parseGradient(value);\\r\\n      if (parsed.valid && this.setInputBackground) {\\r\\n        this.renderer.setStyle(this.el.nativeElement, \'background\', value);\\r\\n      }\\r\\n      this._onValidateChange();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  toggleColorPicker() {\\r\\n    if (this.pickerComponentRef) {\\r\\n      this.destroyPicker();\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    // ایجاد کامپوننت\\r\\n    this.pickerComponentRef = this.viewContainerRef.createComponent(NgxInputGradientComponent);\\r\\n\\r\\n    const instance = this.pickerComponentRef.instance;\\r\\n    instance.showCloseButton = true;\\r\\n    instance.closeTitle = this.closeTitle;\\r\\n    instance.confirmTitle = this.confirmTitle;\\r\\n    instance.writeValue(this.value);\\r\\n\\r\\n    // رویدادها\\r\\n    const sub1 = instance.confirm.subscribe((c: any) => {\\r\\n      this.confirmColor(c);\\r\\n    });\\r\\n\\r\\n    const sub2 = instance.cancel.subscribe(() => {\\r\\n      this.destroyPicker();\\r\\n    });\\r\\n\\r\\n    // بک‌دراپ\\r\\n    this.backdrop = this.renderer.createElement(\'div\');\\r\\n    if (this.backdrop) {\\r\\n      this.backdrop.style.cssText = `\\r\\n          background: #5e5e5e1e;\\r\\n          position: fixed;\\r\\n          top: 0;\\r\\n          left: 0;\\r\\n          right: 0;\\r\\n          bottom: 0;\\r\\n          overflow: auto;\\r\\n          transition: all 300ms;\\r\\n        `;\\r\\n      this.backdrop.onclick = () => this.destroyPicker();\\r\\n    }\\r\\n    // گرفتن المنت کامپوننت واقعی\\r\\n    this.pickerEl = (this.pickerComponentRef.hostView as any).rootNodes[0] as HTMLElement;\\r\\n    this.renderer.appendChild(this.backdrop, this.pickerEl);\\r\\n    this.renderer.appendChild(this._doc.body, this.backdrop);\\r\\n    this.setPosition();\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  setPosition() {\\r\\n    setTimeout(() => {\\r\\n      if (!this.pickerEl || !this.pickerComponentRef) return;\\r\\n      const hostRect = this.el.nativeElement.getBoundingClientRect();\\r\\n      const pickerEl = this.pickerEl;\\r\\n\\r\\n      // اعمال موقتی برای گرفتن سایز دقیق\\r\\n      this.renderer.setStyle(pickerEl, \'position\', \'absolute\');\\r\\n      this.renderer.setStyle(pickerEl, \'z-index\', \'9999\');\\r\\n\\r\\n      this._doc.body.appendChild(pickerEl); // لازم برای محاسبه دقیق اندازه\\r\\n\\r\\n      const pickerRect = pickerEl.getBoundingClientRect();\\r\\n\\r\\n      // وسط‌چین کردن افقی\\r\\n      let left = hostRect.left + hostRect.width / 2 - pickerRect.width / 2;\\r\\n      let top = hostRect.bottom;\\r\\n\\r\\n      // جلوگیری از بیرون زدن از راست\\r\\n      if (left + pickerRect.width > window.innerWidth) {\\r\\n        left = window.innerWidth - pickerRect.width - 8;\\r\\n      }\\r\\n\\r\\n      // جلوگیری از بیرون زدن از چپ\\r\\n      if (left < 8) {\\r\\n        left = 8;\\r\\n      }\\r\\n\\r\\n      // اگر از پایین بیرون زد، ببر بالا\\r\\n      if (top + pickerRect.height > window.innerHeight) {\\r\\n        top = hostRect.top - pickerRect.height;\\r\\n      }\\r\\n\\r\\n      // جلوگیری از بیرون زدن از بالا\\r\\n      if (top < 8) {\\r\\n        top = 8;\\r\\n      }\\r\\n\\r\\n      this.renderer.setStyle(pickerEl, \'top\', `${top}px`);\\r\\n      this.renderer.setStyle(pickerEl, \'left\', `${left}px`);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  destroyPicker() {\\r\\n    if (this.pickerComponentRef) {\\r\\n      this.pickerComponentRef.destroy();\\r\\n      this.pickerComponentRef = undefined;\\r\\n    }\\r\\n    if (this.backdrop && this.backdrop.parentNode) {\\r\\n      this.renderer.removeChild(this._doc.body, this.backdrop);\\r\\n      this.backdrop = undefined;\\r\\n    }\\r\\n    this.pickerEl = undefined;\\r\\n  }\\r\\n\\r\\n  confirmColor(c: string) {\\r\\n    if (this.setInputBackground) {\\r\\n      this.renderer.setStyle(this.el.nativeElement, \'background\', c);\\r\\n    }\\r\\n    this._onChange(c);\\r\\n    this.value = c;\\r\\n    this.destroyPicker();\\r\\n  }\\r\\n}\\r\\n","selector":"[ngxInputGradient]","providers":[{"name":"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputGradientDirective), multi: true }","type":"directive"},{"name":"{\\n    provide: NG_VALIDATORS, multi: true, useExisting: NgxInputGradientDirective,\\n}","type":"directive"}],"hostDirectives":[],"standalone":false,"inputsClass":[{"name":"closeTitle","defaultValue":"\'Close\'","deprecated":false,"deprecationMessage":"","line":38,"type":"string","decorators":[]},{"name":"confirmTitle","defaultValue":"\'Ok\'","deprecated":false,"deprecationMessage":"","line":39,"type":"string","decorators":[]},{"name":"setInputBackground","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":40,"type":"boolean","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"click","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":59},{"name":"window:resize","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":143}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":49},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":50},{"name":"_onValidateChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":51},{"name":"backdrop","deprecated":false,"deprecationMessage":"","type":"HTMLDivElement","indexKey":"","optional":true,"description":"","line":43,"modifierKind":[123]},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":45},{"name":"pickerComponentRef","deprecated":false,"deprecationMessage":"","type":"ComponentRef<NgxInputGradientComponent>","indexKey":"","optional":true,"description":"","line":42,"modifierKind":[123]},{"name":"pickerEl","deprecated":false,"deprecationMessage":"","type":"HTMLElement","indexKey":"","optional":true,"description":"","line":44,"modifierKind":[123]},{"name":"value","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":47}],"methodsClass":[{"name":"confirmColor","args":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":198,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"destroyPicker","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":186,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":""},{"name":"onClick","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"modifierKind":[170],"jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":65,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setPosition","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":143,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\', [\'$event\']"}],"modifierKind":[170]},{"name":"toggleColorPicker","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":96,"deprecated":false,"deprecationMessage":""},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":77,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":85,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"extends":[],"implements":["OnDestroy","ControlValueAccessor","Validator"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_doc","type":"Document","deprecated":false,"deprecationMessage":""},{"name":"el","type":"ElementRef","deprecated":false,"deprecationMessage":""},{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":""},{"name":"viewContainerRef","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""}],"line":51,"jsdoctags":[{"name":"_doc","type":"Document","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"el","type":"ElementRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"viewContainerRef","type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}],"components":[{"name":"AppComponent","id":"component-AppComponent-55f0195b270bfba1c2012e5c7392e7f97fc382902f480eea3d3c2b4e251aad0d9c451b96630fe75349220efd956f233105280147bb918f1d7a760a4dbeb82fef","file":"projects/demo/src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":[],"styles":[],"templateUrl":["./app.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"boxShadow","defaultValue":"\'50px 150px 10px 0px red\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":21},{"name":"color","defaultValue":"\'pink\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":19},{"name":"gradient","defaultValue":"\'linear-gradient(90deg, #2A9FD3 0%, #8B1ACF 100%)\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":20},{"name":"title","defaultValue":"\'demo\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":18}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"NgxInputColorModule","type":"module"},{"name":"NgxInputGradientModule","type":"module"},{"name":"FormsModule","type":"module"},{"name":"NgxInputBoxShadowModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  NgxInputBoxShadowModule,\\r\\n  NgxInputColorModule,\\r\\n  NgxInputGradientModule,\\r\\n} from \'../../../ngx-input-color/src/public-api\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-root\',\\r\\n  standalone: true,\\r\\n  imports: [CommonModule, NgxInputColorModule, NgxInputGradientModule, FormsModule, NgxInputBoxShadowModule],\\r\\n  templateUrl: \'./app.component.html\',\\r\\n  styleUrl: \'./app.component.scss\',\\r\\n})\\r\\nexport class AppComponent {\\r\\n  title = \'demo\';\\r\\n  color = \'pink\';\\r\\n  gradient = \'linear-gradient(90deg, #2A9FD3 0%, #8B1ACF 100%)\';\\r\\n  boxShadow = \'50px 150px 10px 0px red\';\\r\\n}\\r\\n","styleUrl":"./app.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","extends":[],"templateData":"<ngx-box-shadow [(ngModel)]=\\"boxShadow\\" class=\\"form-control\\" /> \\r\\n<p>{{ boxShadow }}</p>\\r\\n\\r\\n\x3c!-- <input type=\\"text\\" ngxInputBoxShadow [(ngModel)]=\\"boxShadow\\" class=\\"form-control\\" />\\r\\n\\r\\n<div class=\\"card\\" [style.box-shadow]=\\"boxShadow\\"></div> --\x3e\\r\\n\\r\\n\x3c!-- \\r\\n<ngx-input-gradient [(ngModel)]=\\"gradient\\"></ngx-input-gradient>\\r\\n<p>{{ gradient }}</p>\\r\\n\\r\\n\\r\\n\\r\\n<input ngxInputGradient [(ngModel)]=\\"gradient\\" class=\\"form-control\\" />\\r\\n<p>{{ gradient }}</p> --\x3e\\r\\n<input type=\\"text\\" [(ngModel)]=\\"color\\" ngxInputColor class=\\"form-control\\" />\\r\\n<p>{{ color }}</p>\\r\\n"},{"name":"CmykComponent","id":"component-CmykComponent-2304bd73b622d2225e3fb695d5b80694dc06fba49c970a8305aaae1c0516159400d3d48b3a4efa6ccafd0c4f056cd005ceac4329d21d77186b55afa67d2bbf78","file":"projects/ngx-input-color/src/lib/inspectors/cmyk/cmyk.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-cmyk","styleUrls":["./cmyk.component.scss"],"styles":[],"templateUrl":["./cmyk.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","deprecated":false,"deprecationMessage":"","line":22,"type":"NgxColor","decorators":[]}],"outputsClass":[{"name":"colorChange","defaultValue":"new EventEmitter<NgxColor | undefined>()","deprecated":false,"deprecationMessage":"","line":32,"type":"EventEmitter"}],"propertiesClass":[{"name":"cyan","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":16},{"name":"cyanSliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":11},{"name":"inputColor","deprecated":false,"deprecationMessage":"","type":"NgxColor","indexKey":"","optional":true,"description":"","line":20,"modifierKind":[123]},{"name":"key","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":19},{"name":"keySliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":14},{"name":"magenta","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":17},{"name":"magentaSliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":12},{"name":"yellow","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":18},{"name":"yellowSliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":13}],"methodsClass":[{"name":"cloneColor","args":[{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"CMYK","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"generateColor","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":36,"deprecated":false,"deprecationMessage":""},{"name":"getChannelGradient","args":[{"name":"channel","type":"","deprecated":false,"deprecationMessage":""},{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"channel","type":"","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isCmykEqual","args":[{"name":"a","type":"CMYK","deprecated":false,"deprecationMessage":"","optional":true},{"name":"b","type":"CMYK","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"boolean","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"a","type":"CMYK","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}},{"name":"b","type":"CMYK","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":35,"deprecated":false,"deprecationMessage":""},{"name":"updateSliderBackgrounds","args":[{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"cmyk","type":"CMYK","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, EventEmitter, Input, OnInit, Output } from \'@angular/core\';\\r\\nimport { NgxColor } from \'../../../utils/color-helper\';\\r\\nimport { CMYK } from \'../../../utils/interfaces\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-cmyk\',\\r\\n  templateUrl: \'./cmyk.component.html\',\\r\\n  styleUrls: [\'./cmyk.component.scss\'],\\r\\n})\\r\\nexport class CmykComponent implements OnInit {\\r\\n  cyanSliderBackground = \'\';\\r\\n  magentaSliderBackground = \'\';\\r\\n  yellowSliderBackground = \'\';\\r\\n  keySliderBackground = \'\';\\r\\n\\r\\n  cyan: number = 0;\\r\\n  magenta: number = 0;\\r\\n  yellow: number = 0;\\r\\n  key: number = 0;\\r\\n  private inputColor?: NgxColor;\\r\\n\\r\\n  @Input() set color(c: NgxColor) {\\r\\n    if (c.equals(this.inputColor)) return;\\r\\n    this.inputColor = c;\\r\\n    const cmyk = c.toCmyk();\\r\\n    this.cyan = cmyk.c;\\r\\n    this.magenta = cmyk.m;\\r\\n    this.yellow = cmyk.y;\\r\\n    this.key = cmyk.k;\\r\\n    this.updateSliderBackgrounds(cmyk);\\r\\n  }\\r\\n  @Output() colorChange = new EventEmitter<NgxColor | undefined>();\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit() {}\\r\\n  generateColor() {\\r\\n    try {\\r\\n      const cmyk: CMYK = { c: this.cyan, m: this.magenta, y: this.yellow, k: this.key };\\r\\n      const color = new NgxColor(cmyk);\\r\\n      this.updateSliderBackgrounds(cmyk);\\r\\n      if (color.equals(this.inputColor) == false) {\\r\\n        this.inputColor = color;\\r\\n        this.colorChange.emit(color);\\r\\n      }\\r\\n    } catch (error) {\\r\\n      this.colorChange.emit(undefined);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private updateSliderBackgrounds(cmyk: CMYK) {\\r\\n    this.cyanSliderBackground = this.getChannelGradient(\'c\', cmyk);\\r\\n    this.magentaSliderBackground = this.getChannelGradient(\'m\', cmyk);\\r\\n    this.yellowSliderBackground = this.getChannelGradient(\'y\', cmyk);\\r\\n    this.keySliderBackground = this.getChannelGradient(\'k\', cmyk);\\r\\n  }\\r\\n\\r\\n  private getChannelGradient(channel: keyof CMYK, cmyk: CMYK): string {\\r\\n    let baseColor = this.cloneColor(cmyk);\\r\\n    baseColor[channel] = channel == \'k\' ? 1 : 0;\\r\\n    let startColor = NgxColor.cmykToRgba(baseColor);\\r\\n    let s = `rgb(${startColor.r}, ${startColor.g}, ${startColor.b})`;\\r\\n    baseColor[channel] = 100;\\r\\n    let endColor = NgxColor.cmykToRgba(baseColor);\\r\\n    let e = `rgb(${endColor.r}, ${endColor.g}, ${endColor.b})`;\\r\\n\\r\\n    return `linear-gradient(to right,  ${s},${e})`;\\r\\n  }\\r\\n  private isCmykEqual(a?: CMYK, b?: CMYK): boolean {\\r\\n    if (!a || !b) return false;\\r\\n    return a.c === b.c && a.m === b.m && a.y === b.y && a.k === b.k;\\r\\n  }\\r\\n\\r\\n  private cloneColor(cmyk: CMYK): CMYK {\\r\\n    return JSON.parse(JSON.stringify(cmyk));\\r\\n    // return Object.assign({}, cmyk);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":".slider-title {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  input {\\r\\n    transition: box-shadow 0.1s;\\r\\n    box-shadow: inset hsl(250, 3%, 85%) 0 0 0 1px, inset white 0 0 0 100px;\\r\\n    border: none;\\r\\n    width: 40px;\\r\\n    color: hsl(250, 3%, 0%);\\r\\n    font-family: \'Inter\', sans-serif;\\r\\n    padding: 5px 6px;\\r\\n    border-radius: 5px;\\r\\n    font-size: 12px;\\r\\n  }\\r\\n}","styleUrl":"./cmyk.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":32},"extends":[],"implements":["OnInit"],"accessors":{"color":{"name":"color","setSignature":{"name":"color","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":22,"jsdoctags":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"templateData":"<slider\\r\\n  [(ngModel)]=\\"cyan\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"100\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"cyanSliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Cyan</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"cyan\\" min=\\"0\\" max=\\"100\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"magenta\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"100\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"magentaSliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Magenta</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"magenta\\" min=\\"0\\" max=\\"100\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"yellow\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"100\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"yellowSliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Yellow</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"yellow\\" min=\\"0\\" max=\\"100\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"key\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"100\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"keySliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Key</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"key\\" min=\\"0\\" max=\\"100\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n"},{"name":"HslComponent","id":"component-HslComponent-e1ffb309f5d20a6e182d8fd588e3cd979e7924470ab6b86c46b79d670504280d36722af5552939dbac2fd2a6a213b7cb42c06bd5cfbeff46770c21e1a5aafc0d","file":"projects/ngx-input-color/src/lib/inspectors/hsl/hsl.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-hsl","styleUrls":["./hsl.component.scss"],"styles":[],"templateUrl":["./hsl.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","deprecated":false,"deprecationMessage":"","line":19,"type":"NgxColor","decorators":[]}],"outputsClass":[{"name":"colorChange","defaultValue":"new EventEmitter<NgxColor | undefined>()","deprecated":false,"deprecationMessage":"","line":29,"type":"EventEmitter"}],"propertiesClass":[{"name":"alpha","defaultValue":"1","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":15},{"name":"baseColor","defaultValue":"\'rgb(0,0,0)\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":16},{"name":"hue","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":12},{"name":"inputColor","deprecated":false,"deprecationMessage":"","type":"NgxColor","indexKey":"","optional":true,"description":"","line":17,"modifierKind":[123]},{"name":"luminance","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":14},{"name":"saturation","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":13}],"methodsClass":[{"name":"generateColor","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":34,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, EventEmitter, Input, OnInit, Output } from \'@angular/core\';\\r\\nimport { NgxColor } from \'../../../utils/color-helper\';\\r\\nimport { HSLA } from \'../../../utils/interfaces\';\\r\\n\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-hsl\',\\r\\n  templateUrl: \'./hsl.component.html\',\\r\\n  styleUrls: [\'./hsl.component.scss\'],\\r\\n})\\r\\nexport class HslComponent implements OnInit {\\r\\n  hue: number = 0;\\r\\n  saturation: number = 0;\\r\\n  luminance: number = 0;\\r\\n  alpha: number = 1;\\r\\n  baseColor = \'rgb(0,0,0)\';\\r\\n  private inputColor?: NgxColor;\\r\\n\\r\\n  @Input() set color(c: NgxColor) {\\r\\n    if (c.equals(this.inputColor)) return;\\r\\n    this.inputColor = c;\\r\\n    const hsla = c.toHsl();\\r\\n    this.hue = hsla.h;\\r\\n    this.saturation = hsla.s;\\r\\n    this.luminance = hsla.l;\\r\\n    this.alpha = hsla.a ?? 1;\\r\\n    this.baseColor = c.toHexString(false);\\r\\n  }\\r\\n  @Output() colorChange = new EventEmitter<NgxColor | undefined>();\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit() {}\\r\\n\\r\\n  generateColor() {\\r\\n    try {\\r\\n      const hsla: HSLA = { h: this.hue, s: this.saturation, l: this.luminance, a: this.alpha };\\r\\n      const color = new NgxColor(hsla);\\r\\n      this.baseColor = color.toHexString(false);\\r\\n      if (color.equals(this.inputColor) == false) {\\r\\n        this.inputColor = color;\\r\\n        this.colorChange.emit(color);\\r\\n      }\\r\\n    } catch (error) {\\r\\n      this.colorChange.emit(undefined);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":".slider-title {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  input {\\r\\n    transition: box-shadow 0.1s;\\r\\n    box-shadow: inset hsl(250, 3%, 85%) 0 0 0 1px, inset white 0 0 0 100px;\\r\\n    border: none;\\r\\n    width: 40px;\\r\\n    color: hsl(250, 3%, 0%);\\r\\n    font-family: \'Inter\', sans-serif;\\r\\n    padding: 5px 6px;\\r\\n    border-radius: 5px;\\r\\n    font-size: 12px;\\r\\n  }\\r\\n}","styleUrl":"./hsl.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":29},"extends":[],"implements":["OnInit"],"accessors":{"color":{"name":"color","setSignature":{"name":"color","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":19,"jsdoctags":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"templateData":"<slider\\r\\n  [(ngModel)]=\\"hue\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"360\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  background=\\"linear-gradient(to right,red 0%,#ff0 17%,lime 33%,cyan 50%,blue 66%,#f0f 83%,red 100%)\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Hue</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"hue\\" min=\\"0\\" max=\\"360\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"saturation\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"100\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"\'linear-gradient(to right,#808080,\' + baseColor + \')\'\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Saturation</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"saturation\\" min=\\"0\\" max=\\"100\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"luminance\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"100\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"\'linear-gradient(to right,black,\' + baseColor + \',white)\'\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Luminance</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"luminance\\" min=\\"0\\" max=\\"100\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"alpha\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"1\\"\\r\\n  [step]=\\"0.1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [isBgTransparent]=\\"true\\"\\r\\n  [background]=\\"\'linear-gradient(to right,transparent,\' + baseColor + \')\'\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Alpha</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"alpha\\" min=\\"0\\" max=\\"1\\" step=\\"0.1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n"},{"name":"NgxBoxShadowComponent","id":"component-NgxBoxShadowComponent-e813857f60569bb2827b4808064e3db6c7ae42606f31090980c18159bf0d07d0c6632d29fdc21f840a0997a94d40a50bc8991d1bec251e9f2dbd23d5ce874c3f","file":"projects/ngx-input-color/src/lib/ngx-box-shadow/ngx-box-shadow.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxBoxShadowComponent), multi: true }","type":"component"},{"name":"{\\n    provide: NG_VALIDATORS, multi: true, useExisting: NgxBoxShadowComponent,\\n}","type":"component"}],"selector":"ngx-box-shadow","styleUrls":["./ngx-box-shadow.component.scss"],"styles":[],"templateUrl":["./ngx-box-shadow.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"closeTitle","defaultValue":"\'Close\'","deprecated":false,"deprecationMessage":"","line":53,"type":"string","decorators":[]},{"name":"confirmTitle","defaultValue":"\'Ok\'","deprecated":false,"deprecationMessage":"","line":54,"type":"string","decorators":[]},{"name":"maxRange","defaultValue":"25","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1429,"end":1445,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":1430,"end":1437,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"default"},"comment":"<p>25</p>\\n"}],"rawdescription":"\\n\\nThe maximum range of the box shadow.\\n","description":"<p>The maximum range of the box shadow.</p>\\n","line":52,"type":"number","decorators":[]},{"name":"showCloseButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":55,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"cancel","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","line":58,"type":"EventEmitter"},{"name":"change","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":56,"type":"EventEmitter"},{"name":"confirm","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":57,"type":"EventEmitter"}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":72},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":73},{"name":"_onValidateChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":74},{"name":"blur","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":64},{"name":"center","defaultValue":"{ x: 0, y: 0 }","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"","line":68},{"name":"color","defaultValue":"\'black\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":66},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":59},{"name":"isDragging","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":60},{"name":"line","defaultValue":"{ x1: 0, y1: 0, x2: 0, y2: 0 }","deprecated":false,"deprecationMessage":"","type":"literal type","indexKey":"","optional":false,"description":"","line":67},{"name":"pad","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":76,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'pad\', {static: true}"}],"modifierKind":[170]},{"name":"padRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":70},{"name":"spread","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":65},{"name":"thumb","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":77,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'thumb\', {static: true}"}],"modifierKind":[170]},{"name":"thumbRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":71},{"name":"value","defaultValue":"{ x: 0, y: 0 }","deprecated":false,"deprecationMessage":"","type":"IPosition","indexKey":"","optional":false,"description":"","line":61},{"name":"x","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":62},{"name":"y","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":63}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":266,"deprecated":false,"deprecationMessage":""},{"name":"convertValueToPosition","args":[{"name":"offsetX","type":"number","deprecated":false,"deprecationMessage":""},{"name":"offsetY","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":220,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"offsetX","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"offsetY","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"dragStart","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":117,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":82,"deprecated":false,"deprecationMessage":""},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":85,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":""},{"name":"onChangeData","args":[{"name":"isConfirm","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"optional":false,"returnType":"void","typeParameters":[],"line":247,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"isConfirm","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"text":"param"}}]},{"name":"onChangeValue","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":216,"deprecated":false,"deprecationMessage":"","modifierKind":[125]},{"name":"onDrag","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":144,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mousemove\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchmove\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onDragEnd","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":181,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mouseup\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchend\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onResize","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":138,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\', [\'$event\']"}],"modifierKind":[170]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":86,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":89,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":95,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"resetPosition","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":128,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setValueByPosition","args":[{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":""},{"name":"padRec","type":"DOMRect","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":185,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"padRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"stopPropagation","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":263,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updatePosition","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":149,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateRects","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":124,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":98,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"document:mousemove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":144},{"name":"document:mouseup","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":181},{"name":"document:touchend","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":181},{"name":"document:touchmove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":144},{"name":"window:resize","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":138}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"FormsModule","type":"module"},{"name":"NgxInputColorModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  Component,\\r\\n  ChangeDetectionStrategy,\\r\\n  forwardRef,\\r\\n  OnInit,\\r\\n  OnDestroy,\\r\\n  ChangeDetectorRef,\\r\\n  HostListener,\\r\\n  ElementRef,\\r\\n  ViewChild,\\r\\n  AfterViewInit,\\r\\n  Input,\\r\\n  Output,\\r\\n  EventEmitter,\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  NG_VALIDATORS,\\r\\n  FormsModule,\\r\\n  ControlValueAccessor,\\r\\n  Validator,\\r\\n  AbstractControl,\\r\\n  ValidationErrors,\\r\\n} from \'@angular/forms\';\\r\\nimport { getOffsetPosition } from \'../../utils/get-offset-position\';\\r\\nimport { IPosition } from \'../../models/IPosition\';\\r\\nimport { parseBoxShadowToPx, stringifyBoxShadow } from \'../../utils/box-shadow\';\\r\\nimport { NgxInputColorModule } from \'../../ngx-input-color.module\';\\r\\n\\r\\n@Component({\\r\\n  standalone: true,\\r\\n  selector: \'ngx-box-shadow\',\\r\\n  templateUrl: \'./ngx-box-shadow.component.html\',\\r\\n  styleUrls: [\'./ngx-box-shadow.component.scss\'],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxBoxShadowComponent), multi: true },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      multi: true,\\r\\n      useExisting: NgxBoxShadowComponent,\\r\\n    },\\r\\n  ],\\r\\n  imports: [CommonModule, FormsModule, NgxInputColorModule],\\r\\n})\\r\\nexport class NgxBoxShadowComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, Validator {\\r\\n  /**\\r\\n   * The maximum range of the box shadow.\\r\\n   * @default 25\\r\\n   */\\r\\n  @Input() maxRange = 25;\\r\\n  @Input() closeTitle = \'Close\';\\r\\n  @Input() confirmTitle = \'Ok\';\\r\\n  @Input() showCloseButton = true;\\r\\n  @Output() change = new EventEmitter<string>();\\r\\n  @Output() confirm = new EventEmitter<string>();\\r\\n  @Output() cancel = new EventEmitter<void>();\\r\\n  isDisabled = false;\\r\\n  isDragging = false;\\r\\n  value: IPosition = { x: 0, y: 0 };\\r\\n  x = 0;\\r\\n  y = 0;\\r\\n  blur = 0;\\r\\n  spread = 0;\\r\\n  color = \'black\';\\r\\n  line: { x1: number; y1: number; x2: number; y2: number } = { x1: 0, y1: 0, x2: 0, y2: 0 };\\r\\n  center: { x: number; y: number } = { x: 0, y: 0 };\\r\\n\\r\\n  padRect?: DOMRect;\\r\\n  thumbRect?: DOMRect;\\r\\n  _onChange = (value: string) => {};\\r\\n  _onTouched = () => {};\\r\\n  _onValidateChange = () => {};\\r\\n\\r\\n  @ViewChild(\'pad\', { static: true }) pad!: ElementRef<HTMLDivElement>;\\r\\n  @ViewChild(\'thumb\', { static: true }) thumb!: ElementRef<HTMLDivElement>;\\r\\n\\r\\n  constructor(private cd: ChangeDetectorRef) {}\\r\\n\\r\\n  ngOnInit(): void {}\\r\\n  ngAfterViewInit(): void {\\r\\n    this.updateRects();\\r\\n  }\\r\\n  ngOnDestroy(): void {}\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  registerOnValidatorChange(fn: () => void): void {\\r\\n    this._onValidateChange = fn;\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  writeValue(value: any): void {\\r\\n    this.resetPosition();\\r\\n    if (value) {\\r\\n      const boxShadow = parseBoxShadowToPx(value);\\r\\n      console.log(boxShadow);\\r\\n      if (boxShadow) {\\r\\n        this.value = { x: boxShadow.offsetX, y: boxShadow.offsetY };\\r\\n        this.blur = boxShadow.blurRadius;\\r\\n        this.spread = boxShadow.spreadRadius;\\r\\n        this.color = boxShadow.color;\\r\\n        this.convertValueToPosition(boxShadow.offsetX, boxShadow.offsetY);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  dragStart(ev: MouseEvent | TouchEvent) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.isDragging = true;\\r\\n    this.updatePosition(ev);\\r\\n    this.updateRects();\\r\\n  }\\r\\n  private updateRects() {\\r\\n    this.padRect = this.pad.nativeElement.getBoundingClientRect();\\r\\n    this.thumbRect = this.thumb.nativeElement.getBoundingClientRect();\\r\\n  }\\r\\n  private resetPosition() {\\r\\n    if (!this.padRect || !this.thumbRect) this.updateRects();\\r\\n    this.center = { x: this.padRect!.width / 2, y: this.padRect!.height / 2 };\\r\\n    this.x = this.center.x - this.thumbRect!.width / 2;\\r\\n    this.y = this.center.y - this.thumbRect!.height / 2;\\r\\n    this.line = { x1: this.center.x, y1: this.center.y, x2: this.center.x, y2: this.center.y };\\r\\n    this.cd.detectChanges();\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  onResize() {\\r\\n    this.writeValue(this.value);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mousemove\', [\'$event\'])\\r\\n  @HostListener(\'document:touchmove\', [\'$event\'])\\r\\n  onDrag(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    this.updatePosition(ev);\\r\\n  }\\r\\n\\r\\n  private updatePosition(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    if (!this.padRect || !this.thumbRect) this.updateRects();\\r\\n    const position = getOffsetPosition(ev, this.pad.nativeElement);\\r\\n\\r\\n    const padRec = this.padRect!;\\r\\n    const thumbRec = this.thumbRect!;\\r\\n\\r\\n    const minX = thumbRec.width / 2;\\r\\n    const maxX = padRec.width - thumbRec.width / 2;\\r\\n    const minY = thumbRec.height / 2;\\r\\n    const maxY = padRec.height - thumbRec.height / 2;\\r\\n\\r\\n    const clampedX = Math.max(minX, Math.min(position.x, maxX));\\r\\n    const clampedY = Math.max(minY, Math.min(position.y, maxY));\\r\\n\\r\\n    // فقط یکبار از وسط اصلاح کن\\r\\n    this.x = clampedX - thumbRec.width / 2;\\r\\n    this.y = clampedY - thumbRec.height / 2;\\r\\n\\r\\n    this.line = {\\r\\n      x1: this.center.x,\\r\\n      y1: this.center.y,\\r\\n      x2: this.x + thumbRec.width / 2,\\r\\n      y2: this.y + thumbRec.height / 2,\\r\\n    };\\r\\n\\r\\n    this.setValueByPosition(thumbRec, padRec);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mouseup\', [\'$event\'])\\r\\n  @HostListener(\'document:touchend\', [\'$event\'])\\r\\n  onDragEnd(ev: MouseEvent | TouchEvent) {\\r\\n    this.isDragging = false;\\r\\n  }\\r\\n\\r\\n  setValueByPosition(thumbRec: DOMRect, padRec: DOMRect) {\\r\\n    const padCenterX = (padRec.width - thumbRec.width) / 2;\\r\\n    const padCenterY = (padRec.height - thumbRec.height) / 2;\\r\\n\\r\\n    // فاصله thumb از مرکز\\r\\n    const dx = this.x - padCenterX;\\r\\n    const dy = this.y - padCenterY;\\r\\n\\r\\n    // مقیاس تبدیل به -50 تا +50 (یا هرچقدر بخوای)\\r\\n    const halfRangeX = (padRec.width - thumbRec.width) / 2;\\r\\n    const halfRangeY = (padRec.height - thumbRec.height) / 2;\\r\\n\\r\\n    let valueX = (dx / halfRangeX) * this.maxRange; // -50 تا +50\\r\\n    let valueY = (dy / halfRangeY) * this.maxRange;\\r\\n\\r\\n    // رُند کردن\\r\\n    valueX = Math.round(valueX);\\r\\n    valueY = Math.round(valueY);\\r\\n\\r\\n    // محدود کردن به -50 تا +50 یا هر مقدار دلخواه\\r\\n    valueX = Math.min(Math.max(valueX, -this.maxRange), this.maxRange);\\r\\n    valueY = Math.min(Math.max(valueY, -this.maxRange), this.maxRange);\\r\\n\\r\\n    const newValue = { x: valueX, y: valueY };\\r\\n\\r\\n    if (!this.value || this.value.x !== valueX || this.value.y !== valueY) {\\r\\n      this.value = newValue;\\r\\n      this.onChangeData();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  public onChangeValue() {\\r\\n    this.convertValueToPosition(this.value.x, this.value.y);\\r\\n    this.onChangeData();\\r\\n  }\\r\\n  private convertValueToPosition(offsetX: number, offsetY: number) {\\r\\n    if (!this.padRect || !this.thumbRect) this.updateRects();\\r\\n\\r\\n    // موقعیت پیشنهادی بر اساس offset\\r\\n    let proposedX = this.padRect!.width / 2 + offsetX - this.thumbRect!.width / 2;\\r\\n    let proposedY = this.padRect!.height / 2 + offsetY - this.thumbRect!.height / 2;\\r\\n\\r\\n    // محدود کردن (clamp) تا خارج از pad نره\\r\\n    const minX = 0;\\r\\n    const maxX = this.padRect!.width - this.thumbRect!.width;\\r\\n    const minY = 0;\\r\\n    const maxY = this.padRect!.height - this.thumbRect!.height;\\r\\n\\r\\n    this.x = Math.min(Math.max(proposedX, minX), maxX);\\r\\n    this.y = Math.min(Math.max(proposedY, minY), maxY);\\r\\n\\r\\n    // رسم خط راهنما از مرکز به thumb\\r\\n    this.line = {\\r\\n      x1: this.center.x,\\r\\n      y1: this.center.y,\\r\\n      x2: this.x + this.thumbRect!.width / 2,\\r\\n      y2: this.y + this.thumbRect!.height / 2,\\r\\n    };\\r\\n\\r\\n    this.cd.detectChanges();\\r\\n  }\\r\\n\\r\\n  onChangeData(isConfirm: boolean = false) {\\r\\n    const boxShadow = stringifyBoxShadow({\\r\\n      inset: false,\\r\\n      offsetX: this.value.x,\\r\\n      offsetY: this.value.y,\\r\\n      blurRadius: this.blur,\\r\\n      spreadRadius: this.spread,\\r\\n      color: this.color,\\r\\n    });\\r\\n    this._onChange(boxShadow);\\r\\n    this.change.emit(boxShadow);\\r\\n    if (isConfirm) {\\r\\n      this.confirm.emit(boxShadow);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  stopPropagation(ev: Event) {\\r\\n    ev.stopPropagation();\\r\\n  }\\r\\n  close() {\\r\\n    this.cancel.emit();\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":".ngx-box-shadow-container {\\r\\n  width: 180px;\\r\\n  max-width: 100%;\\r\\n  border: 1px #bfbfbf solid;\\r\\n  border-radius: 15px;\\r\\n  background-color: white;\\r\\n  overflow: hidden;\\r\\n  box-shadow: 0px 0px 20px 0px rgb(0 0 0 / 31%);\\r\\n  direction: ltr;\\r\\n  padding: 12px;\\r\\n  * {\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n  .actions {\\r\\n    display: flex;\\r\\n    gap: 10px;\\r\\n    padding: 15px 0 0;\\r\\n    justify-content: space-between;\\r\\n    .action-buttons {\\r\\n      display: flex;\\r\\n      gap: 10px;\\r\\n    }\\r\\n    button {\\r\\n      cursor: pointer;\\r\\n      background: #f9f9f9;\\r\\n      outline: none;\\r\\n      transition: all 300ms;\\r\\n      border: 1px #d3d3d3 solid;\\r\\n      padding: 6px 8px;\\r\\n      min-width: 70px;\\r\\n      border-radius: 6px;\\r\\n      &:hover {\\r\\n        background: #8db6e4;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.pad-container {\\r\\n  position: relative;\\r\\n  width: 100px;\\r\\n  height: 100px;\\r\\n  border: 1px #545454 solid;\\r\\n  box-sizing: border-box;\\r\\n  direction: ltr;\\r\\n  border-radius: 3px;\\r\\n  &::after,\\r\\n  &::before {\\r\\n    content: \'\';\\r\\n    position: absolute;\\r\\n    border: 1px #91919169 solid;\\r\\n  }\\r\\n  &::after {\\r\\n    width: 100%;\\r\\n    top: calc(50% - 1px);\\r\\n    left: 0px;\\r\\n  }\\r\\n  &::before {\\r\\n    height: 100%;\\r\\n    top: 0px;\\r\\n    left: calc(50% - 1px);\\r\\n  }\\r\\n  //   background-color: green;\\r\\n  .thumb {\\r\\n    box-shadow: inset 0 0 0px 2px #fff;\\r\\n    width: 15px;\\r\\n    height: 15px;\\r\\n    display: block;\\r\\n    border-radius: 10px;\\r\\n    position: absolute;\\r\\n    cursor: pointer;\\r\\n    background: blue;\\r\\n  }\\r\\n}\\r\\n\\r\\n.ngx-settings {\\r\\n  .ngx-row {\\r\\n    display: flex;\\r\\n    align-items: flex-end;\\r\\n    justify-content: space-between;\\r\\n  }\\r\\n  input:not([type=\'range\']) {\\r\\n    width: 46px;\\r\\n    border: none;\\r\\n    border: 1px solid #91919169;\\r\\n    padding: 2px 4px;\\r\\n    border-radius: 5px;\\r\\n    background-color: transparent;\\r\\n    color: #000;\\r\\n    font-size: 14px;\\r\\n    font-weight: 500;\\r\\n    text-align: center;\\r\\n    direction: ltr;\\r\\n    &:focus {\\r\\n      outline: none;\\r\\n      border: 1px solid #09218d;\\r\\n    }\\r\\n  }\\r\\n  input[type=\'range\'] {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n","styleUrl":"./ngx-box-shadow.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":77,"jsdoctags":[{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["OnInit","AfterViewInit","OnDestroy","ControlValueAccessor","Validator"],"templateData":"<div class=\\"ngx-box-shadow-container\\" (click)=\\"stopPropagation($event)\\">\\r\\n  <div class=\\"pad-container\\" #pad>\\r\\n    <svg viewBox=\\"0 0 100 100\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\r\\n      <line\\r\\n        [attr.x1]=\\"line.x1\\"\\r\\n        [attr.y1]=\\"line.y1\\"\\r\\n        [attr.x2]=\\"line.x2\\"\\r\\n        [attr.y2]=\\"line.y2\\"\\r\\n        stroke=\\"blue\\"\\r\\n        stroke-width=\\"2\\" />\\r\\n    </svg>\\r\\n    <div\\r\\n      class=\\"thumb\\"\\r\\n      #thumb\\r\\n      [style.left.px]=\\"x\\"\\r\\n      [style.top.px]=\\"y\\"\\r\\n      (mousedown)=\\"dragStart($event)\\"\\r\\n      (touchstart)=\\"dragStart($event)\\"></div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\"ngx-settings\\">\\r\\n    <div class=\\"ngx-setting-item\\">\\r\\n      <div class=\\"ngx-row\\">\\r\\n        <span>Offset X</span>\\r\\n        <input type=\\"number\\" id=\\"offsetX\\" [(ngModel)]=\\"value.x\\" (ngModelChange)=\\"onChangeValue()\\" />\\r\\n      </div>\\r\\n      <input\\r\\n        type=\\"range\\"\\r\\n        id=\\"offsetX\\"\\r\\n        [(ngModel)]=\\"value.x\\"\\r\\n        (ngModelChange)=\\"onChangeValue()\\"\\r\\n        step=\\"1\\"\\r\\n        [min]=\\"-maxRange\\"\\r\\n        [max]=\\"maxRange\\" />\\r\\n    </div>\\r\\n    <div class=\\"ngx-setting-item\\">\\r\\n      <div class=\\"ngx-row\\">\\r\\n        <span>Offset Y</span>\\r\\n        <input type=\\"number\\" id=\\"offsetY\\" [(ngModel)]=\\"value.y\\" (ngModelChange)=\\"onChangeValue()\\" />\\r\\n      </div>\\r\\n      <input\\r\\n        type=\\"range\\"\\r\\n        id=\\"offsetY\\"\\r\\n        [(ngModel)]=\\"value.y\\"\\r\\n        (ngModelChange)=\\"onChangeValue()\\"\\r\\n        step=\\"1\\"\\r\\n        [min]=\\"-maxRange\\"\\r\\n        [max]=\\"maxRange\\" />\\r\\n    </div>\\r\\n    <div class=\\"ngx-setting-item\\">\\r\\n      <div class=\\"ngx-row\\">\\r\\n        <span>Blur</span>\\r\\n        <input type=\\"number\\" id=\\"blur\\" [(ngModel)]=\\"blur\\" (ngModelChange)=\\"onChangeValue()\\" />\\r\\n      </div>\\r\\n      <input type=\\"range\\" id=\\"blur\\" [(ngModel)]=\\"blur\\" (ngModelChange)=\\"onChangeValue()\\" step=\\"1\\" />\\r\\n    </div>\\r\\n    <div class=\\"ngx-setting-item\\">\\r\\n      <div class=\\"ngx-row\\">\\r\\n        <span>Spread</span>\\r\\n        <input type=\\"number\\" id=\\"spread\\" [(ngModel)]=\\"spread\\" (ngModelChange)=\\"onChangeValue()\\" />\\r\\n      </div>\\r\\n      <input type=\\"range\\" id=\\"spread\\" [(ngModel)]=\\"spread\\" (ngModelChange)=\\"onChangeValue()\\" step=\\"1\\" />\\r\\n    </div>\\r\\n    <div class=\\"ngx-setting-item\\">\\r\\n      <div class=\\"ngx-row\\">\\r\\n        <span>color</span>\\r\\n        <input\\r\\n          type=\\"text\\"\\r\\n          readonly\\r\\n          id=\\"color\\"\\r\\n          [(ngModel)]=\\"color\\"\\r\\n          ngxInputColor\\r\\n          [simpleMode]=\\"true\\"\\r\\n          [showCloseButton]=\\"false\\"\\r\\n          [showConfirmButton]=\\"false\\"\\r\\n          (ngModelChange)=\\"onChangeData()\\"\\r\\n          autocomplete=\\"off\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\"actions\\">\\r\\n    <div class=\\"action-buttons\\">\\r\\n      <button (click)=\\"close()\\" *ngIf=\\"showCloseButton\\">{{ closeTitle }}</button>\\r\\n      <button (click)=\\"onChangeData(true)\\">{{ confirmTitle }}</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n"},{"name":"NgxInputColorComponent","id":"component-NgxInputColorComponent-f89bb05ca5668ad9a6bd46508be12e6dd8ab07d7d7f7b117ace4642b49ce0bc0b3f60a26323968bd1dafbcd1beb442f93006270e913151fe45a753b9f60ab8ea","file":"projects/ngx-input-color/src/lib/ngx-input-color/ngx-input-color.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputColorComponent), multi: true }","type":"component"},{"name":"{\\n    provide: NG_VALIDATORS, multi: true, useExisting: NgxInputColorComponent,\\n}","type":"component"}],"selector":"ngx-input-color","styleUrls":["./ngx-input-color.component.scss"],"styles":[],"templateUrl":["./ngx-input-color.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"closeTitle","defaultValue":"\'Close\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTitle for the close button","description":"<p>Title for the close button</p>\\n","line":41,"type":"string","decorators":[]},{"name":"confirmTitle","defaultValue":"\'Ok\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTitle for the confirm button","description":"<p>Title for the confirm button</p>\\n","line":43,"type":"string","decorators":[]},{"name":"defaultInspector","defaultValue":"ColorInspector.Picker","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1662,"end":1690,"kind":327,"id":0,"flags":16842752,"modifierFlagsCache":0,"transformFlags":0,"tagName":{"pos":1663,"end":1668,"kind":80,"id":0,"flags":16842752,"transformFlags":0,"escapedText":"alias"},"comment":"<p>defaultInspector</p>\\n"}],"rawdescription":"\\n\\ndefault inspectors\\n- ColorInspector.Picker\\n- ColorInspector.RGB\\n- ColorInspector.HSL\\n\\n","description":"<p>default inspectors</p>\\n<ul>\\n<li>ColorInspector.Picker</li>\\n<li>ColorInspector.RGB</li>\\n<li>ColorInspector.HSL</li>\\n</ul>\\n","line":61,"type":"ColorInspector","decorators":[]},{"name":"outputType","defaultValue":"\'HEX\'","deprecated":false,"deprecationMessage":"","line":51,"type":"OutputType","decorators":[]},{"name":"showCloseButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether to show the close button","description":"<p>Whether to show the close button</p>\\n","line":45,"type":"boolean","decorators":[]},{"name":"showConfirmButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether to show the confirm button","description":"<p>Whether to show the confirm button</p>\\n","line":47,"type":"boolean","decorators":[]},{"name":"simpleMode","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMinifi UI","description":"<p>Minifi UI</p>\\n","line":49,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"cancel","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmitted when the cancel button is clicked","description":"<p>Emitted when the cancel button is clicked</p>\\n","line":68,"type":"EventEmitter"},{"name":"change","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmitted when the color value changes","description":"<p>Emitted when the color value changes</p>\\n","line":64,"type":"EventEmitter"},{"name":"confirm","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmitted when the confirm button is clicked","description":"<p>Emitted when the confirm button is clicked</p>\\n","line":66,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  OnDestroy,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  ViewEncapsulation,\\r\\n} from \'@angular/core\';\\r\\nimport { ColorFormats } from \'../../models/ColorFormats.enum\';\\r\\nimport { NgxColor, OutputType } from \'../../utils/color-helper\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n} from \'@angular/forms\';\\r\\nimport { ColorInspector } from \'../../models/ColorInspector.enum\';\\r\\ndeclare const EyeDropper: any;\\r\\n@Component({\\r\\n  selector: \'ngx-input-color\',\\r\\n  templateUrl: \'./ngx-input-color.component.html\',\\r\\n  styleUrls: [\'./ngx-input-color.component.scss\'],\\r\\n  providers: [\\r\\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputColorComponent), multi: true },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      multi: true,\\r\\n      useExisting: NgxInputColorComponent,\\r\\n    },\\r\\n  ],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n})\\r\\nexport class NgxInputColorComponent implements OnInit, OnDestroy, ControlValueAccessor, Validator {\\r\\n  /** Title for the close button */\\r\\n  @Input() closeTitle = \'Close\';\\r\\n  /** Title for the confirm button */\\r\\n  @Input() confirmTitle = \'Ok\';\\r\\n  /** Whether to show the close button */\\r\\n  @Input() showCloseButton = true;\\r\\n  /** Whether to show the confirm button */\\r\\n  @Input() showConfirmButton = true;\\r\\n  /** Minifi UI  */\\r\\n  @Input() simpleMode = false;\\r\\n\\r\\n  @Input() outputType: OutputType = \'HEX\';\\r\\n\\r\\n  /**\\r\\n   * default inspectors\\r\\n   * - ColorInspector.Picker\\r\\n   * - ColorInspector.RGB\\r\\n   * - ColorInspector.HSL\\r\\n   *\\r\\n   * @alias defaultInspector\\r\\n   */\\r\\n  @Input() defaultInspector: ColorInspector = ColorInspector.Picker;\\r\\n\\r\\n  /** Emitted when the color value changes */\\r\\n  @Output() change = new EventEmitter<string>();\\r\\n  /** Emitted when the confirm button is clicked */\\r\\n  @Output() confirm = new EventEmitter<string>();\\r\\n  /** Emitted when the cancel button is clicked */\\r\\n  @Output() cancel = new EventEmitter<void>();\\r\\n\\r\\n  /** @ignore */\\r\\n  format: ColorFormats = ColorFormats.HSVA;\\r\\n  /** @ignore */\\r\\n  isDarkColor = true;\\r\\n\\r\\n  /** @ignore */\\r\\n  rgbaColor = \'rgba(0, 0, 0, 1)\';\\r\\n  /** @ignore */\\r\\n  hexColor = \'#000000\';\\r\\n  /** @ignore */\\r\\n  name = \'black\';\\r\\n\\r\\n  /** @ignore */\\r\\n  isSupportedEyeDrop: boolean;\\r\\n\\r\\n  /** @ignore */\\r\\n  color: NgxColor = new NgxColor();\\r\\n\\r\\n  /** @ignore */\\r\\n  isDisabled = false;\\r\\n  /**@ignore */\\r\\n  private _onChange = (value: string) => {};\\r\\n  /**@ignore */\\r\\n  private _onTouched = () => {};\\r\\n  /**@ignore */\\r\\n  private _onValidateChange = () => {};\\r\\n  constructor(private cd: ChangeDetectorRef) {\\r\\n    this.isSupportedEyeDrop = \'EyeDropper\' in window;\\r\\n  }\\r\\n\\r\\n  /** @ignore */\\r\\n  ngOnInit(): void {}\\r\\n  /** @ignore */\\r\\n  ngOnDestroy(): void {}\\r\\n  public get ColorFormats(): typeof ColorFormats {\\r\\n    return ColorFormats;\\r\\n  }\\r\\n  public get ColorInspector(): typeof ColorInspector {\\r\\n    return ColorInspector;\\r\\n  }\\r\\n  /** @ignore */\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  /** @ignore */\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  /** @ignore */\\r\\n  setDisabledState(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  /** @ignore */\\r\\n  registerOnValidatorChange(fn: () => void): void {\\r\\n    this._onValidateChange = fn;\\r\\n  }\\r\\n  /** @ignore */\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    if (this.color && this.color.isValid === false) {\\r\\n      return { invalid: true };\\r\\n    }\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n  /** @ignore */\\r\\n  writeValue(value: any): void {\\r\\n    try {\\r\\n      const c = value ? new NgxColor(value) : new NgxColor(\'#000\');\\r\\n      this.initColor(c);\\r\\n      this._onValidateChange();\\r\\n    } catch (e) {\\r\\n      const c = new NgxColor(\'#000\'); // مقدار پیش‌فرض\\r\\n      this.initColor(c);\\r\\n    }\\r\\n  }\\r\\n  /** @ignore */\\r\\n  openEyeDrop() {\\r\\n    if (this.isSupportedEyeDrop) {\\r\\n      let t = new EyeDropper().open();\\r\\n      t.then(async (result: { sRGBHex: string }) => {\\r\\n        debugger\\r\\n        this.hexColor = result.sRGBHex;\\r\\n        this.initColor(new NgxColor(this.hexColor));\\r\\n        this.cd.detectChanges();\\r\\n      });\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  call from directive\\r\\n  /* @ignore \\r\\n   */\\r\\n  async initColor(c?: NgxColor) {\\r\\n    if (!c) return;\\r\\n    this.color = c;\\r\\n    this.rgbaColor = this.color.toRgbString();\\r\\n    this.hexColor = this.color.toHexString();\\r\\n    this.isDarkColor = this.color.isDark();\\r\\n    this.name = await this.color.name();\\r\\n    if (this.showConfirmButton == false) {\\r\\n      this.emitChange();\\r\\n    } else {\\r\\n      this.change.emit(this.hexColor);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @ignore */\\r\\n  stopPropagation(ev: Event) {\\r\\n    ev.stopPropagation();\\r\\n  }\\r\\n\\r\\n  /** @ignore */\\r\\n  close() {\\r\\n    this.cancel.emit();\\r\\n  }\\r\\n\\r\\n  /** @ignore */\\r\\n  async ok() {\\r\\n    this.emitChange();\\r\\n    const output = await this.color.getOutputResult(this.outputType);\\r\\n    this.confirm.emit(output);\\r\\n  }\\r\\n  /** @ignore */\\r\\n  async emitChange() {\\r\\n    const output = await this.color.getOutputResult(this.outputType);\\r\\n    this._onChange(output);\\r\\n    this.change.emit(output);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":".ngx-input-color-picker {\\r\\n  width: 270px;\\r\\n  max-width: 100%;\\r\\n  border: 1px #bfbfbf solid;\\r\\n  border-radius: 15px;\\r\\n  background-color: white;\\r\\n  overflow: hidden;\\r\\n  box-shadow: 0px 0px 20px 0px rgb(0 0 0 / 31%);\\r\\n  direction: ltr;\\r\\n  font-family: arial, tahoma;\\r\\n  .inner {\\r\\n    padding: 0 12px 12px;\\r\\n  }\\r\\n  * {\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n  &.simple-mode {\\r\\n    width: 220px;\\r\\n    --ngx-thumb-size: 24px;\\r\\n    .inner {\\r\\n      padding: 12px;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.ngx-color-preview {\\r\\n  min-height: 100px;\\r\\n  padding: 10px 36px;\\r\\n  line-height: 1.6;\\r\\n  font-size: 14px;\\r\\n  font-family: arial, tahoma;\\r\\n  font-weight: 700;\\r\\n  position: relative;\\r\\n  color: #353535;\\r\\n  &.is-dark-color {\\r\\n    color: #ffff;\\r\\n  }\\r\\n  &:after {\\r\\n    content: \' \';\\r\\n    position: absolute;\\r\\n    background-color: white;\\r\\n    bottom: 0;\\r\\n    width: 100%;\\r\\n    left: 0;\\r\\n    right: 0;\\r\\n    height: 15px;\\r\\n    border-radius: 18px 18px 0 0;\\r\\n  }\\r\\n  &::before {\\r\\n    content: \' \';\\r\\n    background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),\\r\\n      linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%),\\r\\n      linear-gradient(-45deg, transparent 75%, #ccc 75%);\\r\\n    background-size: 16px 16px;\\r\\n    background-position: 0 0, 0 8px, 8px -8px, -8px 0px;\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    right: 0;\\r\\n    bottom: 0;\\r\\n    z-index: -1;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/*------ button groups ---------*/\\r\\n.button-groups {\\r\\n  display: flex;\\r\\n  border-radius: 4px;\\r\\n  overflow: hidden;\\r\\n  border: 1px #d3d3d3 solid;\\r\\n\\r\\n  button {\\r\\n    cursor: pointer;\\r\\n    background: #f9f9f9;\\r\\n    outline: none;\\r\\n    border: none;\\r\\n    transition: all 300ms;\\r\\n    border-left: 1px #d3d3d3 solid;\\r\\n    padding: 10px 12px;\\r\\n    flex: auto;\\r\\n    &:hover {\\r\\n      background: #8db6e4;\\r\\n    }\\r\\n    &:first-child {\\r\\n      border-left-width: 0;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.actions {\\r\\n  display: flex;\\r\\n  gap: 10px;\\r\\n  padding: 15px;\\r\\n  justify-content: space-between;\\r\\n  .action-buttons {\\r\\n    display: flex;\\r\\n    gap: 10px;\\r\\n  }\\r\\n  button {\\r\\n    cursor: pointer;\\r\\n    background: #f9f9f9;\\r\\n    outline: none;\\r\\n    transition: all 300ms;\\r\\n    border: 1px #d3d3d3 solid;\\r\\n    padding: 10px 12px;\\r\\n    min-width: 90px;\\r\\n    border-radius: 6px;\\r\\n    &:hover {\\r\\n      background: #8db6e4;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n/*------ button groups ---------*/\\r\\n.ngx-btn-eyedroper {\\r\\n  padding: 2px;\\r\\n  min-width: 0;\\r\\n  width: 45px;\\r\\n  cursor: pointer;\\r\\n  background: #f9f9f9;\\r\\n  outline: none;\\r\\n  transition: all 300ms;\\r\\n  border: 1px #d3d3d3 solid;\\r\\n  border-radius: 6px;\\r\\n  svg {\\r\\n    width: 22px;\\r\\n  }\\r\\n}\\r\\n.top-actions {\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  padding: 0 0 12px;\\r\\n  select {\\r\\n    outline: none;\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    padding: 5px 10px;\\r\\n    background: none;\\r\\n    &:focus {\\r\\n      cursor: pointer;\\r\\n      background: hsl(216, 100%, 95%);\\r\\n      color: hsl(216, 100%, 50%);\\r\\n    }\\r\\n    option {\\r\\n      padding: 10px 20px;\\r\\n      background-color: #fff;\\r\\n      transition: all 300ms;\\r\\n      &:hover {\\r\\n        background: #f0f0f0;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n","styleUrl":"./ngx-input-color.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":95,"jsdoctags":[{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["OnInit","OnDestroy","ControlValueAccessor","Validator"],"accessors":{"ColorFormats":{"name":"ColorFormats","getSignature":{"name":"ColorFormats","type":"","returnType":"","line":104}},"ColorInspector":{"name":"ColorInspector","getSignature":{"name":"ColorInspector","type":"","returnType":"","line":107}}},"templateData":"<div class=\\"ngx-input-color-picker\\" (click)=\\"stopPropagation($event)\\" [class.simple-mode]=\\"simpleMode\\">\\r\\n  <div class=\\"ngx-color-preview\\" [style.background]=\\"rgbaColor\\" [class.is-dark-color]=\\"isDarkColor\\" *ngIf=\\"!simpleMode\\">\\r\\n    <div class=\\"rgbacode\\">{{ rgbaColor | uppercase }}</div>\\r\\n    <div class=\\"hexacode\\">{{ hexColor | uppercase }}</div>\\r\\n    <div class=\\"colorname\\">{{ name }}</div>\\r\\n    <div class=\\"color\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"inner\\">\\r\\n    <div class=\\"top-actions\\">\\r\\n      <select [(ngModel)]=\\"defaultInspector\\">\\r\\n        <option *ngFor=\\"let inspector of ColorInspector | enumToArray\\" [value]=\\"inspector\\">\\r\\n          {{ ColorInspector[+inspector] }}\\r\\n        </option>\\r\\n      </select>\\r\\n\\r\\n      <button type=\\"button\\" (click)=\\"openEyeDrop()\\" class=\\"ngx-btn-eyedroper\\">\\r\\n        <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\\r\\n          <defs>\\r\\n            <style>\\r\\n              .fa-secondary {\\r\\n                opacity: 0.4;\\r\\n              }\\r\\n            </style>\\r\\n          </defs>\\r\\n          <path\\r\\n            class=\\"fa-primary\\"\\r\\n            d=\\"M482.8 29.23C521.7 68.21 521.7 131.4 482.8 170.4L381.2 271.9L390.6 281.4C403.1 293.9 403.1 314.1 390.6 326.6C378.1 339.1 357.9 339.1 345.4 326.6L185.4 166.6C172.9 154.1 172.9 133.9 185.4 121.4C197.9 108.9 218.1 108.9 230.6 121.4L240.1 130.8L341.6 29.23C380.6-9.744 443.8-9.744 482.8 29.23L482.8 29.23zM132.1 416H96V379.9C96 375.6 97.69 371.6 100.7 368.6L149.3 320H234.7L143.4 411.3C140.4 414.3 136.4 416 132.1 416H132.1z\\" />\\r\\n          <path\\r\\n            class=\\"fa-secondary\\"\\r\\n            d=\\"M244 225.3L100.7 368.6C97.69 371.6 96 375.6 96 379.9V416H132.1C136.4 416 140.4 414.3 143.4 411.3L286.7 268L332 313.3L188.7 456.6C173.7 471.6 153.3 480 132.1 480H89.69L49.75 506.6C37.06 515.1 20.16 513.4 9.372 502.6C-1.414 491.8-3.087 474.9 5.374 462.2L32 422.3V379.9C32 358.7 40.43 338.3 55.43 323.3L198.7 180L244 225.3z\\" />\\r\\n        </svg>\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <ng-container [ngSwitch]=\\"+defaultInspector\\">\\r\\n      <app-picker\\r\\n        *ngSwitchCase=\\"ColorInspector.Picker\\"\\r\\n        [color]=\\"color\\"\\r\\n        (colorChange)=\\"initColor($event)\\"\\r\\n        [simpleMode]=\\"simpleMode\\"></app-picker>\\r\\n      <app-hsl *ngSwitchCase=\\"ColorInspector.HSL\\" [color]=\\"color\\" (colorChange)=\\"initColor($event)\\"></app-hsl>\\r\\n      <app-rgb *ngSwitchCase=\\"ColorInspector.RGB\\" [color]=\\"color\\" (colorChange)=\\"initColor($event)\\"></app-rgb>\\r\\n      <app-cmyk *ngSwitchCase=\\"ColorInspector.CMYK\\" [color]=\\"color\\" (colorChange)=\\"initColor($event)\\"></app-cmyk>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\"actions\\" *ngIf=\\"showCloseButton || showConfirmButton\\">\\r\\n    <div class=\\"action-buttons\\">\\r\\n      <button (click)=\\"close()\\" *ngIf=\\"showCloseButton\\">{{ closeTitle }}</button>\\r\\n      <button (click)=\\"ok()\\" *ngIf=\\"showConfirmButton\\">{{ confirmTitle }}</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n"},{"name":"NgxInputGradientComponent","id":"component-NgxInputGradientComponent-92442868204573f5eba1ce1ea4f615b31d5ea2563c4cf604a44943428e9f7dc0c8478e7accdd3f52d09ada66cbc082b042c42b10f04c4196a3c45e5d36c7ee3d","file":"projects/ngx-input-color/src/lib/ngx-input-gradient/ngx-input-gradient.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputGradientComponent), multi: true }","type":"component"},{"name":"{\\n    provide: NG_VALIDATORS, multi: true, useExisting: NgxInputGradientComponent,\\n}","type":"component"}],"selector":"ngx-input-gradient","styleUrls":["./ngx-input-gradient.component.scss"],"styles":[],"templateUrl":["./ngx-input-gradient.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"closeTitle","defaultValue":"\'Close\'","deprecated":false,"deprecationMessage":"","line":46,"type":"string","decorators":[]},{"name":"confirmTitle","defaultValue":"\'Ok\'","deprecated":false,"deprecationMessage":"","line":47,"type":"string","decorators":[]},{"name":"showCloseButton","defaultValue":"true","deprecated":false,"deprecationMessage":"","line":48,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"cancel","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","line":52,"type":"EventEmitter"},{"name":"change","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":50,"type":"EventEmitter"},{"name":"confirm","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":51,"type":"EventEmitter"}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":65},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":66},{"name":"_onValidateChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":67},{"name":"baseBg","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":57},{"name":"defaultGradients","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"string[]","indexKey":"","optional":false,"description":"","line":54},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":64},{"name":"rangeSlider","deprecated":false,"deprecationMessage":"","type":"RangeSliderComponent","indexKey":"","optional":true,"description":"","line":69,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'rangeSlider\', {static: true}"}],"modifierKind":[170]},{"name":"rangeValues","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"GradientStop[]","indexKey":"","optional":false,"description":"","line":58},{"name":"resultGradient","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":56},{"name":"rotation","defaultValue":"90","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":60},{"name":"rotationList","defaultValue":"[0, 45, 90, 135, 180, 225, 270, 315, 360]","deprecated":false,"deprecationMessage":"","type":"[]","indexKey":"","optional":false,"description":"","line":61},{"name":"selectedIndex","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":62},{"name":"type","defaultValue":"\'linear\'","deprecated":false,"deprecationMessage":"","type":"GradientType","indexKey":"","optional":false,"description":"","line":59}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":134,"deprecated":false,"deprecationMessage":""},{"name":"emitChange","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":169,"deprecated":false,"deprecationMessage":""},{"name":"generateGradient","args":[{"name":"ev","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"generateId","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":126,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":75,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":72,"deprecated":false,"deprecationMessage":""},{"name":"ok","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":138,"deprecated":false,"deprecationMessage":""},{"name":"onSelectDefault","args":[{"name":"item","type":"string","deprecated":false,"deprecationMessage":""},{"name":"i","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":183,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"item","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"i","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":79,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":85,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"remove","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":145,"deprecated":false,"deprecationMessage":""},{"name":"setDefaultGradients","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":175,"deprecated":false,"deprecationMessage":""},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":82,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"stopPropagation","args":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":141,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"Event","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateRangeSlider","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":164,"deprecated":false,"deprecationMessage":""},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":88,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":98,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":true,"imports":[{"name":"CommonModule","type":"module"},{"name":"FormsModule","type":"module"},{"name":"NgxInputColorModule","type":"module"},{"name":"RangeSliderComponent","type":"component"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  EventEmitter,\\r\\n  forwardRef,\\r\\n  Input,\\r\\n  OnDestroy,\\r\\n  OnInit,\\r\\n  Output,\\r\\n  ViewChild,\\r\\n} from \'@angular/core\';\\r\\nimport {\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  NG_VALIDATORS,\\r\\n  ControlValueAccessor,\\r\\n  Validator,\\r\\n  AbstractControl,\\r\\n  ValidationErrors,\\r\\n  FormsModule,\\r\\n} from \'@angular/forms\';\\r\\nimport { RangeSliderComponent } from \'../../range-slider/range-slider.component\';\\r\\nimport { NgxInputColorModule } from \'../../ngx-input-color.module\';\\r\\nimport { GradientStop, GradientType } from \'../../models/GradientStop\';\\r\\nimport { buildGradientFromStops, generateRandomColor, isValidGradient, parseGradient } from \'../../utils/build-gradient\';\\r\\nimport { DefaultGradients } from \'./default-gradients\';\\r\\n\\r\\n@Component({\\r\\n  standalone: true,\\r\\n  selector: \'ngx-input-gradient\',\\r\\n  templateUrl: \'./ngx-input-gradient.component.html\',\\r\\n  styleUrls: [\'./ngx-input-gradient.component.scss\'],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxInputGradientComponent), multi: true },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      multi: true,\\r\\n      useExisting: NgxInputGradientComponent,\\r\\n    },\\r\\n  ],\\r\\n  imports: [CommonModule, FormsModule, NgxInputColorModule, RangeSliderComponent],\\r\\n})\\r\\nexport class NgxInputGradientComponent implements OnInit, OnDestroy, ControlValueAccessor, Validator {\\r\\n  @Input() closeTitle = \'Close\';\\r\\n  @Input() confirmTitle = \'Ok\';\\r\\n  @Input() showCloseButton = true;\\r\\n\\r\\n  @Output() change = new EventEmitter<string>();\\r\\n  @Output() confirm = new EventEmitter<string>();\\r\\n  @Output() cancel = new EventEmitter<void>();\\r\\n\\r\\n  defaultGradients: string[] = [];\\r\\n\\r\\n  resultGradient = \'\';\\r\\n  baseBg = \'\';\\r\\n  rangeValues: GradientStop[] = [];\\r\\n  type: GradientType = \'linear\';\\r\\n  rotation: number = 90;\\r\\n  rotationList = [0, 45, 90, 135, 180, 225, 270, 315, 360];\\r\\n  selectedIndex = 0;\\r\\n\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: string) => {};\\r\\n  _onTouched = () => {};\\r\\n  _onValidateChange = () => {};\\r\\n\\r\\n  @ViewChild(\'rangeSlider\', { static: true }) rangeSlider?: RangeSliderComponent;\\r\\n  constructor(private cd: ChangeDetectorRef) {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.setDefaultGradients();\\r\\n  }\\r\\n  ngOnDestroy(): void {}\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  registerOnValidatorChange(fn: () => void): void {\\r\\n    this._onValidateChange = fn;\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    if (!this.resultGradient) return { required: true };\\r\\n    const parsed = parseGradient(this.resultGradient);\\r\\n    if (!parsed.valid) return { invalid: true };\\r\\n    if (parsed.stops.length < 2) return { stops: \'at least 2 color stops required\' };\\r\\n    return null;\\r\\n  }\\r\\n\\r\\n \\r\\n\\r\\n  writeValue(value: any): void {\\r\\n    if (value && isValidGradient(value)) {\\r\\n      const parsed = parseGradient(value);\\r\\n      if (parsed.valid) {\\r\\n        this.resultGradient = value;\\r\\n        this.type = parsed.type;\\r\\n        this.rotation = parsed.rotation;\\r\\n        this.rangeValues = parsed.stops;\\r\\n      } else {\\r\\n        this.resultGradient = \'\';\\r\\n        this.rangeValues = [\\r\\n          { color: generateRandomColor(), value: 0, id: this.generateId() },\\r\\n          { color: generateRandomColor(), value: 100, id: this.generateId() },\\r\\n        ];\\r\\n        this.type = \'linear\';\\r\\n        this.rotation = 90;\\r\\n      }\\r\\n    } else {\\r\\n      this.resultGradient = \'\';\\r\\n      this.rangeValues = [\\r\\n        { color: generateRandomColor(), value: 0, id: this.generateId() },\\r\\n        { color: generateRandomColor(), value: 100, id: this.generateId() },\\r\\n      ];\\r\\n      this.type = \'linear\';\\r\\n      this.rotation = 90;\\r\\n    }\\r\\n    this.generateGradient();\\r\\n  }\\r\\n  private generateId(): string {\\r\\n    let id = \'ngx-thumb-\' + Math.random().toString(36).substring(2, 9);\\r\\n    if (this.rangeValues.findIndex((x) => x.id == id) >= 0) {\\r\\n      return this.generateId();\\r\\n    }\\r\\n    return id;\\r\\n  }\\r\\n\\r\\n  close() {\\r\\n    this.cancel.emit();\\r\\n  }\\r\\n\\r\\n  ok() {\\r\\n    this.emitChange();\\r\\n  }\\r\\n  stopPropagation(ev: Event) {\\r\\n    ev.stopPropagation();\\r\\n  }\\r\\n\\r\\n  remove() {\\r\\n    if (this.rangeValues.length > 2) {\\r\\n      this.rangeValues.splice(this.selectedIndex, 1);\\r\\n      this.selectedIndex = 0;\\r\\n      this.generateGradient();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  generateGradient(ev?: string) {\\r\\n    if (ev && this.rangeValues[this.selectedIndex]) {\\r\\n      this.rangeValues[this.selectedIndex].color = ev;\\r\\n    }\\r\\n    for (let item of this.rangeValues) {\\r\\n      item.color ??= generateRandomColor();\\r\\n    }\\r\\n    this.baseBg = buildGradientFromStops(this.rangeValues, \'linear\', 90);\\r\\n    this.resultGradient = buildGradientFromStops(this.rangeValues, this.type, this.rotation);\\r\\n  }\\r\\n\\r\\n  updateRangeSlider() {\\r\\n    if (this.rangeSlider) {\\r\\n      this.rangeSlider.writeValue(this.rangeValues);\\r\\n    }\\r\\n  }\\r\\n  emitChange() {\\r\\n    this._onChange(this.resultGradient);\\r\\n    this.change.emit(this.resultGradient);\\r\\n    this.confirm.emit(this.resultGradient);\\r\\n  }\\r\\n\\r\\n  setDefaultGradients() {\\r\\n    this.defaultGradients = [];\\r\\n\\r\\n    for (let item of DefaultGradients) {\\r\\n      this.defaultGradients.push(buildGradientFromStops(item, \'linear\', 90));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  onSelectDefault(item: string, i: number) {\\r\\n    console.log(\'onSelectDefault\', item, i);\\r\\n    this.writeValue(item);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":".ngx-input-gradient-picker {\\r\\n  width: 270px;\\r\\n  max-width: 100%;\\r\\n  border: 1px #bfbfbf solid;\\r\\n  border-radius: 15px;\\r\\n  background-color: white;\\r\\n  overflow: hidden;\\r\\n  box-shadow: 0px 0px 20px 0px rgb(0 0 0 / 31%);\\r\\n  direction: ltr;\\r\\n  font-family: arial, tahoma;\\r\\n  .inner {\\r\\n    padding: 0 12px 12px;\\r\\n  }\\r\\n  * {\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n}\\r\\n\\r\\n.ngx-color-preview {\\r\\n  min-height: 100px;\\r\\n  padding: 10px 36px;\\r\\n  line-height: 1.6;\\r\\n  font-size: 14px;\\r\\n  font-family: arial, tahoma;\\r\\n  font-weight: 700;\\r\\n  position: relative;\\r\\n  color: #353535;\\r\\n\\r\\n  &:after {\\r\\n    content: \' \';\\r\\n    position: absolute;\\r\\n    background-color: white;\\r\\n    bottom: 0;\\r\\n    width: 100%;\\r\\n    left: 0;\\r\\n    right: 0;\\r\\n    height: 15px;\\r\\n    border-radius: 18px 18px 0 0;\\r\\n  }\\r\\n  &::before {\\r\\n    content: \' \';\\r\\n    background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),\\r\\n      linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%),\\r\\n      linear-gradient(-45deg, transparent 75%, #ccc 75%);\\r\\n    background-size: 16px 16px;\\r\\n    background-position: 0 0, 0 8px, 8px -8px, -8px 0px;\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    right: 0;\\r\\n    bottom: 0;\\r\\n    z-index: -1;\\r\\n  }\\r\\n}\\r\\n\\r\\n/*------ button groups ---------*/\\r\\n.button-groups {\\r\\n  display: flex;\\r\\n  border-radius: 4px;\\r\\n  overflow: hidden;\\r\\n  border: 1px #d3d3d3 solid;\\r\\n\\r\\n  button {\\r\\n    cursor: pointer;\\r\\n    background: #f9f9f9;\\r\\n    outline: none;\\r\\n    border: none;\\r\\n    transition: all 300ms;\\r\\n    border-left: 1px #d3d3d3 solid;\\r\\n    padding: 10px 12px;\\r\\n    flex: auto;\\r\\n    &:hover {\\r\\n      background: #8db6e4;\\r\\n    }\\r\\n    &:first-child {\\r\\n      border-left-width: 0;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.actions {\\r\\n  display: flex;\\r\\n  gap: 10px;\\r\\n  padding: 0 15px 15px;\\r\\n  justify-content: space-between;\\r\\n  .action-buttons {\\r\\n    display: flex;\\r\\n    gap: 10px;\\r\\n  }\\r\\n  button {\\r\\n    cursor: pointer;\\r\\n    background: #f9f9f9;\\r\\n    outline: none;\\r\\n    transition: all 300ms;\\r\\n    border: 1px #d3d3d3 solid;\\r\\n    padding: 10px 12px;\\r\\n    min-width: 90px;\\r\\n    border-radius: 6px;\\r\\n    &:hover {\\r\\n      background: #8db6e4;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n/*------ button groups ---------*/\\r\\n\\r\\n.ngx-row {\\r\\n  display: flex;\\r\\n  flex-wrap: wrap;\\r\\n  gap: 12px;\\r\\n  .ngx-col-6 {\\r\\n    width: 47%;\\r\\n  }\\r\\n\\r\\n  .input-color {\\r\\n    position: relative;\\r\\n    input {\\r\\n      padding-right: 26px;\\r\\n    }\\r\\n    .color {\\r\\n      position: absolute;\\r\\n      top: 4px;\\r\\n      right: 5px;\\r\\n      cursor: pointer;\\r\\n      display: inline-block;\\r\\n      width: 24px;\\r\\n      height: 24px;\\r\\n      border-radius: 4px;\\r\\n      border: 1px solid #ccc;\\r\\n      transition: all 300ms;\\r\\n      &:hover {\\r\\n        border-color: #8db6e4;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  select,\\r\\n  input {\\r\\n    outline: none;\\r\\n    border: 1px solid #ececec;\\r\\n    border-radius: 4px;\\r\\n    padding: 8px 10px;\\r\\n    background: none;\\r\\n    width: 100%;\\r\\n    &:focus {\\r\\n      cursor: pointer;\\r\\n      background: hsl(216, 100%, 95%);\\r\\n      color: hsl(216, 100%, 50%);\\r\\n    }\\r\\n    option {\\r\\n      padding: 10px 20px;\\r\\n      background-color: #fff;\\r\\n      transition: all 300ms;\\r\\n      &:hover {\\r\\n        background: #f0f0f0;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.text-end {\\r\\n  text-align: end;\\r\\n}\\r\\n.remove-btn {\\r\\n  background: none;\\r\\n  border: none;\\r\\n  outline: none;\\r\\n  color: #0077ff;\\r\\n  transition: color 300ms;\\r\\n  &:hover {\\r\\n    color: #0462cc;\\r\\n  }\\r\\n}\\r\\n\\r\\n.default-list {\\r\\n  display: flex;\\r\\n  gap: 6px;\\r\\n  flex-wrap: wrap;\\r\\n  margin: 16px 0;\\r\\n  span {\\r\\n    width: 36px;\\r\\n    height: 26px;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n    transition: transform 300ms;\\r\\n    &:hover {\\r\\n      transform: scale(1.2);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","styleUrl":"./ngx-input-gradient.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":69,"jsdoctags":[{"name":"cd","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["OnInit","OnDestroy","ControlValueAccessor","Validator"],"templateData":"<div class=\\"ngx-input-gradient-picker\\" (click)=\\"stopPropagation($event)\\">\\r\\n  <div class=\\"ngx-color-preview\\" [style.background]=\\"resultGradient\\"></div>\\r\\n  <div class=\\"inner\\">\\r\\n    <range-slider\\r\\n      [(ngModel)]=\\"rangeValues\\"\\r\\n      [min]=\\"0\\"\\r\\n      [max]=\\"100\\"\\r\\n      [step]=\\"1\\"\\r\\n      [addNewRangeOnClick]=\\"true\\"\\r\\n      [background]=\\"baseBg\\"\\r\\n      [(selectedIndex)]=\\"selectedIndex\\"\\r\\n      (change)=\\"generateGradient()\\"\\r\\n      #rangeSlider></range-slider>\\r\\n\\r\\n    <div class=\\"text-end\\">\\r\\n      <button class=\\"remove-btn\\" type=\\"button\\" (click)=\\"remove()\\">remove</button>\\r\\n    </div>\\r\\n    <div class=\\"ngx-row\\" *ngIf=\\"rangeValues[selectedIndex]\\">\\r\\n      <div class=\\"ngx-input-group ngx-col-6\\">\\r\\n        <div class=\\"label\\">Color</div>\\r\\n        <div class=\\"input-color\\">\\r\\n          <input\\r\\n            type=\\"text\\"\\r\\n            [(ngModel)]=\\"rangeValues[selectedIndex].color\\"\\r\\n            name=\\"color\\"\\r\\n            #ngxGradColor\\r\\n            (ngModelChange)=\\"generateGradient()\\" />\\r\\n          <span\\r\\n            class=\\"color\\"\\r\\n            [style.backgroundColor]=\\"rangeValues[selectedIndex].color\\"\\r\\n            [ngxInputColor]=\\"ngxGradColor\\"\\r\\n            [showCloseButton]=\\"false\\"\\r\\n            [showConfirmButton]=\\"false\\"\\r\\n            [simpleMode]=\\"true\\"\\r\\n            (change)=\\"generateGradient($event)\\"></span>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\"ngx-col-6\\">\\r\\n        <div class=\\"label\\">Position</div>\\r\\n        <input\\r\\n          type=\\"number\\"\\r\\n          [(ngModel)]=\\"rangeValues[selectedIndex].value\\"\\r\\n          min=\\"0\\"\\r\\n          max=\\"100\\"\\r\\n          name=\\"posiition\\"\\r\\n          (change)=\\"generateGradient(); updateRangeSlider()\\" />\\r\\n      </div>\\r\\n      <div class=\\"ngx-col-6\\">\\r\\n        <div class=\\"label\\">Rotation</div>\\r\\n        <select [(ngModel)]=\\"rotation\\" (change)=\\"generateGradient()\\" name=\\"rotation\\">\\r\\n          <option [value]=\\"item\\" *ngFor=\\"let item of rotationList\\">{{ item + \'°\' }}</option>\\r\\n        </select>\\r\\n      </div>\\r\\n      <div class=\\"ngx-col-6\\">\\r\\n        <div class=\\"label\\">Type</div>\\r\\n        <select [(ngModel)]=\\"type\\" (change)=\\"generateGradient()\\" name=\\"type\\">\\r\\n          <option value=\\"linear\\">linear</option>\\r\\n          <option value=\\"radial\\">radial</option>\\r\\n        </select>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\"default-list\\">\\r\\n      <span\\r\\n        *ngFor=\\"let item of defaultGradients; let i = index\\"\\r\\n        [style.background]=\\"item\\"\\r\\n        (click)=\\"onSelectDefault(item, i)\\"></span>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\"actions\\">\\r\\n    <div class=\\"action-buttons\\">\\r\\n      <button (click)=\\"close()\\" *ngIf=\\"showCloseButton\\">{{ closeTitle }}</button>\\r\\n      <button (click)=\\"ok()\\">{{ confirmTitle }}</button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n"},{"name":"PickerComponent","id":"component-PickerComponent-5074f5ca977b76fcfbbd99663361e3659b5823362872216393809648483fe5abb1c51b5a90c801f310519639cb200b2f2fce3dd1f4f5e030c48d6ec048df53fe","file":"projects/ngx-input-color/src/lib/inspectors/picker/picker.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-picker","styleUrls":["./picker.component.scss"],"styles":[],"templateUrl":["./picker.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","deprecated":false,"deprecationMessage":"","line":21,"type":"NgxColor","decorators":[]},{"name":"simpleMode","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":19,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"colorChange","defaultValue":"new EventEmitter<NgxColor | undefined>()","deprecated":false,"deprecationMessage":"","line":32,"type":"EventEmitter"}],"propertiesClass":[{"name":"alpha","defaultValue":"1","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":17},{"name":"alphaBgColor","defaultValue":"\'#000\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":14},{"name":"baseColor","defaultValue":"\'rgb(0,0,0)\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":13},{"name":"board","defaultValue":"{ x: 1, y: 0 }","deprecated":false,"deprecationMessage":"","type":"IPosition","indexKey":"","optional":false,"description":"","line":16},{"name":"hue","defaultValue":"300","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":12},{"name":"inputColor","deprecated":false,"deprecationMessage":"","type":"NgxColor","indexKey":"","optional":true,"description":"","line":18,"modifierKind":[123]}],"methodsClass":[{"name":"generateColor","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":36,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, EventEmitter, Input, OnInit, Output } from \'@angular/core\';\\r\\nimport { NgxColor } from \'../../../utils/color-helper\';\\r\\nimport { IPosition } from \'../../../models/IPosition\';\\r\\nimport { HSVA } from \'../../../utils/interfaces\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-picker\',\\r\\n  templateUrl: \'./picker.component.html\',\\r\\n  styleUrls: [\'./picker.component.scss\'],\\r\\n})\\r\\nexport class PickerComponent implements OnInit {\\r\\n  hue = 300;\\r\\n  baseColor = \'rgb(0,0,0)\';\\r\\n  alphaBgColor = \'#000\';\\r\\n\\r\\n  board: IPosition = { x: 1, y: 0 };\\r\\n  alpha = 1;\\r\\n  private inputColor?: NgxColor;\\r\\n  @Input() simpleMode = false;\\r\\n\\r\\n  @Input() set color(c: NgxColor) {\\r\\n    if (c.equals(this.inputColor)) return;\\r\\n    this.inputColor = c;\\r\\n    const shva = c.toHsv();\\r\\n    this.hue = shva.h;\\r\\n    this.board = { x: shva.s, y: 100 - shva.v };\\r\\n    this.alpha = shva.a ?? 1;\\r\\n    const pureColor = new NgxColor({ h: this.hue, s: 100, v: 100, a: 1 });\\r\\n    this.baseColor = pureColor.toHexString(false);\\r\\n    this.alphaBgColor = this.inputColor.toHexString(false);\\r\\n  }\\r\\n  @Output() colorChange = new EventEmitter<NgxColor | undefined>();\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit() {}\\r\\n\\r\\n  generateColor() {\\r\\n    try {\\r\\n      const hsva: HSVA = { h: this.hue, s: this.board.x, v: 100 - this.board.y, a: this.alpha };\\r\\n      const color = new NgxColor(hsva);\\r\\n      const pureColor = new NgxColor({ h: this.hue, s: 100, v: 100, a: 1 });\\r\\n      this.baseColor = pureColor.toHexString(false);\\r\\n      this.alphaBgColor = color.toHexString(false);\\r\\n\\r\\n      if (color.equals(this.inputColor) == false) {\\r\\n        this.inputColor = color;\\r\\n        this.colorChange.emit(color);\\r\\n      }\\r\\n    } catch (error) {\\r\\n      this.colorChange.emit(undefined);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":"  .color-sliders {\\r\\n    display: flex;\\r\\n    gap: 5px;\\r\\n    .sliders {\\r\\n      flex: 1;\\r\\n    }\\r\\n  }","styleUrl":"./picker.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":32},"extends":[],"implements":["OnInit"],"accessors":{"color":{"name":"color","setSignature":{"name":"color","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":21,"jsdoctags":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"templateData":"<saturation\\r\\n  [height]=\\"simpleMode ? 150 : 160\\"\\r\\n  [(ngModel)]=\\"board\\"\\r\\n  [min]=\\"{ x: 0, y: 0 }\\"\\r\\n  [max]=\\"{ x: 100, y: 100 }\\"\\r\\n  [step]=\\"1\\"\\r\\n  [color]=\\"baseColor\\"\\r\\n  (change)=\\"generateColor()\\"></saturation>\\r\\n<slider\\r\\n  [(ngModel)]=\\"hue\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"360\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  background=\\"linear-gradient(to right,red 0%,#ff0 17%,lime 33%,cyan 50%,blue 66%,#f0f 83%,red 100%)\\"></slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"alpha\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"1\\"\\r\\n  [step]=\\"0.1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [isBgTransparent]=\\"true\\"\\r\\n  [background]=\\"\'linear-gradient(to right,transparent,\' + alphaBgColor + \')\'\\"></slider>\\r\\n"},{"name":"RangeSliderComponent","id":"component-RangeSliderComponent-91b64cbc65de4ad0080e8aef7602ab3a65cec14c607a9ad13375caacb6444c45183f3bc940fcc1e3a6015538066d39b9b887c541f3d85e15aa6a556c71d1f9b7","file":"projects/ngx-input-color/src/range-slider/range-slider.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RangeSliderComponent), multi: true,\\n}","type":"component"},{"name":"{\\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => RangeSliderComponent), multi: true,\\n}","type":"component"}],"selector":"range-slider","styleUrls":["./range-slider.component.scss"],"styles":[],"templateUrl":["./range-slider.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"addNewRangeOnClick","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIf true, clicking on the slider will add a new range at that position\\n","description":"<p>If true, clicking on the slider will add a new range at that position</p>\\n","line":84,"type":"boolean","decorators":[]},{"name":"background","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe background color of the slider\\n- can use css like `background: linear-gradient(to right, red, blue);`\\n- or a solid color like `background: red;`\\n","description":"<p>The background color of the slider</p>\\n<ul>\\n<li>can use css like <code>background: linear-gradient(to right, red, blue);</code></li>\\n<li>or a solid color like <code>background: red;</code></li>\\n</ul>\\n","line":76,"type":"string","decorators":[]},{"name":"isBgTransparent","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIf true, the background will be transparent\\n","description":"<p>If true, the background will be transparent</p>\\n","line":80,"type":"boolean","decorators":[]},{"name":"max","defaultValue":"100","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe maximum value for the slider\\n","description":"<p>The maximum value for the slider</p>\\n","line":70,"type":"number","decorators":[]},{"name":"min","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe minimum value for the slider\\n","description":"<p>The minimum value for the slider</p>\\n","line":66,"type":"number","decorators":[]},{"name":"selectedIndex","deprecated":false,"deprecationMessage":"","line":90,"type":"number","decorators":[]},{"name":"step","defaultValue":"1","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe step value for the slider\\n","description":"<p>The step value for the slider</p>\\n","line":62,"type":"number","decorators":[]}],"outputsClass":[{"name":"change","defaultValue":"new EventEmitter<IValue[]>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe current value of the slider\\n","description":"<p>The current value of the slider</p>\\n","line":89,"type":"EventEmitter"},{"name":"selectedIndexChange","defaultValue":"new EventEmitter<number>()","deprecated":false,"deprecationMessage":"","line":91,"type":"EventEmitter"}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":100},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":101},{"name":"_validatorOnChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":102},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":99},{"name":"isDragging","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":93,"modifierKind":[123]},{"name":"slider","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":95,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'slider\', {static: true}"}],"modifierKind":[170]},{"name":"sliderRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":103,"modifierKind":[123]},{"name":"thumb","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":true,"description":"","line":96,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'thumb\', {static: false}"}],"modifierKind":[170]},{"name":"thumbRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":104,"modifierKind":[123]},{"name":"values","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"ValueModel[]","indexKey":"","optional":false,"description":"","line":98}],"methodsClass":[{"name":"addnewRangeOnSliderClick","args":[{"name":"event","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":183,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"event","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"dragStart","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""},{"name":"index","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":173,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"index","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"generateId","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":109,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":107,"deprecated":false,"deprecationMessage":""},{"name":"onDrag","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":164,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mousemove\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchmove\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onDragEnd","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":243,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mouseup\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchend\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onResize","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":170,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\', [\'$event\']"}],"modifierKind":[170]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":147,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":150,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":true,"returnType":"void","typeParameters":[],"line":143,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":true,"returnType":"void","typeParameters":[],"line":153,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setValueByPosition","args":[{"name":"thumb","type":"ValueModel","deprecated":false,"deprecationMessage":""},{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":""},{"name":"sliderRec","type":"DOMRect","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":229,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"thumb","type":"ValueModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"sliderRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateAllThumbPositions","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":217,"deprecated":false,"deprecationMessage":""},{"name":"updateRects","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":156,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"updateThumbPosition","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":199,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":140,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"valueChanged","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":248,"deprecated":false,"deprecationMessage":""},{"name":"writeValue","args":[{"name":"items","type":"IValue[]","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":117,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"items","type":"IValue[]","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"document:mousemove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":164},{"name":"document:mouseup","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":243},{"name":"document:touchend","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":243},{"name":"document:touchmove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":164},{"name":"window:resize","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":170}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  ChangeDetectionStrategy,\\r\\n  ChangeDetectorRef,\\r\\n  Component,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  HostListener,\\r\\n  Input,\\r\\n  Output,\\r\\n  ViewChild,\\r\\n  forwardRef,\\r\\n  type OnInit,\\r\\n} from \'@angular/core\';\\r\\nimport { getOffsetPosition } from \'../utils/get-offset-position\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n  Validators,\\r\\n} from \'@angular/forms\';\\r\\n\\r\\nexport interface IValue {\\r\\n  id?: string;\\r\\n  value: number;\\r\\n}\\r\\nexport class ValueModel {\\r\\n  id!: string;\\r\\n  value!: number;\\r\\n  x?: number;\\r\\n  thumb?: HTMLElement;\\r\\n  color?: string;\\r\\n}\\r\\n\\r\\n@Component({\\r\\n  selector: \'range-slider\',\\r\\n  standalone: true,\\r\\n  imports: [CommonModule],\\r\\n  templateUrl: \'./range-slider.component.html\',\\r\\n  styleUrls: [\'./range-slider.component.scss\'],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => RangeSliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      useExisting: forwardRef(() => RangeSliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class RangeSliderComponent implements OnInit, ControlValueAccessor, Validator {\\r\\n  /**\\r\\n   * The step value for the slider\\r\\n   */\\r\\n  @Input() step = 1;\\r\\n  /**\\r\\n   * The minimum value for the slider\\r\\n   */\\r\\n  @Input() min = 0;\\r\\n  /**\\r\\n   * The maximum value for the slider\\r\\n   */\\r\\n  @Input() max = 100;\\r\\n  /**\\r\\n   * The background color of the slider\\r\\n   * - can use css like `background: linear-gradient(to right, red, blue);`\\r\\n   * - or a solid color like `background: red;`\\r\\n   */\\r\\n  @Input() background?: string;\\r\\n  /**\\r\\n   * If true, the background will be transparent\\r\\n   */\\r\\n  @Input() isBgTransparent = false;\\r\\n  /**\\r\\n   * If true, clicking on the slider will add a new range at that position\\r\\n   */\\r\\n  @Input() addNewRangeOnClick = false;\\r\\n\\r\\n  /**\\r\\n   * The current value of the slider\\r\\n   */\\r\\n  @Output() change = new EventEmitter<IValue[]>();\\r\\n  @Input() selectedIndex?: number;\\r\\n  @Output() selectedIndexChange = new EventEmitter<number>();\\r\\n\\r\\n  private isDragging = false;\\r\\n\\r\\n  @ViewChild(\'slider\', { static: true }) slider!: ElementRef<HTMLDivElement>;\\r\\n  @ViewChild(\'thumb\', { static: false }) thumb?: ElementRef<HTMLDivElement>;\\r\\n\\r\\n  values: ValueModel[] = [];\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: IValue[]) => {};\\r\\n  _onTouched = () => {};\\r\\n  _validatorOnChange = () => {};\\r\\n  private sliderRect?: DOMRect;\\r\\n  private thumbRect?: DOMRect;\\r\\n\\r\\n  constructor(private changeDetectorRef: ChangeDetectorRef) {}\\r\\n  ngOnInit(): void {}\\r\\n\\r\\n  private generateId(): string {\\r\\n    let id = \'ngx-thumb-\' + Math.random().toString(36).substring(2, 9);\\r\\n    if (this.values.findIndex((x) => x.id == id) >= 0) {\\r\\n      return this.generateId();\\r\\n    }\\r\\n    return id;\\r\\n  }\\r\\n\\r\\n  writeValue(items?: IValue[]): void {\\r\\n    this.values = [];\\r\\n    if (!items || !Array.isArray(items)) {\\r\\n      items = [];\\r\\n    }\\r\\n    if (items.length === 0) {\\r\\n      items.push({ id: this.generateId(), value: this.min });\\r\\n    }\\r\\n    for (let val of items) {\\r\\n      if (typeof val.value !== \'number\' || isNaN(val.value)) {\\r\\n        throw new Error(\'RangeSliderComponent: value must be an array of numbers\');\\r\\n      }\\r\\n      let newVal = +val.value;\\r\\n      if (newVal < +this.min) newVal = +this.min;\\r\\n      else if (newVal > +this.max) newVal = +this.max;\\r\\n      this.values.push({\\r\\n        ...val,\\r\\n        id: val.id ?? this.generateId(),\\r\\n        value: newVal,\\r\\n      });\\r\\n    }\\r\\n    this.updateAllThumbPositions();\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return null; // TODO: return errors if any;\\r\\n  }\\r\\n  registerOnValidatorChange?(fn: () => void): void {\\r\\n    this._validatorOnChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState?(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n  }\\r\\n  private updateRects() {\\r\\n    this.sliderRect = this.slider.nativeElement.getBoundingClientRect();\\r\\n    if (this.thumb) {\\r\\n      this.thumbRect = this.thumb.nativeElement.getBoundingClientRect();\\r\\n    }\\r\\n  }\\r\\n  @HostListener(\'document:mousemove\', [\'$event\'])\\r\\n  @HostListener(\'document:touchmove\', [\'$event\'])\\r\\n  onDrag(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    this.updateThumbPosition(ev);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  onResize() {\\r\\n    this.writeValue(this.values);\\r\\n  }\\r\\n  dragStart(ev: MouseEvent | TouchEvent, index: number) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.isDragging = true;\\r\\n    this.selectedIndex = index;\\r\\n    this.updateRects();\\r\\n    this.updateThumbPosition(ev);\\r\\n    this.selectedIndexChange.emit(this.selectedIndex);\\r\\n  }\\r\\n\\r\\n  addnewRangeOnSliderClick(event: MouseEvent | TouchEvent) {\\r\\n    if (!this.addNewRangeOnClick) return;\\r\\n    const position = getOffsetPosition(event, this.slider.nativeElement);\\r\\n    const newValue = this.min + (position.x / this.sliderRect!.width) * (this.max - this.min);\\r\\n    // must be add with order by position\\r\\n    const indexByOrderValue = this.values.findIndex((item) => item.value > newValue);\\r\\n    const insertIndex = indexByOrderValue >= 0 ? indexByOrderValue : this.values.length;\\r\\n    this.values.splice(insertIndex, 0, {\\r\\n      id: this.generateId(),\\r\\n      value: newValue,\\r\\n    });\\r\\n    this.dragStart(event, insertIndex);\\r\\n    // this.updateAllThumbPositions();\\r\\n    // this.valueChanged();\\r\\n  }\\r\\n\\r\\n  private updateThumbPosition(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging || this.selectedIndex == undefined) return;\\r\\n    if (!this.sliderRect || !this.thumbRect) this.updateRects();\\r\\n    let position = getOffsetPosition(ev, this.slider.nativeElement);\\r\\n    let thumbRec = this.thumbRect!;\\r\\n    position.x -= thumbRec.width / 2;\\r\\n    let sliderRec = this.sliderRect!;\\r\\n    const thumb = this.values[this.selectedIndex];\\r\\n    if (position.x < 0) {\\r\\n      thumb.x = 0;\\r\\n    } else if (position.x > sliderRec.width - thumbRec.width) {\\r\\n      thumb.x = sliderRec.width - thumbRec.width;\\r\\n    } else {\\r\\n      thumb.x = position.x;\\r\\n    }\\r\\n    this.setValueByPosition(thumb, thumbRec, sliderRec);\\r\\n  }\\r\\n\\r\\n  updateAllThumbPositions() {\\r\\n    // wait to add thumbs\\r\\n    setTimeout(() => {\\r\\n      this.updateRects();\\r\\n      const sliderRec = this.sliderRect!;\\r\\n      const thumbRec = this.thumbRect!;\\r\\n      for (let item of this.values) {\\r\\n        item.x = ((item.value - this.min) * (sliderRec.width - thumbRec.width)) / (this.max - this.min);\\r\\n      }\\r\\n      this.changeDetectorRef.detectChanges();\\r\\n    });\\r\\n  }\\r\\n  setValueByPosition(thumb: ValueModel, thumbRec: DOMRect, sliderRec: DOMRect) {\\r\\n    const percentage = (thumb.x ?? 0) / (sliderRec.width - thumbRec.width);\\r\\n    let newValue = this.min + percentage * (this.max - this.min);\\r\\n    const stepDecimalPlaces = (this.step.toString().split(\'.\')[1] || \'\').length;\\r\\n    newValue = parseFloat((Math.round(newValue / this.step) * this.step).toFixed(stepDecimalPlaces));\\r\\n    let value = Math.min(Math.max(newValue, this.min), this.max);\\r\\n    if (thumb.value !== value) {\\r\\n      thumb.value = value;\\r\\n      this.valueChanged();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mouseup\', [\'$event\'])\\r\\n  @HostListener(\'document:touchend\', [\'$event\'])\\r\\n  onDragEnd(ev: MouseEvent | TouchEvent) {\\r\\n    this.isDragging = false;\\r\\n    // this.selectedIndex = undefined;\\r\\n  }\\r\\n\\r\\n  valueChanged() {\\r\\n    const v = this.values; // this.values.map(({ x, thumb, ...rest }) => ({ ...rest }));\\r\\n    this._onChange(v);\\r\\n    this.change.emit(v);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":"$sliderHeight: 12px;\\r\\n\\r\\n.slider-container {\\r\\n  max-width: 100%;\\r\\n  padding: 1px 0;\\r\\n\\r\\n  .slider {\\r\\n    position: relative;\\r\\n    box-shadow: inset hsla(250, 3%, 0%, 0.075) 0 0 0 1px;\\r\\n    border-radius: 10px;\\r\\n    height: $sliderHeight;\\r\\n    width: 100%;\\r\\n    background: var(--ngx-slider-bg, rgb(140, 51, 250));\\r\\n    margin: 10px 0;\\r\\n\\r\\n    &.bg-transparent {\\r\\n      background: transparent;\\r\\n      &::before,\\r\\n      &::after {\\r\\n        position: absolute;\\r\\n        top: 1px;\\r\\n        left: 1px;\\r\\n        right: 1px;\\r\\n        bottom: 1px;\\r\\n        border-radius: 9px;\\r\\n      }\\r\\n      &::before {\\r\\n        content: \' \';\\r\\n        background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),\\r\\n          linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%),\\r\\n          linear-gradient(-45deg, transparent 75%, #ccc 75%);\\r\\n        background-size: 16px 16px;\\r\\n        background-position: 0 0, 0 8px, 8px -8px, -8px 0px;\\r\\n      }\\r\\n      &::after {\\r\\n        content: \' \';\\r\\n        background: var(--ngx-slider-bg);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    &.add-range-cursor {\\r\\n      cursor: copy;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .thumb {\\r\\n    box-shadow: hsla(250, 3%, 0%, 0.15) 0 0 0 1px, rgba(0, 0, 0, 0.05) 0 10px 10px -5px, inset #fff 0 0 0 6px;\\r\\n    background: var(--ngx-slider-bg, rgb(140, 51, 250));\\r\\n    height: var(--ngx-thumb-size, 30px);\\r\\n    width: var(--ngx-thumb-size, 30px);\\r\\n    display: block;\\r\\n    border-radius: 100%;\\r\\n    top: calc($sliderHeight / 2 - (var(--ngx-thumb-size, 30px) / 2));\\r\\n    position: absolute;\\r\\n    cursor: grab;\\r\\n    z-index: 100;\\r\\n    &.is-active {\\r\\n      outline: 1px rgb(89, 0, 255) solid;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n","styleUrl":"./range-slider.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"changeDetectorRef","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":""}],"line":104,"jsdoctags":[{"name":"changeDetectorRef","type":"ChangeDetectorRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"extends":[],"implements":["OnInit","ControlValueAccessor","Validator"],"templateData":"<div class=\\"slider-container\\">\\r\\n  <ng-content></ng-content>\\r\\n  <div\\r\\n    #slider\\r\\n    class=\\"slider\\"\\r\\n    [class.add-range-cursor]=\\"addNewRangeOnClick\\"\\r\\n    [ngStyle]=\\"{ \'--ngx-slider-bg\': background }\\"\\r\\n    [class.bg-transparent]=\\"isBgTransparent\\"\\r\\n    (mousedown)=\\"addnewRangeOnSliderClick($event)\\"\\r\\n    (touchstart)=\\"addnewRangeOnSliderClick($event)\\">\\r\\n    <div\\r\\n      class=\\"thumb\\"\\r\\n      [class.is-active]=\\"selectedIndex == i\\"\\r\\n      #thumb\\r\\n      *ngFor=\\"let item of values; let i = index\\"\\r\\n      [style.left.px]=\\"item.x\\"\\r\\n      [style.background]=\\"item.color\\"\\r\\n      [title]=\\"item.value\\"\\r\\n      (mousedown)=\\"dragStart($event, i)\\"\\r\\n      (touchstart)=\\"dragStart($event, i)\\"></div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\x3c!-- {{ selectedIndex }}\\r\\n<pre dir=\\"ltr\\" style=\\"text-align: left\\">{{ values | json }}</pre> --\x3e\\r\\n\\r\\n"},{"name":"RgbComponent","id":"component-RgbComponent-553b8c515bf3be2a3fe77a3dabd489d9fd5f70c0a2459434de5650f8e66e09a57790f611e7ec79cfed7d847498531ce858b745d57e5d09ae0434a9432f18bace","file":"projects/ngx-input-color/src/lib/inspectors/rgb/rgb.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-rgb","styleUrls":["./rgb.component.scss"],"styles":[],"templateUrl":["./rgb.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","deprecated":false,"deprecationMessage":"","line":22,"type":"NgxColor","decorators":[]}],"outputsClass":[{"name":"colorChange","defaultValue":"new EventEmitter<NgxColor | undefined>()","deprecated":false,"deprecationMessage":"","line":32,"type":"EventEmitter"}],"propertiesClass":[{"name":"alpha","defaultValue":"1","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":19},{"name":"baseColor","defaultValue":"\'rgb(0,0,0)\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":15},{"name":"blue","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":18},{"name":"blueSliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":13},{"name":"green","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":17},{"name":"greenSliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":12},{"name":"inputColor","deprecated":false,"deprecationMessage":"","type":"NgxColor","indexKey":"","optional":true,"description":"","line":21,"modifierKind":[123]},{"name":"red","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":16},{"name":"redSliderBackground","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","type":"string","indexKey":"","optional":false,"description":"","line":11}],"methodsClass":[{"name":"generateColor","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":37,"deprecated":false,"deprecationMessage":""},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":35,"deprecated":false,"deprecationMessage":""},{"name":"updateRgbSliderColor","args":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"rgba","type":"RGBA","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"standalone":false,"imports":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, EventEmitter, Input, OnInit, Output } from \'@angular/core\';\\r\\nimport { NgxColor } from \'../../../utils/color-helper\';\\r\\nimport { RGBA } from \'../../../utils/interfaces\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-rgb\',\\r\\n  templateUrl: \'./rgb.component.html\',\\r\\n  styleUrls: [\'./rgb.component.scss\'],\\r\\n})\\r\\nexport class RgbComponent implements OnInit {\\r\\n  redSliderBackground = \'\';\\r\\n  greenSliderBackground = \'\';\\r\\n  blueSliderBackground = \'\';\\r\\n\\r\\n  baseColor = \'rgb(0,0,0)\';\\r\\n  red: number = 0;\\r\\n  green: number = 0;\\r\\n  blue: number = 0;\\r\\n  alpha: number = 1;\\r\\n\\r\\n  private inputColor?: NgxColor;\\r\\n  @Input() set color(c: NgxColor) {\\r\\n    if (c.equals(this.inputColor)) return;\\r\\n    this.inputColor = c;\\r\\n    const rgba = c.toRgb();\\r\\n    this.red = rgba.r;\\r\\n    this.green = rgba.g;\\r\\n    this.blue = rgba.b;\\r\\n    this.alpha = rgba.a ?? 1;\\r\\n    this.updateRgbSliderColor(rgba as any);\\r\\n  }\\r\\n  @Output() colorChange = new EventEmitter<NgxColor | undefined>();\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit() {}\\r\\n\\r\\n  generateColor() {\\r\\n    try {\\r\\n      const rgba: RGBA = { r: this.red, g: this.green, b: this.blue, a: this.alpha };\\r\\n      const color = new NgxColor(rgba);\\r\\n      this.updateRgbSliderColor(rgba);\\r\\n      if (color.equals(this.inputColor) == false) {\\r\\n        this.inputColor = color;\\r\\n        this.colorChange.emit(color);\\r\\n      }\\r\\n    } catch (error) {\\r\\n      this.colorChange.emit(undefined);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private updateRgbSliderColor(rgba: RGBA) {\\r\\n    const { r, g, b } = rgba;\\r\\n    this.redSliderBackground = `linear-gradient(to right, rgb(0, ${g}, ${b}), rgb(255, ${g}, ${b}))`;\\r\\n    this.greenSliderBackground = `linear-gradient(to right, rgb(${r}, 0, ${b}), rgb(${r}, 255, ${b}))`;\\r\\n    this.blueSliderBackground = `linear-gradient(to right, rgb(${r}, ${g}, 0), rgb(${r}, ${g}, 255))`;\\r\\n    this.baseColor = `rgb(${r}, ${g}, ${b})`;\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":".slider-title {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  input {\\r\\n    transition: box-shadow 0.1s;\\r\\n    box-shadow: inset hsl(250, 3%, 85%) 0 0 0 1px, inset white 0 0 0 100px;\\r\\n    border: none;\\r\\n    width: 40px;\\r\\n    color: hsl(250, 3%, 0%);\\r\\n    font-family: \'Inter\', sans-serif;\\r\\n    padding: 5px 6px;\\r\\n    border-radius: 5px;\\r\\n    font-size: 12px;\\r\\n  }\\r\\n}","styleUrl":"./rgb.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":32},"extends":[],"implements":["OnInit"],"accessors":{"color":{"name":"color","setSignature":{"name":"color","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":22,"jsdoctags":[{"name":"c","type":"NgxColor","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}},"templateData":"<slider\\r\\n  [(ngModel)]=\\"red\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"255\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"redSliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Red</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"red\\" min=\\"0\\" max=\\"255\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"green\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"255\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"greenSliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Green</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"green\\" min=\\"0\\" max=\\"255\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"blue\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"255\\"\\r\\n  [step]=\\"1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [background]=\\"blueSliderBackground\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Blue</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"blue\\" min=\\"0\\" max=\\"255\\" step=\\"1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n<slider\\r\\n  [(ngModel)]=\\"alpha\\"\\r\\n  [min]=\\"0\\"\\r\\n  [max]=\\"1\\"\\r\\n  [step]=\\"0.1\\"\\r\\n  (change)=\\"generateColor()\\"\\r\\n  [isBgTransparent]=\\"true\\"\\r\\n  [background]=\\"\'linear-gradient(to right,transparent,\' + baseColor + \')\'\\">\\r\\n  <div class=\\"slider-title\\">\\r\\n    <span>Alpha</span>\\r\\n    <input type=\\"number\\" [(ngModel)]=\\"alpha\\" min=\\"0\\" max=\\"1\\" step=\\"0.1\\" />\\r\\n  </div>\\r\\n</slider>\\r\\n"},{"name":"SaturationComponent","id":"component-SaturationComponent-189840a6410c2afd387d9e98e0413332d072b869b93011c41e08d72275466d3d7d619df99fc78b0875743d6fc0bc7fab10cf99d32131c2ca3198fd7029fb9ddd","file":"projects/ngx-input-color/src/saturation/saturation.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SaturationComponent), multi: true,\\n}","type":"component"}],"selector":"saturation","styleUrls":[],"styles":[],"templateUrl":["./saturation.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"color","defaultValue":"\'red\'","deprecated":false,"deprecationMessage":"","line":30,"type":"string","decorators":[]},{"name":"height","deprecated":false,"deprecationMessage":"","line":29,"type":"number","decorators":[]},{"name":"max","defaultValue":"{ x: 100, y: 100 }","deprecated":false,"deprecationMessage":"","line":33,"type":"{ x: number; y: number; }","decorators":[]},{"name":"min","defaultValue":"{ x: 0, y: 0 }","deprecated":false,"deprecationMessage":"","line":32,"type":"IPosition","decorators":[]},{"name":"step","defaultValue":"1","deprecated":false,"deprecationMessage":"","line":31,"type":"number","decorators":[]},{"name":"width","deprecated":false,"deprecationMessage":"","line":28,"type":"number","decorators":[]}],"outputsClass":[{"name":"change","defaultValue":"new EventEmitter<IPosition>()","deprecated":false,"deprecationMessage":"","line":34,"type":"EventEmitter"}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":43},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":44},{"name":"_validatorOnChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":45},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":42},{"name":"isDragging","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":36},{"name":"myControl","defaultValue":"new FormControl<IPosition | null>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":41},{"name":"saturation","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":37,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'saturation\', {static: true}"}],"modifierKind":[170]},{"name":"saturationRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":47,"modifierKind":[123]},{"name":"thumb","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":38,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'thumb\', {static: true}"}],"modifierKind":[170]},{"name":"thumbRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":48,"modifierKind":[123]},{"name":"x","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":39},{"name":"y","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":40}],"methodsClass":[{"name":"dragStart","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":89,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onDrag","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":104,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mousemove\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchmove\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onDragEnd","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":137,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mouseup\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchend\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onResize","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":98,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\', [\'$event\']"}],"modifierKind":[170]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":77,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":80,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":true,"returnType":"void","typeParameters":[],"line":73,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":true,"returnType":"void","typeParameters":[],"line":83,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setValueByPosition","args":[{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":""},{"name":"saturationRec","type":"DOMRect","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":141,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"saturationRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updatePosition","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":109,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateRects","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":52,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"valueChanged","args":[{"name":"value","type":"IPosition","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":157,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"IPosition","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"val","type":"IPosition | null","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"IPosition | null","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"document:mousemove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":104},{"name":"document:mouseup","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":137},{"name":"document:touchend","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":137},{"name":"document:touchmove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":104},{"name":"window:resize","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":98}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild, forwardRef } from \'@angular/core\';\\r\\nimport { getOffsetPosition } from \'../utils/get-offset-position\';\\r\\nimport {\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ControlValueAccessor,\\r\\n  FormControl,\\r\\n  AbstractControl,\\r\\n  ValidationErrors,\\r\\n} from \'@angular/forms\';\\r\\nimport { IPosition } from \'../models/IPosition\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'saturation\',\\r\\n  standalone: true,\\r\\n  imports: [CommonModule],\\r\\n  templateUrl: \'./saturation.component.html\',\\r\\n  styleUrl: \'./saturation.component.scss\',\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => SaturationComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class SaturationComponent implements ControlValueAccessor {\\r\\n  @Input() width?: number;\\r\\n  @Input() height?: number;\\r\\n  @Input() color = \'red\';\\r\\n  @Input() step = 1;\\r\\n  @Input() min: IPosition = { x: 0, y: 0 };\\r\\n  @Input() max = { x: 100, y: 100 };\\r\\n  @Output() change = new EventEmitter<IPosition>();\\r\\n\\r\\n  isDragging = false;\\r\\n  @ViewChild(\'saturation\', { static: true }) saturation!: ElementRef<HTMLDivElement>;\\r\\n  @ViewChild(\'thumb\', { static: true }) thumb!: ElementRef<HTMLDivElement>;\\r\\n  x = 0;\\r\\n  y = 0;\\r\\n  myControl = new FormControl<IPosition | null>(null);\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: any) => {};\\r\\n  _onTouched = () => {};\\r\\n  _validatorOnChange = () => {};\\r\\n\\r\\n  private saturationRect?: DOMRect;\\r\\n  private thumbRect?: DOMRect;\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  private updateRects() {\\r\\n    this.saturationRect = this.saturation.nativeElement.getBoundingClientRect();\\r\\n    this.thumbRect = this.thumb.nativeElement.getBoundingClientRect();\\r\\n  }\\r\\n\\r\\n  writeValue(val?: IPosition | null): void {\\r\\n    if (!val) val = { x: 0, y: 0 };\\r\\n    let value: IPosition = val;\\r\\n    this.myControl.setValue(value, { emitEvent: false });\\r\\n    this.updateRects();\\r\\n    const saturationRec = this.saturationRect!;\\r\\n    const thumbRec = this.thumbRect!;\\r\\n    this.x = ((value.x - this.min.x) * (saturationRec.width - thumbRec.width / 2)) / (this.max.x - this.min.x);\\r\\n    this.y = ((value.y - this.min.y) * (saturationRec.height - thumbRec.height / 2)) / (this.max.y - this.min.y);\\r\\n    if (val !== value) {\\r\\n      this.valueChanged(value);\\r\\n    }\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return this.myControl.errors;\\r\\n  }\\r\\n  registerOnValidatorChange?(fn: () => void): void {\\r\\n    this._validatorOnChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState?(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n    if (disabled) this.myControl.disable();\\r\\n    else this.myControl.enable();\\r\\n  }\\r\\n\\r\\n  dragStart(ev: MouseEvent | TouchEvent) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.isDragging = true;\\r\\n    this.updateRects();\\r\\n    this.updatePosition(ev);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  onResize() {\\r\\n    this.writeValue(this.myControl.value);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mousemove\', [\'$event\'])\\r\\n  @HostListener(\'document:touchmove\', [\'$event\'])\\r\\n  onDrag(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    this.updatePosition(ev);\\r\\n  }\\r\\n\\r\\n  private updatePosition(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    if (!this.saturationRect || !this.thumbRect) this.updateRects();\\r\\n    let position = getOffsetPosition(ev, this.saturation.nativeElement);\\r\\n    let thumbRec = this.thumbRect!;\\r\\n    let saturationRec = this.saturationRect!;\\r\\n    if (position.x < 0) {\\r\\n      this.x = 0;\\r\\n    } else if (position.x > saturationRec.width - (thumbRec.width / 2 - 3)) {\\r\\n      this.x = saturationRec.width - (thumbRec.width / 2 - 3);\\r\\n    } else {\\r\\n      this.x = position.x;\\r\\n    }\\r\\n    // this.x = this.x - thumbRec.width / 2;\\r\\n\\r\\n    if (position.y < 0) {\\r\\n      this.y = 0;\\r\\n    } else if (position.y > saturationRec.height - (thumbRec.height / 2 - 3)) {\\r\\n      this.y = saturationRec.height - (thumbRec.height / 2 - 3);\\r\\n    } else {\\r\\n      this.y = position.y;\\r\\n    }\\r\\n    //  this.y = this.y - thumbRec.height / 2;\\r\\n    this.setValueByPosition(thumbRec, saturationRec);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mouseup\', [\'$event\'])\\r\\n  @HostListener(\'document:touchend\', [\'$event\'])\\r\\n  onDragEnd(ev: MouseEvent | TouchEvent) {\\r\\n    this.isDragging = false;\\r\\n  }\\r\\n\\r\\n  setValueByPosition(thumbRec: DOMRect, saturationRec: DOMRect) {\\r\\n    const percentageX = this.x / (saturationRec.width - thumbRec.width);\\r\\n    let newValueX = this.min.x + percentageX * (this.max.x - this.min.x);\\r\\n    newValueX = Math.round(newValueX / this.step) * this.step;\\r\\n    let valueX = Math.min(Math.max(newValueX, this.min.x), this.max.x);\\r\\n    //-----------------------------\\r\\n    const percentageY = this.y / (saturationRec.height - thumbRec.height);\\r\\n    let newValueY = this.min.y + percentageY * (this.max.y - this.min.y);\\r\\n    newValueY = Math.round(newValueY / this.step) * this.step;\\r\\n    let valueY = Math.min(Math.max(newValueY, this.min.y), this.max.y);\\r\\n    const newValue = { x: valueX, y: valueY };\\r\\n    if (!this.myControl.value || this.myControl.value.x !== valueX || this.myControl.value.y !== valueY) {\\r\\n      this.valueChanged(newValue);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  valueChanged(value: IPosition) {\\r\\n    this.myControl.setValue(value, { emitEvent: false });\\r\\n    this._onChange(value);\\r\\n    this.change.emit(value);\\r\\n  }\\r\\n}\\r\\n","styleUrl":"./saturation.component.scss","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":48},"extends":[],"implements":["ControlValueAccessor"],"templateData":"<div\\r\\n  class=\\"saturation-container\\"\\r\\n  [style.width.px]=\\"width\\"\\r\\n  [style.height.px]=\\"height\\"\\r\\n  (mousedown)=\\"dragStart($event)\\"\\r\\n  (touchstart)=\\"dragStart($event)\\">\\r\\n  <div class=\\"saturation\\" #saturation>\\r\\n    <div class=\\"s-bg\\" [style.background]=\\"color\\"></div>\\r\\n    <div class=\\"s-white\\"></div>\\r\\n    <div class=\\"s-black\\"></div>\\r\\n  </div>\\r\\n  <div class=\\"thumb\\" #thumb [style.left.px]=\\"x\\" [style.top.px]=\\"y\\"></div>\\r\\n</div>\\r\\n"},{"name":"SliderComponent","id":"component-SliderComponent-a0ef879e12ba717d50d86dde723cd6e713f41bb0120c5537b8cf3058a8312d5b6b61551488a1cf307193f59ea744f628aeab5e0504aff4863ba21bed67dbdc9c","file":"projects/ngx-input-color/src/slider/slider.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[{"name":"{\\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SliderComponent), multi: true,\\n}","type":"component"},{"name":"{\\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => SliderComponent), multi: true,\\n}","type":"component"}],"selector":"slider","styleUrls":["./slider.component.scss"],"styles":[],"templateUrl":["./slider.component.html"],"viewProviders":[],"hostDirectives":[],"inputsClass":[{"name":"background","deprecated":false,"deprecationMessage":"","line":50,"type":"string","decorators":[]},{"name":"isBgTransparent","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":51,"type":"boolean","decorators":[]},{"name":"max","defaultValue":"100","deprecated":false,"deprecationMessage":"","line":49,"type":"number","decorators":[]},{"name":"min","defaultValue":"0","deprecated":false,"deprecationMessage":"","line":48,"type":"number","decorators":[]},{"name":"step","defaultValue":"1","deprecated":false,"deprecationMessage":"","line":47,"type":"number","decorators":[]}],"outputsClass":[{"name":"change","defaultValue":"new EventEmitter<number>()","deprecated":false,"deprecationMessage":"","line":52,"type":"EventEmitter"}],"propertiesClass":[{"name":"_onChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":59},{"name":"_onTouched","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":60},{"name":"_validatorOnChange","defaultValue":"() => {...}","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":61},{"name":"isDisabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":58},{"name":"isDragging","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":53},{"name":"myControl","defaultValue":"new FormControl<number | null>(null)","deprecated":false,"deprecationMessage":"","type":"","indexKey":"","optional":false,"description":"","line":57},{"name":"slider","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":54,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'slider\', {static: true}"}],"modifierKind":[170]},{"name":"sliderRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":62,"modifierKind":[123]},{"name":"thumb","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","indexKey":"","optional":false,"description":"","line":55,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'thumb\', {static: true}"}],"modifierKind":[170]},{"name":"thumbRect","deprecated":false,"deprecationMessage":"","type":"DOMRect","indexKey":"","optional":true,"description":"","line":63,"modifierKind":[123]},{"name":"x","defaultValue":"0","deprecated":false,"deprecationMessage":"","type":"number","indexKey":"","optional":false,"description":"","line":56}],"methodsClass":[{"name":"dragStart","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":108,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":65,"deprecated":false,"deprecationMessage":""},{"name":"onDrag","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":118,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mousemove\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchmove\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onDragEnd","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":158,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:mouseup\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:touchend\', [\'$event\']"}],"modifierKind":[170,170],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onResize","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":124,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:resize\', [\'$event\']"}],"modifierKind":[170]},{"name":"registerOnChange","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":96,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnTouched","args":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":99,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerOnValidatorChange","args":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":true,"returnType":"void","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"fn","type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"text":"param"}}]},{"name":"setDisabledState","args":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":true,"returnType":"void","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"disabled","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setValueByPosition","args":[{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":""},{"name":"sliderRec","type":"DOMRect","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":145,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"thumbRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"sliderRec","type":"DOMRect","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updatePosition","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":128,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"updateRects","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":69,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"validate","args":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ValidationErrors | null","typeParameters":[],"line":89,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"control","type":"AbstractControl","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"valueChanged","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":162,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"writeValue","args":[{"name":"val","type":"number | string | null","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":"","jsdoctags":[{"name":"val","type":"number | string | null","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"document:mousemove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":118},{"name":"document:mouseup","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":158},{"name":"document:touchend","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":158},{"name":"document:touchmove","args":[{"name":"ev","type":"MouseEvent | TouchEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":118},{"name":"window:resize","args":[],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","line":124}],"standalone":true,"imports":[{"name":"CommonModule","type":"module"}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport {\\r\\n  ChangeDetectionStrategy,\\r\\n  Component,\\r\\n  ElementRef,\\r\\n  EventEmitter,\\r\\n  HostListener,\\r\\n  Input,\\r\\n  Output,\\r\\n  ViewChild,\\r\\n  forwardRef,\\r\\n  type OnInit,\\r\\n} from \'@angular/core\';\\r\\nimport { getOffsetPosition } from \'../utils/get-offset-position\';\\r\\nimport {\\r\\n  AbstractControl,\\r\\n  ControlValueAccessor,\\r\\n  FormControl,\\r\\n  NG_VALIDATORS,\\r\\n  NG_VALUE_ACCESSOR,\\r\\n  ValidationErrors,\\r\\n  Validator,\\r\\n  Validators,\\r\\n} from \'@angular/forms\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'slider\',\\r\\n  standalone: true,\\r\\n  imports: [CommonModule],\\r\\n  templateUrl: \'./slider.component.html\',\\r\\n  styleUrls: [\'./slider.component.scss\'],\\r\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\r\\n  providers: [\\r\\n    {\\r\\n      provide: NG_VALUE_ACCESSOR,\\r\\n      useExisting: forwardRef(() => SliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n    {\\r\\n      provide: NG_VALIDATORS,\\r\\n      useExisting: forwardRef(() => SliderComponent),\\r\\n      multi: true,\\r\\n    },\\r\\n  ],\\r\\n})\\r\\nexport class SliderComponent implements OnInit, ControlValueAccessor, Validator {\\r\\n  @Input() step = 1;\\r\\n  @Input() min = 0;\\r\\n  @Input() max = 100;\\r\\n  @Input() background?: string;\\r\\n  @Input() isBgTransparent = false;\\r\\n  @Output() change = new EventEmitter<number>();\\r\\n  isDragging = false;\\r\\n  @ViewChild(\'slider\', { static: true }) slider!: ElementRef<HTMLDivElement>;\\r\\n  @ViewChild(\'thumb\', { static: true }) thumb!: ElementRef<HTMLDivElement>;\\r\\n  x = 0;\\r\\n  myControl = new FormControl<number | null>(null);\\r\\n  isDisabled = false;\\r\\n  _onChange = (value: any) => {};\\r\\n  _onTouched = () => {};\\r\\n  _validatorOnChange = () => {};\\r\\n  private sliderRect?: DOMRect;\\r\\n  private thumbRect?: DOMRect;\\r\\n  constructor() {}\\r\\n  ngOnInit(): void {\\r\\n    this.myControl.setValidators([Validators.min(this.min), Validators.max(this.max)]);\\r\\n  }\\r\\n\\r\\n  private updateRects() {\\r\\n    this.sliderRect = this.slider.nativeElement.getBoundingClientRect();\\r\\n    this.thumbRect = this.thumb.nativeElement.getBoundingClientRect();\\r\\n  }\\r\\n\\r\\n  writeValue(val?: number | string | null): void {\\r\\n    let value = 0;\\r\\n    if (!val) value = 0;\\r\\n    else if (+val < +this.min) value = +this.min;\\r\\n    else if (+val > +this.max) value = +this.max;\\r\\n    else value = +val;\\r\\n    this.myControl.setValue(value, { emitEvent: false });\\r\\n    this.updateRects();\\r\\n    const sliderRec = this.sliderRect!;\\r\\n    const thumbRec = this.thumbRect!;\\r\\n    this.x = ((value - this.min) * (sliderRec.width - thumbRec.width)) / (this.max - this.min);\\r\\n    if (val !== value) {\\r\\n      this.valueChanged(value);\\r\\n    }\\r\\n  }\\r\\n  validate(control: AbstractControl): ValidationErrors | null {\\r\\n    return this.myControl.errors;\\r\\n  }\\r\\n  registerOnValidatorChange?(fn: () => void): void {\\r\\n    this._validatorOnChange = fn;\\r\\n  }\\r\\n\\r\\n  registerOnChange(fn: any): void {\\r\\n    this._onChange = fn;\\r\\n  }\\r\\n  registerOnTouched(fn: any): void {\\r\\n    this._onTouched = fn;\\r\\n  }\\r\\n  setDisabledState?(disabled: boolean): void {\\r\\n    this.isDisabled = disabled;\\r\\n    if (disabled) this.myControl.disable();\\r\\n    else this.myControl.enable();\\r\\n  }\\r\\n\\r\\n  dragStart(ev: MouseEvent | TouchEvent) {\\r\\n    ev.stopPropagation();\\r\\n    ev.preventDefault();\\r\\n    this.isDragging = true;\\r\\n    this.updateRects();\\r\\n    this.updatePosition(ev);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mousemove\', [\'$event\'])\\r\\n  @HostListener(\'document:touchmove\', [\'$event\'])\\r\\n  onDrag(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    this.updatePosition(ev);\\r\\n  }\\r\\n\\r\\n  @HostListener(\'window:resize\', [\'$event\'])\\r\\n  onResize() {\\r\\n    this.writeValue(this.myControl.value);\\r\\n  }\\r\\n\\r\\n  private updatePosition(ev: MouseEvent | TouchEvent) {\\r\\n    if (!this.isDragging) return;\\r\\n    if (!this.sliderRect || !this.thumbRect) this.updateRects();\\r\\n    let position = getOffsetPosition(ev, this.slider.nativeElement);\\r\\n    let thumbRec = this.thumbRect!;\\r\\n    position.x -= thumbRec.width / 2;\\r\\n    let sliderRec = this.sliderRect!;\\r\\n    if (position.x < 0) {\\r\\n      this.x = 0;\\r\\n    } else if (position.x > sliderRec.width - thumbRec.width) {\\r\\n      this.x = sliderRec.width - thumbRec.width;\\r\\n    } else {\\r\\n      this.x = position.x;\\r\\n    }\\r\\n    this.setValueByPosition(thumbRec, sliderRec);\\r\\n  }\\r\\n\\r\\n  setValueByPosition(thumbRec: DOMRect, sliderRec: DOMRect) {\\r\\n    const percentage = this.x / (sliderRec.width - thumbRec.width);\\r\\n    let newValue = this.min + percentage * (this.max - this.min);\\r\\n    const stepDecimalPlaces = (this.step.toString().split(\'.\')[1] || \'\').length;\\r\\n    newValue = parseFloat((Math.round(newValue / this.step) * this.step).toFixed(stepDecimalPlaces));\\r\\n    let value = Math.min(Math.max(newValue, this.min), this.max);\\r\\n    if (this.myControl.value !== value) {\\r\\n      this.valueChanged(value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  @HostListener(\'document:mouseup\', [\'$event\'])\\r\\n  @HostListener(\'document:touchend\', [\'$event\'])\\r\\n  onDragEnd(ev: MouseEvent | TouchEvent) {\\r\\n    this.isDragging = false;\\r\\n  }\\r\\n\\r\\n  valueChanged(value: number) {\\r\\n    this.myControl.setValue(value, { emitEvent: false });\\r\\n    this._onChange(value);\\r\\n    this.change.emit(value);\\r\\n  }\\r\\n}\\r\\n","assetsDirs":[],"styleUrlsData":[{"data":"$sliderHeight: 12px;\\r\\n\\r\\n.slider-container {\\r\\n  max-width: 100%;\\r\\n  padding: 1px 0;\\r\\n\\r\\n  .slider {\\r\\n    position: relative;\\r\\n    box-shadow: inset hsla(250, 3%, 0%, 0.075) 0 0 0 1px;\\r\\n    border-radius: 10px;\\r\\n    height: $sliderHeight;\\r\\n    width: 100%;\\r\\n    background: var(--ngx-slider-bg, rgb(140, 51, 250));\\r\\n    margin: 10px 0;\\r\\n\\r\\n    &.bg-transparent {\\r\\n      background: transparent;\\r\\n      &::before,\\r\\n      &::after {\\r\\n        position: absolute;\\r\\n        top: 1px;\\r\\n        left: 1px;\\r\\n        right: 1px;\\r\\n        bottom: 1px;\\r\\n        border-radius: 9px;\\r\\n      }\\r\\n      &::before {\\r\\n        content: \' \';\\r\\n        background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),\\r\\n          linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%),\\r\\n          linear-gradient(-45deg, transparent 75%, #ccc 75%);\\r\\n        background-size: 16px 16px;\\r\\n        background-position: 0 0, 0 8px, 8px -8px, -8px 0px;\\r\\n      }\\r\\n      &::after {\\r\\n        content: \' \';\\r\\n        background: var(--ngx-slider-bg);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .thumb {\\r\\n    box-shadow: hsla(250, 3%, 0%, 0.15) 0 0 0 1px, rgba(0, 0, 0, 0.05) 0 10px 10px -5px, inset #fff 0 0 0 6px;\\r\\n    background: var(--ngx-slider-bg, rgb(140, 51, 250));\\r\\n    height: var(--ngx-thumb-size, 30px);\\r\\n    width: var(--ngx-thumb-size, 30px);\\r\\n    display: block;\\r\\n    border-radius: 100%;\\r\\n    top: calc($sliderHeight / 2 - (var(--ngx-thumb-size, 30px) / 2));\\r\\n    position: absolute;\\r\\n    cursor: grab;\\r\\n    z-index: 100;\\r\\n  }\\r\\n}\\r\\n","styleUrl":"./slider.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[],"line":63},"extends":[],"implements":["OnInit","ControlValueAccessor","Validator"],"templateData":"<div class=\\"slider-container\\">\\r\\n  <ng-content></ng-content>\\r\\n  <div\\r\\n    #slider\\r\\n    class=\\"slider\\"\\r\\n    (mousedown)=\\"dragStart($event)\\"\\r\\n    (touchstart)=\\"dragStart($event)\\"\\r\\n    [ngStyle]=\\"{ \'--ngx-slider-bg\': background }\\"\\r\\n    [class.bg-transparent]=\\"isBgTransparent\\">\\r\\n    <div class=\\"thumb\\" #thumb [style.left.px]=\\"x\\" [title]=\\"myControl.value\\"></div>\\r\\n  </div>\\r\\n</div>\\r\\n"}],"modules":[{"name":"NgxInputBoxShadowModule","id":"module-NgxInputBoxShadowModule-2e70fa1159a22c7b3eb13ed5636fd0e194f8af7aa95063d65d60a41abc8cff22eea77457bcb404da0fe1601eab14f8b991da7752118d85cb60f9bbe2a55cdc8d","description":"","deprecationMessage":"","deprecated":false,"file":"projects/ngx-input-color/src/ngx-input-box-shadow.module.ts","methods":[],"sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport { NgModule } from \'@angular/core\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { NgxBoxShadowComponent, NgxInputBoxShadowDirective } from \'./public-api\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NgxInputBoxShadowDirective],\\r\\n  imports: [CommonModule, FormsModule, NgxBoxShadowComponent],\\r\\n  exports: [NgxBoxShadowComponent, NgxInputBoxShadowDirective],\\r\\n  providers: [],\\r\\n})\\r\\nexport class NgxInputBoxShadowModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NgxInputBoxShadowDirective"}]},{"type":"imports","elements":[{"name":"NgxBoxShadowComponent"}]},{"type":"exports","elements":[{"name":"NgxBoxShadowComponent"},{"name":"NgxInputBoxShadowDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NgxInputColorModule","id":"module-NgxInputColorModule-9ecf8b6293e67c694f4c8536a40fe58e39ffc329e637d052af48d95263fa5803c20e011394f0e40179ba9514c0707bbc7dbbb001ab7a467c9a2fb5ff55a55928","description":"","deprecationMessage":"","deprecated":false,"file":"projects/ngx-input-color/src/ngx-input-color.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\r\\nimport { NgxInputColorDirective } from \'./directives/ngx-input-color.directive\';\\r\\nimport { NgxInputColorComponent, NgxInputGradientComponent } from \'./public-api\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { SaturationComponent } from \'./saturation/saturation.component\';\\r\\nimport { SliderComponent } from \'./slider/slider.component\';\\r\\nimport { EnumToArrayPipe } from \'./pipes/enum-to-array.pipe\';\\r\\nimport { PickerComponent } from \'./lib/inspectors/picker/picker.component\';\\r\\nimport { CmykComponent } from \'./lib/inspectors/cmyk/cmyk.component\';\\r\\nimport { HslComponent } from \'./lib/inspectors/hsl/hsl.component\';\\r\\nimport { RgbComponent } from \'./lib/inspectors/rgb/rgb.component\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [\\r\\n    NgxInputColorDirective,\\r\\n    NgxInputColorComponent,\\r\\n    PickerComponent,\\r\\n    CmykComponent,\\r\\n    HslComponent,\\r\\n    RgbComponent,\\r\\n  ],\\r\\n  imports: [\\r\\n    CommonModule,\\r\\n    FormsModule,\\r\\n    SliderComponent,\\r\\n    SaturationComponent,\\r\\n    EnumToArrayPipe, \\r\\n  ],\\r\\n  exports: [NgxInputColorComponent, NgxInputColorDirective],\\r\\n  providers: [],\\r\\n})\\r\\nexport class NgxInputColorModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"CmykComponent"},{"name":"HslComponent"},{"name":"NgxInputColorComponent"},{"name":"NgxInputColorDirective"},{"name":"PickerComponent"},{"name":"RgbComponent"}]},{"type":"imports","elements":[{"name":"EnumToArrayPipe"},{"name":"SaturationComponent"},{"name":"SliderComponent"}]},{"type":"exports","elements":[{"name":"NgxInputColorComponent"},{"name":"NgxInputColorDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NgxInputGradientModule","id":"module-NgxInputGradientModule-60a75916d6e808a8e6fe4535b08cd9e25a4330bb800d035d7f0fac3996417742e494540512ad93652d4633f7fbe95c8d38b5f04a85ce1a20646f1ea3f96c0725","description":"","deprecationMessage":"","deprecated":false,"file":"projects/ngx-input-color/src/ngx-input-gradient.module.ts","methods":[],"sourceCode":"import { CommonModule } from \'@angular/common\';\\r\\nimport { NgModule } from \'@angular/core\';\\r\\nimport { FormsModule } from \'@angular/forms\';\\r\\nimport { SliderComponent } from \'./slider/slider.component\';\\r\\nimport { RangeSliderComponent } from \'./range-slider/range-slider.component\';\\r\\nimport { NgxInputGradientComponent, NgxInputGradientDirective } from \'./public-api\';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NgxInputGradientDirective],\\r\\n  imports: [\\r\\n    CommonModule,\\r\\n    FormsModule,\\r\\n    SliderComponent,\\r\\n    RangeSliderComponent,\\r\\n    NgxInputGradientComponent,\\r\\n  ],\\r\\n  exports: [NgxInputGradientComponent, NgxInputGradientDirective],\\r\\n  providers: [],\\r\\n})\\r\\nexport class NgxInputGradientModule {}\\r\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NgxInputGradientDirective"}]},{"type":"imports","elements":[{"name":"NgxInputGradientComponent"},{"name":"RangeSliderComponent"},{"name":"SliderComponent"}]},{"type":"exports","elements":[{"name":"NgxInputGradientComponent"},{"name":"NgxInputGradientDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"appConfig","ctype":"miscellaneous","subtype":"variable","file":"projects/demo/src/app/app.config.ts","deprecated":false,"deprecationMessage":"","type":"ApplicationConfig","defaultValue":"{\\r\\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\\r\\n}"},{"name":"colorNames","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-input-color/src/utils/css-color-names.ts","deprecated":false,"deprecationMessage":"","type":"Record<string, string>","defaultValue":"{\\r\\n  aliceblue: \'#f0f8ff\', antiquewhite: \'#faebd7\', aqua: \'#00ffff\', aquamarine: \'#7fffd4\', azure: \'#f0ffff\',\\r\\n  beige: \'#f5f5dc\', bisque: \'#ffe4c4\', black: \'#000000\', blanchedalmond: \'#ffebcd\', blue: \'#0000ff\',\\r\\n  blueviolet: \'#8a2be2\', brown: \'#a52a2a\', burlywood: \'#deb887\', cadetblue: \'#5f9ea0\', chartreuse: \'#7fff00\',\\r\\n  chocolate: \'#d2691e\', coral: \'#ff7f50\', cornflowerblue: \'#6495ed\', cornsilk: \'#fff8dc\', crimson: \'#dc143c\',\\r\\n  cyan: \'#00ffff\', darkblue: \'#00008b\', darkcyan: \'#008b8b\', darkgoldenrod: \'#b8860b\', darkgray: \'#a9a9a9\',\\r\\n  darkgreen: \'#006400\', darkgrey: \'#a9a9a9\', darkkhaki: \'#bdb76b\', darkmagenta: \'#8b008b\', darkolivegreen: \'#556b2f\',\\r\\n  darkorange: \'#ff8c00\', darkorchid: \'#9932cc\', darkred: \'#8b0000\', darksalmon: \'#e9967a\', darkseagreen: \'#8fbc8f\',\\r\\n  darkslateblue: \'#483d8b\', darkslategray: \'#2f4f4f\', darkslategrey: \'#2f4f4f\', darkturquoise: \'#00ced1\',\\r\\n  darkviolet: \'#9400d3\', deeppink: \'#ff1493\', deepskyblue: \'#00bfff\', dimgray: \'#696969\', dimgrey: \'#696969\',\\r\\n  dodgerblue: \'#1e90ff\', firebrick: \'#b22222\', floralwhite: \'#fffaf0\', forestgreen: \'#228b22\', fuchsia: \'#ff00ff\',\\r\\n  gainsboro: \'#dcdcdc\', ghostwhite: \'#f8f8ff\', gold: \'#ffd700\', goldenrod: \'#daa520\', gray: \'#808080\',\\r\\n  green: \'#008000\', greenyellow: \'#adff2f\', grey: \'#808080\', honeydew: \'#f0fff0\', hotpink: \'#ff69b4\',\\r\\n  indianred: \'#cd5c5c\', indigo: \'#4b0082\', ivory: \'#fffff0\', khaki: \'#f0e68c\', lavender: \'#e6e6fa\',\\r\\n  lavenderblush: \'#fff0f5\', lawngreen: \'#7cfc00\', lemonchiffon: \'#fffacd\', lightblue: \'#add8e6\', lightcoral: \'#f08080\',\\r\\n  lightcyan: \'#e0ffff\', lightgoldenrodyellow: \'#fafad2\', lightgray: \'#d3d3d3\', lightgreen: \'#90ee90\', lightgrey: \'#d3d3d3\',\\r\\n  lightpink: \'#ffb6c1\', lightsalmon: \'#ffa07a\', lightseagreen: \'#20b2aa\', lightskyblue: \'#87cefa\', lightslategray: \'#778899\',\\r\\n  lightslategrey: \'#778899\', lightsteelblue: \'#b0c4de\', lightyellow: \'#ffffe0\', lime: \'#00ff00\', limegreen: \'#32cd32\',\\r\\n  linen: \'#faf0e6\', magenta: \'#ff00ff\', maroon: \'#800000\', mediumaquamarine: \'#66cdaa\', mediumblue: \'#0000cd\',\\r\\n  mediumorchid: \'#ba55d3\', mediumpurple: \'#9370db\', mediumseagreen: \'#3cb371\', mediumslateblue: \'#7b68ee\',\\r\\n  mediumspringgreen: \'#00fa9a\', mediumturquoise: \'#48d1cc\', mediumvioletred: \'#c71585\', midnightblue: \'#191970\',\\r\\n  mintcream: \'#f5fffa\', mistyrose: \'#ffe4e1\', moccasin: \'#ffe4b5\', navajowhite: \'#ffdead\', navy: \'#000080\',\\r\\n  oldlace: \'#fdf5e6\', olive: \'#808000\', olivedrab: \'#6b8e23\', orange: \'#ffa500\', orangered: \'#ff4500\',\\r\\n  orchid: \'#da70d6\', palegoldenrod: \'#eee8aa\', palegreen: \'#98fb98\', paleturquoise: \'#afeeee\', palevioletred: \'#db7093\',\\r\\n  papayawhip: \'#ffefd5\', peachpuff: \'#ffdab9\', peru: \'#cd853f\', pink: \'#ffc0cb\', plum: \'#dda0dd\', powderblue: \'#b0e0e6\',\\r\\n  purple: \'#800080\', rebeccapurple: \'#663399\', red: \'#ff0000\', rosybrown: \'#bc8f8f\', royalblue: \'#4169e1\',\\r\\n  saddlebrown: \'#8b4513\', salmon: \'#fa8072\', sandybrown: \'#f4a460\', seagreen: \'#2e8b57\', seashell: \'#fff5ee\',\\r\\n  sienna: \'#a0522d\', silver: \'#c0c0c0\', skyblue: \'#87ceeb\', slateblue: \'#6a5acd\', slategray: \'#708090\',\\r\\n  slategrey: \'#708090\', snow: \'#fffafa\', springgreen: \'#00ff7f\', steelblue: \'#4682b4\', tan: \'#d2b48c\',\\r\\n  teal: \'#008080\', thistle: \'#d8bfd8\', tomato: \'#ff6347\', turquoise: \'#40e0d0\', violet: \'#ee82ee\', wheat: \'#f5deb3\',\\r\\n  white: \'#ffffff\', whitesmoke: \'#f5f5f5\', yellow: \'#ffff00\', yellowgreen: \'#9acd32\'\\r\\n}"},{"name":"DefaultGradients","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-input-color/src/lib/ngx-input-gradient/default-gradients.ts","deprecated":false,"deprecationMessage":"","type":"[][]","defaultValue":"[\\r\\n  // Sunset\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff7e5f\' },\\r\\n    { id: \'2\', value: 100, color: \'#feb47b\' },\\r\\n  ],\\r\\n\\r\\n  // Ocean Blue\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#00c6ff\' },\\r\\n    { id: \'2\', value: 100, color: \'#0072ff\' },\\r\\n  ],\\r\\n\\r\\n  // Purple Dream\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#a18cd1\' },\\r\\n    { id: \'2\', value: 100, color: \'#fbc2eb\' },\\r\\n  ],\\r\\n\\r\\n  // Cool Sky\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#2193b0\' },\\r\\n    { id: \'2\', value: 100, color: \'#6dd5ed\' },\\r\\n  ],\\r\\n\\r\\n  // Peach\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ed4264\' },\\r\\n    { id: \'2\', value: 100, color: \'#ffedbc\' },\\r\\n  ],\\r\\n\\r\\n  // Night Fade\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#a18cd1\' },\\r\\n    { id: \'2\', value: 100, color: \'#fbc2eb\' },\\r\\n  ],\\r\\n\\r\\n  // Aqua Marine\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#1a2980\' },\\r\\n    { id: \'2\', value: 100, color: \'#26d0ce\' },\\r\\n  ],\\r\\n\\r\\n  // Forest\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#5a3f37\' },\\r\\n    { id: \'2\', value: 100, color: \'#2c7744\' },\\r\\n  ],\\r\\n\\r\\n  // Flame\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff4e50\' },\\r\\n    { id: \'2\', value: 100, color: \'#f9d423\' },\\r\\n  ],\\r\\n\\r\\n  // Blue Lagoon\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#43cea2\' },\\r\\n    { id: \'2\', value: 100, color: \'#185a9d\' },\\r\\n  ],\\r\\n\\r\\n  // Retro\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#3fada8\' },\\r\\n    { id: \'2\', value: 100, color: \'#808080\' },\\r\\n  ],\\r\\n\\r\\n  // Sunrise\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff512f\' },\\r\\n    { id: \'2\', value: 100, color: \'#dd2476\' },\\r\\n  ],\\r\\n\\r\\n  // Rainbow\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff0000\' },\\r\\n    { id: \'2\', value: 20, color: \'#ff9900\' },\\r\\n    { id: \'3\', value: 40, color: \'#ffff00\' },\\r\\n    { id: \'4\', value: 60, color: \'#00ff00\' },\\r\\n    { id: \'5\', value: 80, color: \'#0000ff\' },\\r\\n    { id: \'6\', value: 100, color: \'#8b00ff\' },\\r\\n  ],\\r\\n\\r\\n  // Candy\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#f953c6\' },\\r\\n    { id: \'2\', value: 100, color: \'#b91d73\' },\\r\\n  ],\\r\\n\\r\\n  // Citrus\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#fdc830\' },\\r\\n    { id: \'2\', value: 100, color: \'#f37335\' },\\r\\n  ],\\r\\n\\r\\n  // Lava\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#e52d27\' },\\r\\n    { id: \'2\', value: 100, color: \'#b31217\' },\\r\\n  ],\\r\\n\\r\\n  // Winter\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#e6dada\' },\\r\\n    { id: \'2\', value: 100, color: \'#274046\' },\\r\\n  ],\\r\\n\\r\\n  // Purple Love\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#cc2b5e\' },\\r\\n    { id: \'2\', value: 100, color: \'#753a88\' },\\r\\n  ],\\r\\n\\r\\n  // Mint\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#76b852\' },\\r\\n    { id: \'2\', value: 100, color: \'#8dc26f\' },\\r\\n  ],\\r\\n\\r\\n  // Cloud\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#bdc3c7\' },\\r\\n    { id: \'2\', value: 100, color: \'#2c3e50\' },\\r\\n  ],\\r\\n]"},{"name":"EyeDropper","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-input-color/src/lib/ngx-input-color/ngx-input-color.component.ts","deprecated":false,"deprecationMessage":"","type":"any"}],"functions":[{"name":"bound01","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Take input from [0, n] and return it as [0, 1]</p>\\n","args":[{"name":"n","type":"any","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"n","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"max","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"buildGradientFromStops","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"stops","deprecated":false,"deprecationMessage":""},{"name":"type","type":"GradientType","deprecated":false,"deprecationMessage":"","defaultValue":"\'linear\'"},{"name":"rotation","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0"}],"returnType":"string","jsdoctags":[{"name":"stops","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"type","type":"GradientType","deprecated":false,"deprecationMessage":"","defaultValue":"\'linear\'","tagName":{"text":"param"}},{"name":"rotation","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0","tagName":{"text":"param"}}]},{"name":"clamp","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""},{"name":"min","type":"number","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"min","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"max","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"cmykToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts CMYK to RBG\\nAssumes c, m, y, k are in the set [0, 100]</p>\\n","args":[{"name":"c","type":"number","deprecated":false,"deprecationMessage":""},{"name":"m","type":"number","deprecated":false,"deprecationMessage":""},{"name":"y","type":"number","deprecated":false,"deprecationMessage":""},{"name":"k","type":"number","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"c","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"m","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"y","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"k","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"convertDecimalToHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts a decimal to a hex value</p>\\n","args":[{"name":"d","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"d","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"convertHexToDecimal","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts a hex value to a decimal</p>\\n","args":[{"name":"h","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"h","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"convertToPercentage","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Replace a decimal with it&#39;s percentage value</p>\\n","args":[{"name":"n","deprecated":false,"deprecationMessage":""}],"returnType":"number | string","jsdoctags":[{"name":"n","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"generateId","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"rangeValues","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"rangeValues","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"generateRandomColor","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[],"returnType":"string"},{"name":"getOffsetPosition","file":"projects/ngx-input-color/src/utils/get-offset-position.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"evt","deprecated":false,"deprecationMessage":""},{"name":"parent","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"evt","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"parent","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hexToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"RGBA","jsdoctags":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hslToRgba","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an HSL color value to RGB.\\n<em>Assumes:</em> h in [0, 360], s and l in [0, 100]\\n<em>Returns:</em> { r, g, b } in [0, 255]</p>\\n","args":[{"name":"h","deprecated":false,"deprecationMessage":""},{"name":"s","deprecated":false,"deprecationMessage":""},{"name":"l","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"}],"returnType":"RGBA","jsdoctags":[{"name":"h","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"s","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"l","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"hsvToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an HSV color value to RGB.\\n<em>Assumes:</em> h in [0, 360], s and v in [0, 100]\\n<em>Returns:</em> { r, g, b } in [0, 255]</p>\\n","args":[{"name":"h","deprecated":false,"deprecationMessage":""},{"name":"s","deprecated":false,"deprecationMessage":""},{"name":"v","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<RGB>","jsdoctags":[{"name":"h","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"s","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"v","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isOnePointZero","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\\n<a href=\\"http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0\\">http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0</a></p>\\n","args":[{"name":"n","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"n","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isPercentage","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Check to see if string passed in is a percentage</p>\\n","args":[{"name":"n","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"n","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isValidGradient","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"numberInputToObject","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"color","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"RGB","jsdoctags":[{"name":"color","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pad2","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Force a hex value to have 2 characters</p>\\n","args":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseBoxShadowToPx","file":"projects/ngx-input-color/src/utils/box-shadow.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"shadow","type":"string","deprecated":false,"deprecationMessage":""},{"name":"contextPx","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"16"}],"returnType":"BoxShadowValue | null","jsdoctags":[{"name":"shadow","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"contextPx","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"16","tagName":{"text":"param"}}]},{"name":"parseCmykString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"CMYK","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseGradient","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"literal type","jsdoctags":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseHslString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"HSLA","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseHsvString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"HSVA","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseIntFromHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Parse a base-16 hex value into a base-10 integer</p>\\n","args":[{"name":"val","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"val","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseRgbString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"RGBA","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbaToArgbHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGBA color to an ARGB Hex8 string\\nRarely used, but required for &quot;toFilter()&quot;</p>\\n<p><em>Assumes:</em> r, g, b are contained in the set [0, 255] and a in [0, 1]\\n<em>Returns:</em> a 8 character argb hex</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbaToHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB/RGBA color to hex</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"},{"name":"allowAlpha","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"true"},{"name":"allow3Char","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}},{"name":"allowAlpha","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}},{"name":"allow3Char","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"text":"param"}}]},{"name":"rgbToCmyk","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToCmykString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHsl","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB color value to HSL.\\n<em>Assumes:</em> r, g, and b are contained in [0, 255]\\n<em>Returns:</em> { h: 0-360, s: 0-100, l: 0-100 }</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<HSL>","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHslaString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"rgbToHsv","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB color value to HSV\\n<em>Assumes:</em> r, g, and b are contained in [0, 255]\\n<em>Returns:</em> { h: 0-360, s: 0-100, v: 0-100 }</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<HSV>","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHsvString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"rgbToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Handle bounds / percentage checking to conform to CSS color spec\\n<a href=\\"http://www.w3.org/TR/css3-color/\\">http://www.w3.org/TR/css3-color/</a>\\n<em>Assumes:</em> r, g, b in [0, 255] or [0, 1]\\n<em>Returns:</em> { r, g, b } in [0, 255]</p>\\n","args":[{"name":"r","deprecated":false,"deprecationMessage":""},{"name":"g","deprecated":false,"deprecationMessage":""},{"name":"b","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<RGB>","jsdoctags":[{"name":"r","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"stringifyBoxShadow","file":"projects/ngx-input-color/src/utils/box-shadow.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"obj","type":"BoxShadowValue","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"obj","type":"BoxShadowValue","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"typealiases":[{"name":"ColorInput","ctype":"miscellaneous","subtype":"typealias","rawtype":"string | CMYK | HSLA | HSVA | RGBA | NgxColor","file":"projects/ngx-input-color/src/utils/color-helper.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"EyeDropper","ctype":"miscellaneous","subtype":"typealias","rawtype":"any","file":"projects/ngx-input-color/src/models/eye-dropper.ts","deprecated":false,"deprecationMessage":"","description":"","kind":133},{"name":"GradientType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"linear\\" | \\"radial\\"","file":"projects/ngx-input-color/src/models/GradientStop.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"Numberify","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"projects/ngx-input-color/src/utils/conversion.ts","deprecated":false,"deprecationMessage":"","description":"<p>convert all properties in an interface to a number</p>\\n","kind":200},{"name":"OutputType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"CMYK\\" | \\"HSL\\" | \\"HSV\\" | \\"RGB\\" | \\"HEX\\"","file":"projects/ngx-input-color/src/utils/color-helper.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"enumerations":[{"name":"ColorFormats","childs":[{"name":"HEX","deprecated":false,"deprecationMessage":""},{"name":"RGBA","deprecated":false,"deprecationMessage":""},{"name":"HSLA","deprecated":false,"deprecationMessage":""},{"name":"HSVA","deprecated":false,"deprecationMessage":""},{"name":"CMYK","deprecated":false,"deprecationMessage":""}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"","file":"projects/ngx-input-color/src/models/ColorFormats.enum.ts"},{"name":"ColorInspector","childs":[{"name":"Picker","deprecated":false,"deprecationMessage":""},{"name":"RGB","deprecated":false,"deprecationMessage":""},{"name":"HSL","deprecated":false,"deprecationMessage":""},{"name":"CMYK","deprecated":false,"deprecationMessage":""}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"","file":"projects/ngx-input-color/src/models/ColorInspector.enum.ts"}],"groupedVariables":{"projects/demo/src/app/app.config.ts":[{"name":"appConfig","ctype":"miscellaneous","subtype":"variable","file":"projects/demo/src/app/app.config.ts","deprecated":false,"deprecationMessage":"","type":"ApplicationConfig","defaultValue":"{\\r\\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\\r\\n}"}],"projects/ngx-input-color/src/utils/css-color-names.ts":[{"name":"colorNames","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-input-color/src/utils/css-color-names.ts","deprecated":false,"deprecationMessage":"","type":"Record<string, string>","defaultValue":"{\\r\\n  aliceblue: \'#f0f8ff\', antiquewhite: \'#faebd7\', aqua: \'#00ffff\', aquamarine: \'#7fffd4\', azure: \'#f0ffff\',\\r\\n  beige: \'#f5f5dc\', bisque: \'#ffe4c4\', black: \'#000000\', blanchedalmond: \'#ffebcd\', blue: \'#0000ff\',\\r\\n  blueviolet: \'#8a2be2\', brown: \'#a52a2a\', burlywood: \'#deb887\', cadetblue: \'#5f9ea0\', chartreuse: \'#7fff00\',\\r\\n  chocolate: \'#d2691e\', coral: \'#ff7f50\', cornflowerblue: \'#6495ed\', cornsilk: \'#fff8dc\', crimson: \'#dc143c\',\\r\\n  cyan: \'#00ffff\', darkblue: \'#00008b\', darkcyan: \'#008b8b\', darkgoldenrod: \'#b8860b\', darkgray: \'#a9a9a9\',\\r\\n  darkgreen: \'#006400\', darkgrey: \'#a9a9a9\', darkkhaki: \'#bdb76b\', darkmagenta: \'#8b008b\', darkolivegreen: \'#556b2f\',\\r\\n  darkorange: \'#ff8c00\', darkorchid: \'#9932cc\', darkred: \'#8b0000\', darksalmon: \'#e9967a\', darkseagreen: \'#8fbc8f\',\\r\\n  darkslateblue: \'#483d8b\', darkslategray: \'#2f4f4f\', darkslategrey: \'#2f4f4f\', darkturquoise: \'#00ced1\',\\r\\n  darkviolet: \'#9400d3\', deeppink: \'#ff1493\', deepskyblue: \'#00bfff\', dimgray: \'#696969\', dimgrey: \'#696969\',\\r\\n  dodgerblue: \'#1e90ff\', firebrick: \'#b22222\', floralwhite: \'#fffaf0\', forestgreen: \'#228b22\', fuchsia: \'#ff00ff\',\\r\\n  gainsboro: \'#dcdcdc\', ghostwhite: \'#f8f8ff\', gold: \'#ffd700\', goldenrod: \'#daa520\', gray: \'#808080\',\\r\\n  green: \'#008000\', greenyellow: \'#adff2f\', grey: \'#808080\', honeydew: \'#f0fff0\', hotpink: \'#ff69b4\',\\r\\n  indianred: \'#cd5c5c\', indigo: \'#4b0082\', ivory: \'#fffff0\', khaki: \'#f0e68c\', lavender: \'#e6e6fa\',\\r\\n  lavenderblush: \'#fff0f5\', lawngreen: \'#7cfc00\', lemonchiffon: \'#fffacd\', lightblue: \'#add8e6\', lightcoral: \'#f08080\',\\r\\n  lightcyan: \'#e0ffff\', lightgoldenrodyellow: \'#fafad2\', lightgray: \'#d3d3d3\', lightgreen: \'#90ee90\', lightgrey: \'#d3d3d3\',\\r\\n  lightpink: \'#ffb6c1\', lightsalmon: \'#ffa07a\', lightseagreen: \'#20b2aa\', lightskyblue: \'#87cefa\', lightslategray: \'#778899\',\\r\\n  lightslategrey: \'#778899\', lightsteelblue: \'#b0c4de\', lightyellow: \'#ffffe0\', lime: \'#00ff00\', limegreen: \'#32cd32\',\\r\\n  linen: \'#faf0e6\', magenta: \'#ff00ff\', maroon: \'#800000\', mediumaquamarine: \'#66cdaa\', mediumblue: \'#0000cd\',\\r\\n  mediumorchid: \'#ba55d3\', mediumpurple: \'#9370db\', mediumseagreen: \'#3cb371\', mediumslateblue: \'#7b68ee\',\\r\\n  mediumspringgreen: \'#00fa9a\', mediumturquoise: \'#48d1cc\', mediumvioletred: \'#c71585\', midnightblue: \'#191970\',\\r\\n  mintcream: \'#f5fffa\', mistyrose: \'#ffe4e1\', moccasin: \'#ffe4b5\', navajowhite: \'#ffdead\', navy: \'#000080\',\\r\\n  oldlace: \'#fdf5e6\', olive: \'#808000\', olivedrab: \'#6b8e23\', orange: \'#ffa500\', orangered: \'#ff4500\',\\r\\n  orchid: \'#da70d6\', palegoldenrod: \'#eee8aa\', palegreen: \'#98fb98\', paleturquoise: \'#afeeee\', palevioletred: \'#db7093\',\\r\\n  papayawhip: \'#ffefd5\', peachpuff: \'#ffdab9\', peru: \'#cd853f\', pink: \'#ffc0cb\', plum: \'#dda0dd\', powderblue: \'#b0e0e6\',\\r\\n  purple: \'#800080\', rebeccapurple: \'#663399\', red: \'#ff0000\', rosybrown: \'#bc8f8f\', royalblue: \'#4169e1\',\\r\\n  saddlebrown: \'#8b4513\', salmon: \'#fa8072\', sandybrown: \'#f4a460\', seagreen: \'#2e8b57\', seashell: \'#fff5ee\',\\r\\n  sienna: \'#a0522d\', silver: \'#c0c0c0\', skyblue: \'#87ceeb\', slateblue: \'#6a5acd\', slategray: \'#708090\',\\r\\n  slategrey: \'#708090\', snow: \'#fffafa\', springgreen: \'#00ff7f\', steelblue: \'#4682b4\', tan: \'#d2b48c\',\\r\\n  teal: \'#008080\', thistle: \'#d8bfd8\', tomato: \'#ff6347\', turquoise: \'#40e0d0\', violet: \'#ee82ee\', wheat: \'#f5deb3\',\\r\\n  white: \'#ffffff\', whitesmoke: \'#f5f5f5\', yellow: \'#ffff00\', yellowgreen: \'#9acd32\'\\r\\n}"}],"projects/ngx-input-color/src/lib/ngx-input-gradient/default-gradients.ts":[{"name":"DefaultGradients","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-input-color/src/lib/ngx-input-gradient/default-gradients.ts","deprecated":false,"deprecationMessage":"","type":"[][]","defaultValue":"[\\r\\n  // Sunset\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff7e5f\' },\\r\\n    { id: \'2\', value: 100, color: \'#feb47b\' },\\r\\n  ],\\r\\n\\r\\n  // Ocean Blue\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#00c6ff\' },\\r\\n    { id: \'2\', value: 100, color: \'#0072ff\' },\\r\\n  ],\\r\\n\\r\\n  // Purple Dream\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#a18cd1\' },\\r\\n    { id: \'2\', value: 100, color: \'#fbc2eb\' },\\r\\n  ],\\r\\n\\r\\n  // Cool Sky\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#2193b0\' },\\r\\n    { id: \'2\', value: 100, color: \'#6dd5ed\' },\\r\\n  ],\\r\\n\\r\\n  // Peach\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ed4264\' },\\r\\n    { id: \'2\', value: 100, color: \'#ffedbc\' },\\r\\n  ],\\r\\n\\r\\n  // Night Fade\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#a18cd1\' },\\r\\n    { id: \'2\', value: 100, color: \'#fbc2eb\' },\\r\\n  ],\\r\\n\\r\\n  // Aqua Marine\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#1a2980\' },\\r\\n    { id: \'2\', value: 100, color: \'#26d0ce\' },\\r\\n  ],\\r\\n\\r\\n  // Forest\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#5a3f37\' },\\r\\n    { id: \'2\', value: 100, color: \'#2c7744\' },\\r\\n  ],\\r\\n\\r\\n  // Flame\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff4e50\' },\\r\\n    { id: \'2\', value: 100, color: \'#f9d423\' },\\r\\n  ],\\r\\n\\r\\n  // Blue Lagoon\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#43cea2\' },\\r\\n    { id: \'2\', value: 100, color: \'#185a9d\' },\\r\\n  ],\\r\\n\\r\\n  // Retro\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#3fada8\' },\\r\\n    { id: \'2\', value: 100, color: \'#808080\' },\\r\\n  ],\\r\\n\\r\\n  // Sunrise\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff512f\' },\\r\\n    { id: \'2\', value: 100, color: \'#dd2476\' },\\r\\n  ],\\r\\n\\r\\n  // Rainbow\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#ff0000\' },\\r\\n    { id: \'2\', value: 20, color: \'#ff9900\' },\\r\\n    { id: \'3\', value: 40, color: \'#ffff00\' },\\r\\n    { id: \'4\', value: 60, color: \'#00ff00\' },\\r\\n    { id: \'5\', value: 80, color: \'#0000ff\' },\\r\\n    { id: \'6\', value: 100, color: \'#8b00ff\' },\\r\\n  ],\\r\\n\\r\\n  // Candy\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#f953c6\' },\\r\\n    { id: \'2\', value: 100, color: \'#b91d73\' },\\r\\n  ],\\r\\n\\r\\n  // Citrus\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#fdc830\' },\\r\\n    { id: \'2\', value: 100, color: \'#f37335\' },\\r\\n  ],\\r\\n\\r\\n  // Lava\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#e52d27\' },\\r\\n    { id: \'2\', value: 100, color: \'#b31217\' },\\r\\n  ],\\r\\n\\r\\n  // Winter\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#e6dada\' },\\r\\n    { id: \'2\', value: 100, color: \'#274046\' },\\r\\n  ],\\r\\n\\r\\n  // Purple Love\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#cc2b5e\' },\\r\\n    { id: \'2\', value: 100, color: \'#753a88\' },\\r\\n  ],\\r\\n\\r\\n  // Mint\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#76b852\' },\\r\\n    { id: \'2\', value: 100, color: \'#8dc26f\' },\\r\\n  ],\\r\\n\\r\\n  // Cloud\\r\\n  [\\r\\n    { id: \'1\', value: 0, color: \'#bdc3c7\' },\\r\\n    { id: \'2\', value: 100, color: \'#2c3e50\' },\\r\\n  ],\\r\\n]"}],"projects/ngx-input-color/src/lib/ngx-input-color/ngx-input-color.component.ts":[{"name":"EyeDropper","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-input-color/src/lib/ngx-input-color/ngx-input-color.component.ts","deprecated":false,"deprecationMessage":"","type":"any"}]},"groupedFunctions":{"projects/ngx-input-color/src/utils/conversion.ts":[{"name":"bound01","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Take input from [0, n] and return it as [0, 1]</p>\\n","args":[{"name":"n","type":"any","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"n","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"max","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"clamp","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""},{"name":"min","type":"number","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"min","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"max","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"cmykToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts CMYK to RBG\\nAssumes c, m, y, k are in the set [0, 100]</p>\\n","args":[{"name":"c","type":"number","deprecated":false,"deprecationMessage":""},{"name":"m","type":"number","deprecated":false,"deprecationMessage":""},{"name":"y","type":"number","deprecated":false,"deprecationMessage":""},{"name":"k","type":"number","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"c","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"m","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"y","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"k","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"convertDecimalToHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts a decimal to a hex value</p>\\n","args":[{"name":"d","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"d","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"convertHexToDecimal","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts a hex value to a decimal</p>\\n","args":[{"name":"h","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"h","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"convertToPercentage","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Replace a decimal with it&#39;s percentage value</p>\\n","args":[{"name":"n","deprecated":false,"deprecationMessage":""}],"returnType":"number | string","jsdoctags":[{"name":"n","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hexToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"RGBA","jsdoctags":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"hslToRgba","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an HSL color value to RGB.\\n<em>Assumes:</em> h in [0, 360], s and l in [0, 100]\\n<em>Returns:</em> { r, g, b } in [0, 255]</p>\\n","args":[{"name":"h","deprecated":false,"deprecationMessage":""},{"name":"s","deprecated":false,"deprecationMessage":""},{"name":"l","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"}],"returnType":"RGBA","jsdoctags":[{"name":"h","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"s","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"l","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"hsvToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an HSV color value to RGB.\\n<em>Assumes:</em> h in [0, 360], s and v in [0, 100]\\n<em>Returns:</em> { r, g, b } in [0, 255]</p>\\n","args":[{"name":"h","deprecated":false,"deprecationMessage":""},{"name":"s","deprecated":false,"deprecationMessage":""},{"name":"v","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<RGB>","jsdoctags":[{"name":"h","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"s","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"v","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isOnePointZero","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\\n<a href=\\"http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0\\">http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0</a></p>\\n","args":[{"name":"n","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"n","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isPercentage","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Check to see if string passed in is a percentage</p>\\n","args":[{"name":"n","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"n","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"numberInputToObject","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"color","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"RGB","jsdoctags":[{"name":"color","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pad2","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Force a hex value to have 2 characters</p>\\n","args":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"c","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseCmykString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"CMYK","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseHslString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"HSLA","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseHsvString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"HSVA","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseIntFromHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Parse a base-16 hex value into a base-10 integer</p>\\n","args":[{"name":"val","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"number","jsdoctags":[{"name":"val","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseRgbString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"RGBA","jsdoctags":[{"name":"str","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbaToArgbHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGBA color to an ARGB Hex8 string\\nRarely used, but required for &quot;toFilter()&quot;</p>\\n<p><em>Assumes:</em> r, g, b are contained in the set [0, 255] and a in [0, 1]\\n<em>Returns:</em> a 8 character argb hex</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbaToHex","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB/RGBA color to hex</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"},{"name":"allowAlpha","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"true"},{"name":"allow3Char","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false"}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}},{"name":"allowAlpha","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"true","tagName":{"text":"param"}},{"name":"allow3Char","type":"boolean","deprecated":false,"deprecationMessage":"","defaultValue":"false","tagName":{"text":"param"}}]},{"name":"rgbToCmyk","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToCmykString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHsl","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB color value to HSL.\\n<em>Assumes:</em> r, g, and b are contained in [0, 255]\\n<em>Returns:</em> { h: 0-360, s: 0-100, l: 0-100 }</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<HSL>","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHslaString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"rgbToHsv","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Converts an RGB color value to HSV\\n<em>Assumes:</em> r, g, and b are contained in [0, 255]\\n<em>Returns:</em> { h: 0-360, s: 0-100, v: 0-100 }</p>\\n","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<HSV>","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"rgbToHsvString","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":""},{"name":"g","type":"number","deprecated":false,"deprecationMessage":""},{"name":"b","type":"number","deprecated":false,"deprecationMessage":""},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1"}],"returnType":"string","jsdoctags":[{"name":"r","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"a","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"rgbToRgb","file":"projects/ngx-input-color/src/utils/conversion.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Handle bounds / percentage checking to conform to CSS color spec\\n<a href=\\"http://www.w3.org/TR/css3-color/\\">http://www.w3.org/TR/css3-color/</a>\\n<em>Assumes:</em> r, g, b in [0, 255] or [0, 1]\\n<em>Returns:</em> { r, g, b } in [0, 255]</p>\\n","args":[{"name":"r","deprecated":false,"deprecationMessage":""},{"name":"g","deprecated":false,"deprecationMessage":""},{"name":"b","deprecated":false,"deprecationMessage":""}],"returnType":"Numberify<RGB>","jsdoctags":[{"name":"r","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"g","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"b","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"projects/ngx-input-color/src/utils/build-gradient.ts":[{"name":"buildGradientFromStops","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"stops","deprecated":false,"deprecationMessage":""},{"name":"type","type":"GradientType","deprecated":false,"deprecationMessage":"","defaultValue":"\'linear\'"},{"name":"rotation","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0"}],"returnType":"string","jsdoctags":[{"name":"stops","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"type","type":"GradientType","deprecated":false,"deprecationMessage":"","defaultValue":"\'linear\'","tagName":{"text":"param"}},{"name":"rotation","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"0","tagName":{"text":"param"}}]},{"name":"generateId","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"rangeValues","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"rangeValues","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"generateRandomColor","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[],"returnType":"string"},{"name":"isValidGradient","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"boolean","jsdoctags":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"parseGradient","file":"projects/ngx-input-color/src/utils/build-gradient.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"literal type","jsdoctags":[{"name":"value","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"projects/ngx-input-color/src/utils/get-offset-position.ts":[{"name":"getOffsetPosition","file":"projects/ngx-input-color/src/utils/get-offset-position.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"evt","deprecated":false,"deprecationMessage":""},{"name":"parent","type":"HTMLElement","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"evt","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"parent","type":"HTMLElement","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"projects/ngx-input-color/src/utils/box-shadow.ts":[{"name":"parseBoxShadowToPx","file":"projects/ngx-input-color/src/utils/box-shadow.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"shadow","type":"string","deprecated":false,"deprecationMessage":""},{"name":"contextPx","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"16"}],"returnType":"BoxShadowValue | null","jsdoctags":[{"name":"shadow","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"contextPx","type":"number","deprecated":false,"deprecationMessage":"","defaultValue":"16","tagName":{"text":"param"}}]},{"name":"stringifyBoxShadow","file":"projects/ngx-input-color/src/utils/box-shadow.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"","args":[{"name":"obj","type":"BoxShadowValue","deprecated":false,"deprecationMessage":""}],"returnType":"string","jsdoctags":[{"name":"obj","type":"BoxShadowValue","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}]},"groupedEnumerations":{"projects/ngx-input-color/src/models/ColorFormats.enum.ts":[{"name":"ColorFormats","childs":[{"name":"HEX","deprecated":false,"deprecationMessage":""},{"name":"RGBA","deprecated":false,"deprecationMessage":""},{"name":"HSLA","deprecated":false,"deprecationMessage":""},{"name":"HSVA","deprecated":false,"deprecationMessage":""},{"name":"CMYK","deprecated":false,"deprecationMessage":""}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"","file":"projects/ngx-input-color/src/models/ColorFormats.enum.ts"}],"projects/ngx-input-color/src/models/ColorInspector.enum.ts":[{"name":"ColorInspector","childs":[{"name":"Picker","deprecated":false,"deprecationMessage":""},{"name":"RGB","deprecated":false,"deprecationMessage":""},{"name":"HSL","deprecated":false,"deprecationMessage":""},{"name":"CMYK","deprecated":false,"deprecationMessage":""}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"","file":"projects/ngx-input-color/src/models/ColorInspector.enum.ts"}]},"groupedTypeAliases":{"projects/ngx-input-color/src/utils/color-helper.ts":[{"name":"ColorInput","ctype":"miscellaneous","subtype":"typealias","rawtype":"string | CMYK | HSLA | HSVA | RGBA | NgxColor","file":"projects/ngx-input-color/src/utils/color-helper.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192},{"name":"OutputType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"CMYK\\" | \\"HSL\\" | \\"HSV\\" | \\"RGB\\" | \\"HEX\\"","file":"projects/ngx-input-color/src/utils/color-helper.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/ngx-input-color/src/models/eye-dropper.ts":[{"name":"EyeDropper","ctype":"miscellaneous","subtype":"typealias","rawtype":"any","file":"projects/ngx-input-color/src/models/eye-dropper.ts","deprecated":false,"deprecationMessage":"","description":"","kind":133}],"projects/ngx-input-color/src/models/GradientStop.ts":[{"name":"GradientType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"linear\\" | \\"radial\\"","file":"projects/ngx-input-color/src/models/GradientStop.ts","deprecated":false,"deprecationMessage":"","description":"","kind":192}],"projects/ngx-input-color/src/utils/conversion.ts":[{"name":"Numberify","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"projects/ngx-input-color/src/utils/conversion.ts","deprecated":false,"deprecationMessage":"","description":"<p>convert all properties in an interface to a number</p>\\n","kind":200}]}},"routes":[],"coverage":{"count":25,"status":"low","files":[{"filePath":"projects/demo/src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"projects/demo/src/app/app.config.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"appConfig","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/directives/ngx-input-box-shadow.directive.ts","type":"directive","linktype":"directive","name":"NgxInputBoxShadowDirective","coveragePercent":0,"coverageCount":"0/27","status":"low"},{"filePath":"projects/ngx-input-color/src/directives/ngx-input-color.directive.ts","type":"directive","linktype":"directive","name":"NgxInputColorDirective","coveragePercent":0,"coverageCount":"0/41","status":"low"},{"filePath":"projects/ngx-input-color/src/directives/ngx-input-gradient.directive.ts","type":"directive","linktype":"directive","name":"NgxInputGradientDirective","coveragePercent":0,"coverageCount":"0/27","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/inspectors/cmyk/cmyk.component.ts","type":"component","linktype":"component","name":"CmykComponent","coveragePercent":0,"coverageCount":"0/19","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/inspectors/hsl/hsl.component.ts","type":"component","linktype":"component","name":"HslComponent","coveragePercent":0,"coverageCount":"0/12","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/inspectors/picker/picker.component.ts","type":"component","linktype":"component","name":"PickerComponent","coveragePercent":0,"coverageCount":"0/13","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/inspectors/rgb/rgb.component.ts","type":"component","linktype":"component","name":"RgbComponent","coveragePercent":0,"coverageCount":"0/16","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/ngx-box-shadow/ngx-box-shadow.component.ts","type":"component","linktype":"component","name":"NgxBoxShadowComponent","coveragePercent":1,"coverageCount":"1/53","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/ngx-input-color/ngx-input-color.component.ts","type":"component","linktype":"component","name":"NgxInputColorComponent","coveragePercent":75,"coverageCount":"9/12","status":"good"},{"filePath":"projects/ngx-input-color/src/lib/ngx-input-color/ngx-input-color.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"EyeDropper","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/ngx-input-gradient/default-gradients.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DefaultGradients","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/lib/ngx-input-gradient/ngx-input-gradient.component.ts","type":"component","linktype":"component","name":"NgxInputGradientComponent","coveragePercent":0,"coverageCount":"0/39","status":"low"},{"filePath":"projects/ngx-input-color/src/models/BoxShadowValue.ts","type":"interface","linktype":"interface","name":"BoxShadowValue","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"projects/ngx-input-color/src/models/GradientStop.ts","type":"interface","linktype":"interface","name":"GradientStop","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"projects/ngx-input-color/src/models/GradientStop.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"GradientType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/models/IPosition.ts","type":"interface","linktype":"interface","name":"IPosition","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/ngx-input-color/src/models/eye-dropper.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"EyeDropper","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/pipes/enum-to-array.pipe.ts","type":"pipe","linktype":"pipe","name":"EnumToArrayPipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/pipes/enum-to-array.pipe.ts","type":"pipe","linktype":"pipe","name":"EnumToArrayStringValuePipe","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/range-slider/range-slider.component.ts","type":"component","linktype":"component","name":"RangeSliderComponent","coveragePercent":15,"coverageCount":"7/44","status":"low"},{"filePath":"projects/ngx-input-color/src/range-slider/range-slider.component.ts","type":"class","linktype":"classe","name":"ValueModel","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"projects/ngx-input-color/src/range-slider/range-slider.component.ts","type":"interface","linktype":"interface","name":"IValue","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/ngx-input-color/src/saturation/saturation.component.ts","type":"component","linktype":"component","name":"SaturationComponent","coveragePercent":0,"coverageCount":"0/40","status":"low"},{"filePath":"projects/ngx-input-color/src/slider/slider.component.ts","type":"component","linktype":"component","name":"SliderComponent","coveragePercent":0,"coverageCount":"0/39","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/box-shadow.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseBoxShadowToPx","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/box-shadow.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"stringifyBoxShadow","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/build-gradient.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"buildGradientFromStops","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/build-gradient.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"generateId","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/build-gradient.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"generateRandomColor","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/build-gradient.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"isValidGradient","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/build-gradient.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseGradient","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/color-helper.ts","type":"class","linktype":"classe","name":"NgxColor","coveragePercent":0,"coverageCount":"0/21","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/color-helper.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"ColorInput","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/color-helper.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"OutputType","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"bound01","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"clamp","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"cmykToRgb","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"convertDecimalToHex","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"convertHexToDecimal","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"convertToPercentage","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"hexToRgb","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"hslToRgba","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"hsvToRgb","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"isOnePointZero","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"isPercentage","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"numberInputToObject","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"pad2","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseCmykString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseHslString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseHsvString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseIntFromHex","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"parseRgbString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbaToArgbHex","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbaToHex","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToCmyk","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToCmykString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToHsl","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToHslaString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToHsv","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToHsvString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"rgbToRgb","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/conversion.ts","type":"type alias","linktype":"miscellaneous","linksubtype":"typealias","name":"Numberify","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-input-color/src/utils/css-color-names.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"colorNames","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/get-offset-position.ts","type":"function","linktype":"miscellaneous","linksubtype":"function","name":"getOffsetPosition","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"CMYK","coveragePercent":20,"coverageCount":"1/5","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"HSL","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"HSLA","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"HSV","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"HSVA","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"RGB","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"projects/ngx-input-color/src/utils/interfaces.ts","type":"class","linktype":"classe","name":"RGBA","coveragePercent":0,"coverageCount":"0/5","status":"low"}]}}');(0,angular.$)(documentation_namespaceObject);const _storybook_preview={argTypes:{},parameters:{actions:{},controls:{matchers:{color:/(background|color)$/i,date:/Date$/i},expanded:!1},docs:{}}}},"./projects/storybook/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then(()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e})}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./projects/storybook/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$",module.exports=webpackEmptyAsyncContext},"./projects/storybook/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cmjs%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./ngx-box-shadow/ngx-box-shadow.stories":["./projects/storybook/src/ngx-box-shadow/ngx-box-shadow.stories.ts",118,395,368],"./ngx-box-shadow/ngx-box-shadow.stories.ts":["./projects/storybook/src/ngx-box-shadow/ngx-box-shadow.stories.ts",118,395,368],"./ngx-input-color/ngx-input-color.stories":["./projects/storybook/src/ngx-input-color/ngx-input-color.stories.ts",118,395,82],"./ngx-input-color/ngx-input-color.stories.ts":["./projects/storybook/src/ngx-input-color/ngx-input-color.stories.ts",118,395,82],"./ngx-input-gradient/ngx-input-gradient.stories":["./projects/storybook/src/ngx-input-gradient/ngx-input-gradient.stories.ts",118,395,654],"./ngx-input-gradient/ngx-input-gradient.stories.ts":["./projects/storybook/src/ngx-input-gradient/ngx-input-gradient.stories.ts",118,395,654]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then(()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e});var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(()=>__webpack_require__(id))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./projects/storybook/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cmjs%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_CHANNELS_=__webpack_require__("storybook/internal/channels"),csf=(__webpack_require__("storybook/internal/core-events"),__webpack_require__("./node_modules/storybook/dist/csf/index.js")),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/preview-api"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const pipeline=x=>x(),importers=[function(){var _ref=(0,asyncToGenerator.A)(function*(path){if(!/^\.[\\/](?:projects[\\/]storybook(?:[\\/](?!\.)(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/]|[\\/]|$)(?!\.)(?=.)[^\\/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(21);return __webpack_require__("./projects/storybook lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$")("./"+pathRemainder)});return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.A)(function*(path){if(!/^\.[\\/](?:projects[\\/]storybook[\\/]src(?:[\\/](?!\.)(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/]|[\\/]|$)(?!\.)(?=.)[^\\/]*?\.mdx)$/.exec(path))return;const pathRemainder=path.substring(25);return __webpack_require__("./projects/storybook/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.mdx)$")("./"+pathRemainder)});return function(_x2){return _ref2.apply(this,arguments)}}(),function(){var _ref3=(0,asyncToGenerator.A)(function*(path){if(!/^\.[\\/](?:projects[\\/]storybook[\\/]src(?:[\\/](?!\.)(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/]|[\\/]|$)(?!\.)(?=.)[^\\/]*?\.stories\.(js|jsx|mjs|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(25);return __webpack_require__("./projects/storybook/src lazy recursive ^\\.\\/.*$ include: (?%21.*node_modules)(?:[\\\\/]projects[\\\\/]storybook[\\\\/]src(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.(js%7Cjsx%7Cmjs%7Cts%7Ctsx))$")("./"+pathRemainder)});return function(_x3){return _ref3.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.A)(function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield pipeline(()=>importers[i](path));if(moduleExports)return moduleExports}})).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNELS_.createBrowserChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),"DEVELOPMENT"===external_STORYBOOK_MODULE_GLOBAL_.global.CONFIG_TYPE&&(window.__STORYBOOK_SERVER_CHANNEL__=channel);const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb(function importFn(_x4){return _importFn.apply(this,arguments)},()=>{const previewAnnotations=[__webpack_require__("./node_modules/@storybook/angular/dist/client/preview-prod.mjs"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.mjs"),__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/preview.mjs"),__webpack_require__("./projects/storybook/.storybook/preview.ts")],userPreview=previewAnnotations[previewAnnotations.length-1]?.default;return(0,csf.bU)(userPreview)?userPreview.composed:(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)(previewAnnotations)});window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel},"@storybook/global":module=>{"use strict";module.exports=__STORYBOOK_MODULE_GLOBAL__},"storybook/internal/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"storybook/internal/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"storybook/internal/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"storybook/internal/preview-errors":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS__},"storybook/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[568],()=>(__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./storybook-config-entry.js")));__webpack_require__.O()}]);